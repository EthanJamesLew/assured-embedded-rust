//! Implementation for lustre node `cruise_controller` (see [Cruise_controller](struct.Cruise_controller.html)).
//!
//! Code generated by the [Kind 2 model checker][kind 2].
//!
//! [kind 2]: http://kind2-mc.github.io/kind2/ (The Kind 2 model checker)

// Deactiving lint warnings the transformation does not respect.
#![no_std]
#![allow(
  non_upper_case_globals, non_snake_case, non_camel_case_types,
  unused_variables, unused_parens
)]

// TODO: [CODEGEN] don't dump this into module
use Lustre::*;

// No Entry point.


/// Stores the state for **top node** `cruise_controller`.
///
/// # Inputs
///
/// | Lustre identifier | Type |
/// |:---:|:---|
/// | `onOff` | Bool |
/// | `decelSet` | Bool |
/// | `accelResume` | Bool |
/// | `cancel` | Bool |
/// | `brakePedal` | Bool |
/// | `carGear` | Int |
/// | `carSpeed` | Real |
/// | `validInputs` | Bool |
///
/// # Outputs
///
/// | Lustre identifier | Type |
/// |:---:|:---|
/// | `mode` | Int |
/// | `cruiseThrottle` | Real |
/// | `desiredSpeed` | Real |
/// | `VRP1` | Bool |
/// | `VRP2` | Bool |
/// | `CP8a` | Bool |
/// | `VRP3` | Bool |
/// | `VRP4` | Bool |
/// | `SP4` | Bool |
/// | `SP5` | Bool |
/// | `SP6` | Bool |
/// | `SP7` | Bool |
/// | `SP3b` | Bool |
/// | `SP3c` | Bool |
/// | `SP3` | Bool |
/// | `SP3a` | Bool |
/// | `SP2` | Bool |
/// | `SP1` | Bool |
/// | `SP8` | Bool |
/// | `SP9` | Bool |
/// | `SP10` | Bool |
/// | `SP11` | Bool |
///
/// # Sub systems
///
/// No subsystems for this system.
///
/// # Assertions
///
/// /// No assertions for this system.
///
/// # Assumptions
///
/// No assumptions for this system.
///
#[derive(Copy, Clone)] 
pub struct Cruise_controller {
  /// Input: `cruise_controller.usr.onOff`
  pub svar_onOff: Bool,
  /// Input: `cruise_controller.usr.decelSet`
  pub svar_decelSet: Bool,
  /// Input: `cruise_controller.usr.accelResume`
  pub svar_accelResume: Bool,
  /// Input: `cruise_controller.usr.cancel`
  pub svar_cancel: Bool,
  /// Input: `cruise_controller.usr.brakePedal`
  pub svar_brakePedal: Bool,
  /// Input: `cruise_controller.usr.carGear`
  pub svar_carGear: Int,
  /// Input: `cruise_controller.usr.carSpeed`
  pub svar_carSpeed: Real,
  /// Input: `cruise_controller.usr.validInputs`
  pub svar_validInputs: Bool,

  /// Output: `cruise_controller.usr.mode`
  pub svar_mode: Int,
  /// Output: `cruise_controller.usr.cruiseThrottle`
  pub svar_cruiseThrottle: Real,
  /// Output: `cruise_controller.usr.desiredSpeed`
  pub svar_desiredSpeed: Real,
  /// Output: `cruise_controller.usr.VRP1`
  pub svar_VRP1: Bool,
  /// Output: `cruise_controller.usr.VRP2`
  pub svar_VRP2: Bool,
  /// Output: `cruise_controller.usr.CP8a`
  pub svar_CP8a: Bool,
  /// Output: `cruise_controller.usr.VRP3`
  pub svar_VRP3: Bool,
  /// Output: `cruise_controller.usr.VRP4`
  pub svar_VRP4: Bool,
  /// Output: `cruise_controller.usr.SP4`
  pub svar_SP4: Bool,
  /// Output: `cruise_controller.usr.SP5`
  pub svar_SP5: Bool,
  /// Output: `cruise_controller.usr.SP6`
  pub svar_SP6: Bool,
  /// Output: `cruise_controller.usr.SP7`
  pub svar_SP7: Bool,
  /// Output: `cruise_controller.usr.SP3b`
  pub svar_SP3b: Bool,
  /// Output: `cruise_controller.usr.SP3c`
  pub svar_SP3c: Bool,
  /// Output: `cruise_controller.usr.SP3`
  pub svar_SP3: Bool,
  /// Output: `cruise_controller.usr.SP3a`
  pub svar_SP3a: Bool,
  /// Output: `cruise_controller.usr.SP2`
  pub svar_SP2: Bool,
  /// Output: `cruise_controller.usr.SP1`
  pub svar_SP1: Bool,
  /// Output: `cruise_controller.usr.SP8`
  pub svar_SP8: Bool,
  /// Output: `cruise_controller.usr.SP9`
  pub svar_SP9: Bool,
  /// Output: `cruise_controller.usr.SP10`
  pub svar_SP10: Bool,
  /// Output: `cruise_controller.usr.SP11`
  pub svar_SP11: Bool,

  /// Local, invisble ghost: `cruise_controller.res.subrange_1`
  pub svar_subrange_1: Bool,
  /// Local, local: `cruise_controller.impl.usr.cruise_controller_CruiseController_VRP4_Relational_Operator1`
  pub svar_cruise_controller_CruiseController_VRP4_Relational_Operator1: Bool,
  /// Local, local: `cruise_controller.impl.usr.cruise_controller_CruiseController_VRP4_Relational_Operator`
  pub svar_cruise_controller_CruiseController_VRP4_Relational_Operator: Bool,
  /// Local, local: `cruise_controller.impl.usr.cruise_controller_CruiseController_VRP3_Logical_Operator`
  pub svar_cruise_controller_CruiseController_VRP3_Logical_Operator: Bool,
  /// Local, local: `cruise_controller.impl.usr.cruise_controller_CruiseController_VRP3__Const1_Eq`
  pub svar_cruise_controller_CruiseController_VRP3__Const1_Eq: Bool,
  /// Local, local: `cruise_controller.impl.usr.cruise_controller_CruiseController_VRP3__Const_Eq`
  pub svar_cruise_controller_CruiseController_VRP3__Const_Eq: Bool,
  /// Local, local: `cruise_controller.impl.usr.cruise_controller_CruiseController_VRP2___Const_gte`
  pub svar_cruise_controller_CruiseController_VRP2___Const_gte: Bool,
  /// Local, local: `cruise_controller.impl.usr.cruise_controller_CruiseController_VRP2___Const__gte`
  pub svar_cruise_controller_CruiseController_VRP2___Const__gte: Bool,
  /// Local, local: `cruise_controller.impl.usr.cruise_controller_CruiseController_VRP1___Const_gte`
  pub svar_cruise_controller_CruiseController_VRP1___Const_gte: Bool,
  /// Local, local: `cruise_controller.impl.usr.cruise_controller_CruiseController_VRP1___Const__gte`
  pub svar_cruise_controller_CruiseController_VRP1___Const__gte: Bool,
  /// Local, local: `cruise_controller.impl.usr.cruise_controller_CruiseController_SetThrottle_throttleDeltaPerStep`
  pub svar_cruise_controller_CruiseController_SetThrottle_throttleDeltaPerStep: Real,
  /// Local, local: `cruise_controller.impl.usr.cruise_controller_CruiseController_SetThrottle_throttleDeltaPerSecSat`
  pub svar_cruise_controller_CruiseController_SetThrottle_throttleDeltaPerSecSat: Real,
  /// Local, local: `cruise_controller.impl.usr.cruise_controller_CruiseController_SetThrottle_thottleDeltaPerSec`
  pub svar_cruise_controller_CruiseController_SetThrottle_thottleDeltaPerSec: Real,
  /// Local, local: `cruise_controller.impl.usr.cruise_controller_CruiseController_SetThrottle_speedDiff`
  pub svar_cruise_controller_CruiseController_SetThrottle_speedDiff: Real,
  /// Local, local: `cruise_controller.impl.usr.cruise_controller_CruiseController_SetThrottle_cruiseThrottleSat`
  pub svar_cruise_controller_CruiseController_SetThrottle_cruiseThrottleSat: Real,
  /// Local, local: `cruise_controller.impl.usr.cruise_controller_CruiseController_SetThrottle_cruiseThrottlePrevPlusDelta`
  pub svar_cruise_controller_CruiseController_SetThrottle_cruiseThrottlePrevPlusDelta: Real,
  /// Local, local: `cruise_controller.impl.usr.cruise_controller_CruiseController_SetThrottle_cruiseThrottlePrev`
  pub svar_cruise_controller_CruiseController_SetThrottle_cruiseThrottlePrev: Real,
  /// Local, local: `cruise_controller.impl.usr.cruise_controller_CruiseController_SetDesiredSpeed_increasedesiredSpeed`
  pub svar_cruise_controller_CruiseController_SetDesiredSpeed_increasedesiredSpeed: Real,
  /// Local, local: `cruise_controller.impl.usr.cruise_controller_CruiseController_SetDesiredSpeed_prev_desiredSpeed`
  pub svar_cruise_controller_CruiseController_SetDesiredSpeed_prev_desiredSpeed: Real,
  /// Local, local: `cruise_controller.impl.usr.cruise_controller_CruiseController_SetDesiredSpeed_ResetDesiredSpeed`
  pub svar_cruise_controller_CruiseController_SetDesiredSpeed_ResetDesiredSpeed: Real,
  /// Local, local: `cruise_controller.impl.usr.cruise_controller_CruiseController_SetDesiredSpeed_MaintainDesiredSpeed`
  pub svar_cruise_controller_CruiseController_SetDesiredSpeed_MaintainDesiredSpeed: Real,
  /// Local, local: `cruise_controller.impl.usr.cruise_controller_CruiseController_SetDesiredSpeed_InactiveMaintanDesiredSpeed`
  pub svar_cruise_controller_CruiseController_SetDesiredSpeed_InactiveMaintanDesiredSpeed: Real,
  /// Local, local: `cruise_controller.impl.usr.cruise_controller_CruiseController_SetDesiredSpeed_DecreaseDesiredSpeed`
  pub svar_cruise_controller_CruiseController_SetDesiredSpeed_DecreaseDesiredSpeed: Real,
  /// Local, local: `cruise_controller.impl.usr.cruise_controller_CruiseController_SetDesiredSpeed_isModeIncrease___isModeIncrease`
  pub svar_cruise_controller_CruiseController_SetDesiredSpeed_isModeIncrease___isModeIncrease: Bool,
  /// Local, local: `cruise_controller.impl.usr.cruise_controller_CruiseController_SetDesiredSpeed_isModeDecrease___isModeDecrease`
  pub svar_cruise_controller_CruiseController_SetDesiredSpeed_isModeDecrease___isModeDecrease: Bool,
  /// Local, local: `cruise_controller.impl.usr.cruise_controller_CruiseController_SP9_Relational_Operator`
  pub svar_cruise_controller_CruiseController_SP9_Relational_Operator: Bool,
  /// Local, local: `cruise_controller.impl.usr.cruise_controller_CruiseController_SP9_Logical_Operator`
  pub svar_cruise_controller_CruiseController_SP9_Logical_Operator: Bool,
  /// Local, local: `cruise_controller.impl.usr.cruise_controller_CruiseController_SP9_pre_DECREASE_pre_DEC`
  pub svar_cruise_controller_CruiseController_SP9_pre_DECREASE_pre_DEC: Bool,
  /// Local, local: `cruise_controller.impl.usr.cruise_controller_CruiseController_SP8_Relational_Operator`
  pub svar_cruise_controller_CruiseController_SP8_Relational_Operator: Bool,
  /// Local, local: `cruise_controller.impl.usr.cruise_controller_CruiseController_SP8_pre_realval_pre_x_`
  pub svar_cruise_controller_CruiseController_SP8_pre_realval_pre_x_: Real,
  /// Local, local: `cruise_controller.impl.usr.cruise_controller_CruiseController_SP8_pre_MAINTAIN_pre_MNT`
  pub svar_cruise_controller_CruiseController_SP8_pre_MAINTAIN_pre_MNT: Bool,
  /// Local, local: `cruise_controller.impl.usr.cruise_controller_CruiseController_SP8_pre_MAINTAIN__MAINTAIN____MAINT`
  pub svar_cruise_controller_CruiseController_SP8_pre_MAINTAIN__MAINTAIN____MAINT: Bool,
  /// Local, local: `cruise_controller.impl.usr.cruise_controller_CruiseController_SP7_Relational_Operator`
  pub svar_cruise_controller_CruiseController_SP7_Relational_Operator: Bool,
  /// Local, local: `cruise_controller.impl.usr.cruise_controller_CruiseController_SP6_Relational_Operator`
  pub svar_cruise_controller_CruiseController_SP6_Relational_Operator: Bool,
  /// Local, local: `cruise_controller.impl.usr.cruise_controller_CruiseController_SP5_Relational_Operator`
  pub svar_cruise_controller_CruiseController_SP5_Relational_Operator: Bool,
  /// Local, local: `cruise_controller.impl.usr.cruise_controller_CruiseController_SP5_pre_realval_pre_x_`
  pub svar_cruise_controller_CruiseController_SP5_pre_realval_pre_x_: Real,
  /// Local, local: `cruise_controller.impl.usr.cruise_controller_CruiseController_SP5_pre_realval_x`
  pub svar_cruise_controller_CruiseController_SP5_pre_realval_x: Real,
  /// Local, local: `cruise_controller.impl.usr.cruise_controller_CruiseController_SP4__ACT_INACT__ACT_INACT`
  pub svar_cruise_controller_CruiseController_SP4__ACT_INACT__ACT_INACT: Bool,
  /// Local, local: `cruise_controller.impl.usr.cruise_controller_CruiseController_SP4__ACT_INACT__INACTIVE__INACT`
  pub svar_cruise_controller_CruiseController_SP4__ACT_INACT__INACTIVE__INACT: Bool,
  /// Local, local: `cruise_controller.impl.usr.cruise_controller_CruiseController_SP4__ACT_INACT__ACTIVE__ACT`
  pub svar_cruise_controller_CruiseController_SP4__ACT_INACT__ACTIVE__ACT: Bool,
  /// Local, local: `cruise_controller.impl.usr.cruise_controller_CruiseController_SP3b__Const2_Eq`
  pub svar_cruise_controller_CruiseController_SP3b__Const2_Eq: Bool,
  /// Local, local: `cruise_controller.impl.usr.cruise_controller_CruiseController_SP3a__Const_Eq`
  pub svar_cruise_controller_CruiseController_SP3a__Const_Eq: Bool,
  /// Local, local: `cruise_controller.impl.usr.cruise_controller_CruiseController_SP3__OFF_INIT__OFF_INIT`
  pub svar_cruise_controller_CruiseController_SP3__OFF_INIT__OFF_INIT: Bool,
  /// Local, local: `cruise_controller.impl.usr.cruise_controller_CruiseController_SP3__OFF_INIT__OFF__OFF`
  pub svar_cruise_controller_CruiseController_SP3__OFF_INIT__OFF__OFF: Bool,
  /// Local, local: `cruise_controller.impl.usr.cruise_controller_CruiseController_SP3__OFF_INIT__INIT__INIT`
  pub svar_cruise_controller_CruiseController_SP3__OFF_INIT__INIT__INIT: Bool,
  /// Local, local: `cruise_controller.impl.usr.cruise_controller_CruiseController_SP3__Const2_Eq`
  pub svar_cruise_controller_CruiseController_SP3__Const2_Eq: Bool,
  /// Local, local: `cruise_controller.impl.usr.cruise_controller_CruiseController_SP11___Const1_gte`
  pub svar_cruise_controller_CruiseController_SP11___Const1_gte: Bool,
  /// Local, local: `cruise_controller.impl.usr.cruise_controller_CruiseController_SP11___Const_Eq`
  pub svar_cruise_controller_CruiseController_SP11___Const_Eq: Bool,
  /// Local, local: `cruise_controller.impl.usr.cruise_controller_CruiseController_SP10_Relational_Operator`
  pub svar_cruise_controller_CruiseController_SP10_Relational_Operator: Bool,
  /// Local, local: `cruise_controller.impl.usr.cruise_controller_CruiseController_SP10_Logical_Operator`
  pub svar_cruise_controller_CruiseController_SP10_Logical_Operator: Bool,
  /// Local, local: `cruise_controller.impl.usr.cruise_controller_CruiseController_SP10_pre_realval_x`
  pub svar_cruise_controller_CruiseController_SP10_pre_realval_x: Real,
  /// Local, local: `cruise_controller.impl.usr.cruise_controller_CruiseController_SP10_pre_INCREASE_pre_INC`
  pub svar_cruise_controller_CruiseController_SP10_pre_INCREASE_pre_INC: Bool,
  /// Local, local: `cruise_controller.impl.usr.cruise_controller_CruiseController_SP10___Const_Eq`
  pub svar_cruise_controller_CruiseController_SP10___Const_Eq: Bool,
  /// Local, local: `cruise_controller.impl.usr.cruise_controller_CruiseController_SP1__Const_Eq`
  pub svar_cruise_controller_CruiseController_SP1__Const_Eq: Bool,
  /// Local, local: `cruise_controller.impl.usr.cruise_controller_CruiseController_ModeLogic_safetyCondition1`
  pub svar_cruise_controller_CruiseController_ModeLogic_safetyCondition1: Bool,
  /// Local, local: `cruise_controller.impl.usr.cruise_controller_CruiseController_ModeLogic_setEvent_Out`
  pub svar_cruise_controller_CruiseController_ModeLogic_setEvent_Out: Bool,
  /// Local, local: `cruise_controller.impl.usr.cruise_controller_CruiseController_ModeLogic_setEvent_Unit_Delay`
  pub svar_cruise_controller_CruiseController_ModeLogic_setEvent_Unit_Delay: Bool,
  /// Local, local: `cruise_controller.impl.usr.cruise_controller_CruiseController_ModeLogic_setEvent_InBool`
  pub svar_cruise_controller_CruiseController_ModeLogic_setEvent_InBool: Bool,
  /// Local, local: `cruise_controller.impl.usr.cruise_controller_CruiseController_ModeLogic_safetyCondition_Relational_Operator1`
  pub svar_cruise_controller_CruiseController_ModeLogic_safetyCondition_Relational_Operator1: Bool,
  /// Local, local: `cruise_controller.impl.usr.cruise_controller_CruiseController_ModeLogic_safetyCondition_Relational_Operator`
  pub svar_cruise_controller_CruiseController_ModeLogic_safetyCondition_Relational_Operator: Bool,
  /// Local, local: `cruise_controller.impl.usr.cruise_controller_CruiseController_ModeLogic_resumeEvent_Out`
  pub svar_cruise_controller_CruiseController_ModeLogic_resumeEvent_Out: Bool,
  /// Local, local: `cruise_controller.impl.usr.cruise_controller_CruiseController_ModeLogic_resumeEvent_Unit_Delay`
  pub svar_cruise_controller_CruiseController_ModeLogic_resumeEvent_Unit_Delay: Bool,
  /// Local, local: `cruise_controller.impl.usr.cruise_controller_CruiseController_ModeLogic_resumeEvent_InBool`
  pub svar_cruise_controller_CruiseController_ModeLogic_resumeEvent_InBool: Bool,
  /// Local, local: `cruise_controller.impl.usr.cruise_controller_CruiseController_ModeLogic_DelayOnsetDecel_Out`
  pub svar_cruise_controller_CruiseController_ModeLogic_DelayOnsetDecel_Out: Bool,
  /// Local, local: `cruise_controller.impl.usr.cruise_controller_CruiseController_ModeLogic_DelayOnsetDecel_Bounded_Count_Out`
  pub svar_cruise_controller_CruiseController_ModeLogic_DelayOnsetDecel_Bounded_Count_Out: Int,
  /// Local, local: `cruise_controller.impl.usr.cruise_controller_CruiseController_ModeLogic_DelayOnsetDecel_Bounded_Count_Unit_Delay`
  pub svar_cruise_controller_CruiseController_ModeLogic_DelayOnsetDecel_Bounded_Count_Unit_Delay: Int,
  /// Local, local: `cruise_controller.impl.usr.cruise_controller_CruiseController_ModeLogic_DelayOnsetDecel_Bounded_Count_Switch`
  pub svar_cruise_controller_CruiseController_ModeLogic_DelayOnsetDecel_Bounded_Count_Switch: Int,
  /// Local, local: `cruise_controller.impl.usr.cruise_controller_CruiseController_ModeLogic_DelayOnsetDecel_Bounded_Count_Add`
  pub svar_cruise_controller_CruiseController_ModeLogic_DelayOnsetDecel_Bounded_Count_Add: Int,
  /// Local, local: `cruise_controller.impl.usr.cruise_controller_CruiseController_ModeLogic_DelayOnsetDecel_Bounded_Count_Limit_Enforce_lower_limit`
  pub svar_cruise_controller_CruiseController_ModeLogic_DelayOnsetDecel_Bounded_Count_Limit_Enforce_lower_limit: Int,
  /// Local, local: `cruise_controller.impl.usr.cruise_controller_CruiseController_ModeLogic_DelayOnsetAccel_Out`
  pub svar_cruise_controller_CruiseController_ModeLogic_DelayOnsetAccel_Out: Bool,
  /// Local, local: `cruise_controller.impl.usr.cruise_controller_CruiseController_ModeLogic_DelayOnsetAccel_Bounded_Count_Out`
  pub svar_cruise_controller_CruiseController_ModeLogic_DelayOnsetAccel_Bounded_Count_Out: Int,
  /// Local, local: `cruise_controller.impl.usr.cruise_controller_CruiseController_ModeLogic_DelayOnsetAccel_Bounded_Count_Unit_Delay`
  pub svar_cruise_controller_CruiseController_ModeLogic_DelayOnsetAccel_Bounded_Count_Unit_Delay: Int,
  /// Local, local: `cruise_controller.impl.usr.cruise_controller_CruiseController_ModeLogic_DelayOnsetAccel_Bounded_Count_Switch`
  pub svar_cruise_controller_CruiseController_ModeLogic_DelayOnsetAccel_Bounded_Count_Switch: Int,
  /// Local, local: `cruise_controller.impl.usr.cruise_controller_CruiseController_ModeLogic_DelayOnsetAccel_Bounded_Count_Add`
  pub svar_cruise_controller_CruiseController_ModeLogic_DelayOnsetAccel_Bounded_Count_Add: Int,
  /// Local, local: `cruise_controller.impl.usr.cruise_controller_CruiseController_ModeLogic_DelayOnsetAccel_Bounded_Count_Limit_Enforce_lower_limit`
  pub svar_cruise_controller_CruiseController_ModeLogic_DelayOnsetAccel_Bounded_Count_Limit_Enforce_lower_limit: Int,
  /// Local, local: `cruise_controller.impl.usr.cruise_controller_CruiseController_CP8a_isCruiseActive_Relational_Operator3`
  pub svar_cruise_controller_CruiseController_CP8a_isCruiseActive_Relational_Operator3: Bool,
  /// Local, local: `cruise_controller.impl.usr.cruise_controller_CruiseController_CP8a_isCruiseActive_Relational_Operator2`
  pub svar_cruise_controller_CruiseController_CP8a_isCruiseActive_Relational_Operator2: Bool,
  /// Local, local: `cruise_controller.impl.usr.cruise_controller_CruiseController_CP8a_isCruiseActive_Relational_Operator1`
  pub svar_cruise_controller_CruiseController_CP8a_isCruiseActive_Relational_Operator1: Bool,
  /// Local, local: `cruise_controller.impl.usr.chart_CruiseController_ModeLogic_mode_logic_setDesiredSpeed`
  pub svar_chart_CruiseController_ModeLogic_mode_logic_setDesiredSpeed: Bool,
  /// Local, local: `cruise_controller.impl.usr.chart_CruiseController_ModeLogic_mode_logic_final_state_states___root`
  pub svar_chart_CruiseController_ModeLogic_mode_logic_final_state_states___root: Int,
  /// Local, local: `cruise_controller.impl.usr.chart_CruiseController_ModeLogic_mode_logic_rlt_state_1_states___root`
  pub svar_chart_CruiseController_ModeLogic_mode_logic_rlt_state_1_states___root: Int,
  /// Local, local: `cruise_controller.impl.usr.chart_CruiseController_ModeLogic_mode_logic_rlt_state_1_current_event`
  pub svar_chart_CruiseController_ModeLogic_mode_logic_rlt_state_1_current_event: Int,
  /// Local, local: `cruise_controller.impl.usr.chart_CruiseController_ModeLogic_mode_logic_begin_state_outports_setDesiredSpeed`
  pub svar_chart_CruiseController_ModeLogic_mode_logic_begin_state_outports_setDesiredSpeed: Bool,
  /// Local, local: `cruise_controller.impl.usr.chart_CruiseController_ModeLogic_mode_logic_begin_state_outports_mode`
  pub svar_chart_CruiseController_ModeLogic_mode_logic_begin_state_outports_mode: Int,
  /// Local, local: `cruise_controller.impl.usr.chart_CruiseController_ModeLogic_mode_logic_begin_state_states___root`
  pub svar_chart_CruiseController_ModeLogic_mode_logic_begin_state_states___root: Int,
  /// Local, local: `cruise_controller.impl.usr.chart_CruiseController_ModeLogic_mode_logic_rlt_evtInitStep`
  pub svar_chart_CruiseController_ModeLogic_mode_logic_rlt_evtInitStep: Bool,
  /// Local, local: `cruise_controller.impl.usr.rlt_enter_CruiseController_ModeLogic_mode_logic_rlt_state_2_outports_mode`
  pub svar_rlt_enter_CruiseController_ModeLogic_mode_logic_rlt_state_2_outports_mode: Int,
  /// Local, local: `cruise_controller.impl.usr.rlt_enter_CruiseController_ModeLogic_mode_logic_rlt_state_2_states___root`
  pub svar_rlt_enter_CruiseController_ModeLogic_mode_logic_rlt_state_2_states___root: Int,
  /// Local, local: `cruise_controller.impl.usr.rlt_enter_CruiseController_ModeLogic_mode_logic_rltCheckEntryStateConsistency_0`
  pub svar_rlt_enter_CruiseController_ModeLogic_mode_logic_rltCheckEntryStateConsistency_0: Bool,
  /// Local, local: `cruise_controller.impl.usr.rlt_eval_CruiseController_ModeLogic_mode_logic_rlt_state_7_outports_setDesiredSpeed`
  pub svar_rlt_eval_CruiseController_ModeLogic_mode_logic_rlt_state_7_outports_setDesiredSpeed: Bool,
  /// Local, local: `cruise_controller.impl.usr.rlt_eval_CruiseController_ModeLogic_mode_logic_rlt_state_7_outports_mode`
  pub svar_rlt_eval_CruiseController_ModeLogic_mode_logic_rlt_state_7_outports_mode: Int,
  /// Local, local: `cruise_controller.impl.usr.rlt_eval_CruiseController_ModeLogic_mode_logic_rlt_state_7_states___root`
  pub svar_rlt_eval_CruiseController_ModeLogic_mode_logic_rlt_state_7_states___root: Int,
  /// Local, local: `cruise_controller.impl.usr.rlt_eval_CruiseController_ModeLogic_mode_logic_rlt_state_4_outports_mode`
  pub svar_rlt_eval_CruiseController_ModeLogic_mode_logic_rlt_state_4_outports_mode: Int,
  /// Local, local: `cruise_controller.impl.usr.rlt_eval_CruiseController_ModeLogic_mode_logic_rlt_state_4_states___root`
  pub svar_rlt_eval_CruiseController_ModeLogic_mode_logic_rlt_state_4_states___root: Int,
  /// Local, local: `cruise_controller.impl.usr.rlt_eval_CruiseController_ModeLogic_mode_logic_rlt_state_3_states___root`
  pub svar_rlt_eval_CruiseController_ModeLogic_mode_logic_rlt_state_3_states___root: Int,
  /// Local, local: `cruise_controller.impl.usr.rlt_eval_CruiseController_ModeLogic_mode_logic_rlt_complete_1`
  pub svar_rlt_eval_CruiseController_ModeLogic_mode_logic_rlt_complete_1: Bool,
  /// Local, local: `cruise_controller.impl.usr.rlt_eval_CruiseController_ModeLogic_mode_logic_rlt_fired_1`
  pub svar_rlt_eval_CruiseController_ModeLogic_mode_logic_rlt_fired_1: Bool,
  /// Local, local: `cruise_controller.impl.usr.rlt_eval_CruiseController_ModeLogic_mode_logic_rlt_state_2_outports_mode`
  pub svar_rlt_eval_CruiseController_ModeLogic_mode_logic_rlt_state_2_outports_mode: Int,
  /// Local, local: `cruise_controller.impl.usr.rlt_eval_CruiseController_ModeLogic_mode_logic_rlt_state_2_states___root`
  pub svar_rlt_eval_CruiseController_ModeLogic_mode_logic_rlt_state_2_states___root: Int,
  /// Local, local: `cruise_controller.impl.usr.rlt_eval_CruiseController_ModeLogic_mode_logic_rlt_state_1_outports_setDesiredSpeed`
  pub svar_rlt_eval_CruiseController_ModeLogic_mode_logic_rlt_state_1_outports_setDesiredSpeed: Bool,
  /// Local, local: `cruise_controller.impl.usr.rlt_eval_CruiseController_ModeLogic_mode_logic_rlt_state_1_states___root`
  pub svar_rlt_eval_CruiseController_ModeLogic_mode_logic_rlt_state_1_states___root: Int,
  /// Local, local: `cruise_controller.impl.usr.rlt_eval_CruiseController_ModeLogic_mode_logic_rlt_fired_0`
  pub svar_rlt_eval_CruiseController_ModeLogic_mode_logic_rlt_fired_0: Bool,
  /// Local, local: `cruise_controller.impl.usr.rlt_exit_CruiseController_ModeLogic_mode_logic_On_rlt_state_5_outports_setDesiredSpeed`
  pub svar_rlt_exit_CruiseController_ModeLogic_mode_logic_On_rlt_state_5_outports_setDesiredSpeed: Bool,
  /// Local, local: `cruise_controller.impl.usr.rlt_exit_CruiseController_ModeLogic_mode_logic_On_rlt_state_5_states___root`
  pub svar_rlt_exit_CruiseController_ModeLogic_mode_logic_On_rlt_state_5_states___root: Int,
  /// Local, local: `cruise_controller.impl.usr.rlt_exit_CruiseController_ModeLogic_mode_logic_On_rlt_state_3_states___root`
  pub svar_rlt_exit_CruiseController_ModeLogic_mode_logic_On_rlt_state_3_states___root: Int,
  /// Local, local: `cruise_controller.impl.usr.rlt_exit_CruiseController_ModeLogic_mode_logic_On_rlt_state_2_states___root`
  pub svar_rlt_exit_CruiseController_ModeLogic_mode_logic_On_rlt_state_2_states___root: Int,
  /// Local, local: `cruise_controller.impl.usr.rlt_exit_CruiseController_ModeLogic_mode_logic_On_rlt_state_1_states___root`
  pub svar_rlt_exit_CruiseController_ModeLogic_mode_logic_On_rlt_state_1_states___root: Int,
  /// Local, local: `cruise_controller.impl.usr.rlt_exit_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_5_outports_setDesiredSpeed`
  pub svar_rlt_exit_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_5_outports_setDesiredSpeed: Bool,
  /// Local, local: `cruise_controller.impl.usr.rlt_exit_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_5_states___root`
  pub svar_rlt_exit_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_5_states___root: Int,
  /// Local, local: `cruise_controller.impl.usr.rlt_exit_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_3_states___root`
  pub svar_rlt_exit_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_3_states___root: Int,
  /// Local, local: `cruise_controller.impl.usr.rlt_exit_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_2_states___root`
  pub svar_rlt_exit_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_2_states___root: Int,
  /// Local, local: `cruise_controller.impl.usr.rlt_exit_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_1_states___root`
  pub svar_rlt_exit_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_1_states___root: Int,
  /// Local, local: `cruise_controller.impl.usr.rlt_exit_CruiseController_ModeLogic_mode_logic_On_Active_Maintain_rlt_state_3_outports_setDesiredSpeed`
  pub svar_rlt_exit_CruiseController_ModeLogic_mode_logic_On_Active_Maintain_rlt_state_3_outports_setDesiredSpeed: Bool,
  /// Local, local: `cruise_controller.impl.usr.rlt_exit_CruiseController_ModeLogic_mode_logic_On_Active_Maintain_rlt_state_3_states___root`
  pub svar_rlt_exit_CruiseController_ModeLogic_mode_logic_On_Active_Maintain_rlt_state_3_states___root: Int,
  /// Local, local: `cruise_controller.impl.usr.rlt_exit_CruiseController_ModeLogic_mode_logic_On_Active_Increase_rlt_state_2_states___root`
  pub svar_rlt_exit_CruiseController_ModeLogic_mode_logic_On_Active_Increase_rlt_state_2_states___root: Int,
  /// Local, local: `cruise_controller.impl.usr.rlt_exit_CruiseController_ModeLogic_mode_logic_On_Active_Decrease_rlt_state_2_states___root`
  pub svar_rlt_exit_CruiseController_ModeLogic_mode_logic_On_Active_Decrease_rlt_state_2_states___root: Int,
  /// Local, local: `cruise_controller.impl.usr.rlt_exit_CruiseController_ModeLogic_mode_logic_On_Init_rlt_state_2_states___root`
  pub svar_rlt_exit_CruiseController_ModeLogic_mode_logic_On_Init_rlt_state_2_states___root: Int,
  /// Local, local: `cruise_controller.impl.usr.rlt_exit_CruiseController_ModeLogic_mode_logic_On_Inactive_rlt_state_2_states___root`
  pub svar_rlt_exit_CruiseController_ModeLogic_mode_logic_On_Inactive_rlt_state_2_states___root: Int,
  /// Local, local: `cruise_controller.impl.usr.rlt_enter_CruiseController_ModeLogic_mode_logic_Off_rlt_state_3_outports_mode`
  pub svar_rlt_enter_CruiseController_ModeLogic_mode_logic_Off_rlt_state_3_outports_mode: Int,
  /// Local, local: `cruise_controller.impl.usr.rlt_enter_CruiseController_ModeLogic_mode_logic_Off_rlt_state_3_states___root`
  pub svar_rlt_enter_CruiseController_ModeLogic_mode_logic_Off_rlt_state_3_states___root: Int,
  /// Local, local: `cruise_controller.impl.usr.rlt_exit_CruiseController_ModeLogic_mode_logic_Off_rlt_state_2_states___root`
  pub svar_rlt_exit_CruiseController_ModeLogic_mode_logic_Off_rlt_state_2_states___root: Int,
  /// Local, local: `cruise_controller.impl.usr.rlt_enter_CruiseController_ModeLogic_mode_logic_On_rlt_state_3_outports_mode`
  pub svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_rlt_state_3_outports_mode: Int,
  /// Local, local: `cruise_controller.impl.usr.rlt_enter_CruiseController_ModeLogic_mode_logic_On_rlt_state_3_states___root`
  pub svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_rlt_state_3_states___root: Int,
  /// Local, local: `cruise_controller.impl.usr.rlt_enter_CruiseController_ModeLogic_mode_logic_On_rltCheckEntryStateConsistency_0`
  pub svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_rltCheckEntryStateConsistency_0: Bool,
  /// Local, local: `cruise_controller.impl.usr.rlt_enter_CruiseController_ModeLogic_mode_logic_On_rlt_fired_0`
  pub svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_rlt_fired_0: Bool,
  /// Local, local: `cruise_controller.impl.usr.rlt_enter_CruiseController_ModeLogic_mode_logic_On_rlt_state_1_states___root`
  pub svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_rlt_state_1_states___root: Int,
  /// Local, local: `cruise_controller.impl.usr.rlt_enter_CruiseController_ModeLogic_mode_logic_On_Init_rlt_state_3_outports_mode`
  pub svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_Init_rlt_state_3_outports_mode: Int,
  /// Local, local: `cruise_controller.impl.usr.rlt_enter_CruiseController_ModeLogic_mode_logic_On_Init_rlt_state_3_states___root`
  pub svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_Init_rlt_state_3_states___root: Int,
  /// Local, local: `cruise_controller.impl.usr.rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_state_14_outports_setDesiredSpeed`
  pub svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_state_14_outports_setDesiredSpeed: Bool,
  /// Local, local: `cruise_controller.impl.usr.rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_state_14_outports_mode`
  pub svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_state_14_outports_mode: Int,
  /// Local, local: `cruise_controller.impl.usr.rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_state_14_states___root`
  pub svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_state_14_states___root: Int,
  /// Local, local: `cruise_controller.impl.usr.rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_state_10_outports_mode`
  pub svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_state_10_outports_mode: Int,
  /// Local, local: `cruise_controller.impl.usr.rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_state_10_states___root`
  pub svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_state_10_states___root: Int,
  /// Local, local: `cruise_controller.impl.usr.rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_state_9_outports_setDesiredSpeed`
  pub svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_state_9_outports_setDesiredSpeed: Bool,
  /// Local, local: `cruise_controller.impl.usr.rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_state_8_states___root`
  pub svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_state_8_states___root: Int,
  /// Local, local: `cruise_controller.impl.usr.rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_complete_3`
  pub svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_complete_3: Bool,
  /// Local, local: `cruise_controller.impl.usr.rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_fired_3`
  pub svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_fired_3: Bool,
  /// Local, local: `cruise_controller.impl.usr.rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_state_7_outports_mode`
  pub svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_state_7_outports_mode: Int,
  /// Local, local: `cruise_controller.impl.usr.rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_state_7_states___root`
  pub svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_state_7_states___root: Int,
  /// Local, local: `cruise_controller.impl.usr.rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_state_6_states___root`
  pub svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_state_6_states___root: Int,
  /// Local, local: `cruise_controller.impl.usr.rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_complete_2`
  pub svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_complete_2: Bool,
  /// Local, local: `cruise_controller.impl.usr.rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_fired_2`
  pub svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_fired_2: Bool,
  /// Local, local: `cruise_controller.impl.usr.rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_state_5_outports_mode`
  pub svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_state_5_outports_mode: Int,
  /// Local, local: `cruise_controller.impl.usr.rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_state_5_states___root`
  pub svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_state_5_states___root: Int,
  /// Local, local: `cruise_controller.impl.usr.rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_state_4_outports_setDesiredSpeed`
  pub svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_state_4_outports_setDesiredSpeed: Bool,
  /// Local, local: `cruise_controller.impl.usr.rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_state_3_states___root`
  pub svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_state_3_states___root: Int,
  /// Local, local: `cruise_controller.impl.usr.rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_complete_1`
  pub svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_complete_1: Bool,
  /// Local, local: `cruise_controller.impl.usr.rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_fired_1`
  pub svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_fired_1: Bool,
  /// Local, local: `cruise_controller.impl.usr.rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_state_2_outports_mode`
  pub svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_state_2_outports_mode: Int,
  /// Local, local: `cruise_controller.impl.usr.rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_state_2_states___root`
  pub svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_state_2_states___root: Int,
  /// Local, local: `cruise_controller.impl.usr.rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_state_1_outports_setDesiredSpeed`
  pub svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_state_1_outports_setDesiredSpeed: Bool,
  /// Local, local: `cruise_controller.impl.usr.rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_state_1_states___root`
  pub svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_state_1_states___root: Int,
  /// Local, local: `cruise_controller.impl.usr.rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_fired_0`
  pub svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_fired_0: Bool,
  /// Local, local: `cruise_controller.impl.usr.rlt_exit_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_5_outports_setDesiredSpeed1`
  pub svar_rlt_exit_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_5_outports_setDesiredSpeed1: Bool,
  /// Local, local: `cruise_controller.impl.usr.rlt_exit_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_5_states___root1`
  pub svar_rlt_exit_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_5_states___root1: Int,
  /// Local, local: `cruise_controller.impl.usr.rlt_exit_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_3_states___root1`
  pub svar_rlt_exit_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_3_states___root1: Int,
  /// Local, local: `cruise_controller.impl.usr.rlt_exit_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_2_states___root1`
  pub svar_rlt_exit_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_2_states___root1: Int,
  /// Local, local: `cruise_controller.impl.usr.rlt_exit_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_1_states___root1`
  pub svar_rlt_exit_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_1_states___root1: Int,
  /// Local, local: `cruise_controller.impl.usr.rlt_exit_CruiseController_ModeLogic_mode_logic_On_Active_Maintain_rlt_state_3_outports_setDesiredSpeed4`
  pub svar_rlt_exit_CruiseController_ModeLogic_mode_logic_On_Active_Maintain_rlt_state_3_outports_setDesiredSpeed4: Bool,
  /// Local, local: `cruise_controller.impl.usr.rlt_exit_CruiseController_ModeLogic_mode_logic_On_Active_Maintain_rlt_state_3_states___root4`
  pub svar_rlt_exit_CruiseController_ModeLogic_mode_logic_On_Active_Maintain_rlt_state_3_states___root4: Int,
  /// Local, local: `cruise_controller.impl.usr.rlt_exit_CruiseController_ModeLogic_mode_logic_On_Active_Increase_rlt_state_2_states___root2`
  pub svar_rlt_exit_CruiseController_ModeLogic_mode_logic_On_Active_Increase_rlt_state_2_states___root2: Int,
  /// Local, local: `cruise_controller.impl.usr.rlt_exit_CruiseController_ModeLogic_mode_logic_On_Active_Decrease_rlt_state_2_states___root2`
  pub svar_rlt_exit_CruiseController_ModeLogic_mode_logic_On_Active_Decrease_rlt_state_2_states___root2: Int,
  /// Local, local: `cruise_controller.impl.usr.rlt_enter_CruiseController_ModeLogic_mode_logic_On_Inactive_rlt_state_3_outports_mode`
  pub svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_Inactive_rlt_state_3_outports_mode: Int,
  /// Local, local: `cruise_controller.impl.usr.rlt_enter_CruiseController_ModeLogic_mode_logic_On_Inactive_rlt_state_3_states___root`
  pub svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_Inactive_rlt_state_3_states___root: Int,
  /// Local, local: `cruise_controller.impl.usr.rlt_exit_CruiseController_ModeLogic_mode_logic_On_Inactive_rlt_state_2_states___root2`
  pub svar_rlt_exit_CruiseController_ModeLogic_mode_logic_On_Inactive_rlt_state_2_states___root2: Int,
  /// Local, local: `cruise_controller.impl.usr.rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_3_outports_mode`
  pub svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_3_outports_mode: Int,
  /// Local, local: `cruise_controller.impl.usr.rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_3_states___root`
  pub svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_3_states___root: Int,
  /// Local, local: `cruise_controller.impl.usr.rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_rltCheckEntryStateConsistency_0`
  pub svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_rltCheckEntryStateConsistency_0: Bool,
  /// Local, local: `cruise_controller.impl.usr.rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_rlt_fired_0`
  pub svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_rlt_fired_0: Bool,
  /// Local, local: `cruise_controller.impl.usr.rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_1_states___root`
  pub svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_1_states___root: Int,
  /// Local, local: `cruise_controller.impl.usr.rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_Maintain_rlt_state_3_outports_mode`
  pub svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_Maintain_rlt_state_3_outports_mode: Int,
  /// Local, local: `cruise_controller.impl.usr.rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_Maintain_rlt_state_3_states___root`
  pub svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_Maintain_rlt_state_3_states___root: Int,
  /// Local, local: `cruise_controller.impl.usr.rlt_exit_CruiseController_ModeLogic_mode_logic_On_Inactive_rlt_state_2_states___root1`
  pub svar_rlt_exit_CruiseController_ModeLogic_mode_logic_On_Inactive_rlt_state_2_states___root1: Int,
  /// Local, local: `cruise_controller.impl.usr.rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_3_outports_mode1`
  pub svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_3_outports_mode1: Int,
  /// Local, local: `cruise_controller.impl.usr.rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_3_states___root1`
  pub svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_3_states___root1: Int,
  /// Local, local: `cruise_controller.impl.usr.rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_rltCheckEntryStateConsistency_01`
  pub svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_rltCheckEntryStateConsistency_01: Bool,
  /// Local, local: `cruise_controller.impl.usr.rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_rlt_fired_01`
  pub svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_rlt_fired_01: Bool,
  /// Local, local: `cruise_controller.impl.usr.rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_1_states___root1`
  pub svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_1_states___root1: Int,
  /// Local, local: `cruise_controller.impl.usr.rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_Maintain_rlt_state_3_outports_mode1`
  pub svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_Maintain_rlt_state_3_outports_mode1: Int,
  /// Local, local: `cruise_controller.impl.usr.rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_Maintain_rlt_state_3_states___root1`
  pub svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_Maintain_rlt_state_3_states___root1: Int,
  /// Local, local: `cruise_controller.impl.usr.rlt_exit_CruiseController_ModeLogic_mode_logic_On_Init_rlt_state_2_states___root1`
  pub svar_rlt_exit_CruiseController_ModeLogic_mode_logic_On_Init_rlt_state_2_states___root1: Int,
  /// Local, local: `cruise_controller.impl.usr.rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_3_outports_mode2`
  pub svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_3_outports_mode2: Int,
  /// Local, local: `cruise_controller.impl.usr.rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_3_states___root2`
  pub svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_3_states___root2: Int,
  /// Local, local: `cruise_controller.impl.usr.rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_rltCheckEntryStateConsistency_02`
  pub svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_rltCheckEntryStateConsistency_02: Bool,
  /// Local, local: `cruise_controller.impl.usr.rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_rlt_fired_02`
  pub svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_rlt_fired_02: Bool,
  /// Local, local: `cruise_controller.impl.usr.rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_1_states___root2`
  pub svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_1_states___root2: Int,
  /// Local, local: `cruise_controller.impl.usr.rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_Maintain_rlt_state_3_outports_mode2`
  pub svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_Maintain_rlt_state_3_outports_mode2: Int,
  /// Local, local: `cruise_controller.impl.usr.rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_Maintain_rlt_state_3_states___root2`
  pub svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_Maintain_rlt_state_3_states___root2: Int,
  /// Local, local: `cruise_controller.impl.usr.rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_15_outports_setDesiredSpeed`
  pub svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_15_outports_setDesiredSpeed: Bool,
  /// Local, local: `cruise_controller.impl.usr.rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_15_outports_mode`
  pub svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_15_outports_mode: Int,
  /// Local, local: `cruise_controller.impl.usr.rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_15_states___root`
  pub svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_15_states___root: Int,
  /// Local, local: `cruise_controller.impl.usr.rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_10_states___root`
  pub svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_10_states___root: Int,
  /// Local, local: `cruise_controller.impl.usr.rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_complete_4`
  pub svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_complete_4: Bool,
  /// Local, local: `cruise_controller.impl.usr.rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_fired_4`
  pub svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_fired_4: Bool,
  /// Local, local: `cruise_controller.impl.usr.rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_9_outports_mode`
  pub svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_9_outports_mode: Int,
  /// Local, local: `cruise_controller.impl.usr.rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_9_states___root`
  pub svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_9_states___root: Int,
  /// Local, local: `cruise_controller.impl.usr.rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_8_states___root`
  pub svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_8_states___root: Int,
  /// Local, local: `cruise_controller.impl.usr.rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_complete_3`
  pub svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_complete_3: Bool,
  /// Local, local: `cruise_controller.impl.usr.rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_fired_3`
  pub svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_fired_3: Bool,
  /// Local, local: `cruise_controller.impl.usr.rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_7_outports_mode`
  pub svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_7_outports_mode: Int,
  /// Local, local: `cruise_controller.impl.usr.rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_7_states___root`
  pub svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_7_states___root: Int,
  /// Local, local: `cruise_controller.impl.usr.rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_6_outports_setDesiredSpeed`
  pub svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_6_outports_setDesiredSpeed: Bool,
  /// Local, local: `cruise_controller.impl.usr.rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_6_states___root`
  pub svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_6_states___root: Int,
  /// Local, local: `cruise_controller.impl.usr.rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_complete_2`
  pub svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_complete_2: Bool,
  /// Local, local: `cruise_controller.impl.usr.rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_fired_2`
  pub svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_fired_2: Bool,
  /// Local, local: `cruise_controller.impl.usr.rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_5_outports_mode`
  pub svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_5_outports_mode: Int,
  /// Local, local: `cruise_controller.impl.usr.rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_5_states___root`
  pub svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_5_states___root: Int,
  /// Local, local: `cruise_controller.impl.usr.rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_4_outports_setDesiredSpeed`
  pub svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_4_outports_setDesiredSpeed: Bool,
  /// Local, local: `cruise_controller.impl.usr.rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_4_states___root`
  pub svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_4_states___root: Int,
  /// Local, local: `cruise_controller.impl.usr.rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_complete_1`
  pub svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_complete_1: Bool,
  /// Local, local: `cruise_controller.impl.usr.rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_fired_1`
  pub svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_fired_1: Bool,
  /// Local, local: `cruise_controller.impl.usr.rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_3_outports_mode`
  pub svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_3_outports_mode: Int,
  /// Local, local: `cruise_controller.impl.usr.rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_3_states___root`
  pub svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_3_states___root: Int,
  /// Local, local: `cruise_controller.impl.usr.rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_2_outports_setDesiredSpeed`
  pub svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_2_outports_setDesiredSpeed: Bool,
  /// Local, local: `cruise_controller.impl.usr.rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_1_outports_setDesiredSpeed`
  pub svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_1_outports_setDesiredSpeed: Bool,
  /// Local, local: `cruise_controller.impl.usr.rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_1_states___root`
  pub svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_1_states___root: Int,
  /// Local, local: `cruise_controller.impl.usr.rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_fired_0`
  pub svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_fired_0: Bool,
  /// Local, local: `cruise_controller.impl.usr.rlt_exit_CruiseController_ModeLogic_mode_logic_On_Active_Maintain_rlt_state_3_outports_setDesiredSpeed3`
  pub svar_rlt_exit_CruiseController_ModeLogic_mode_logic_On_Active_Maintain_rlt_state_3_outports_setDesiredSpeed3: Bool,
  /// Local, local: `cruise_controller.impl.usr.rlt_exit_CruiseController_ModeLogic_mode_logic_On_Active_Maintain_rlt_state_3_states___root3`
  pub svar_rlt_exit_CruiseController_ModeLogic_mode_logic_On_Active_Maintain_rlt_state_3_states___root3: Int,
  /// Local, local: `cruise_controller.impl.usr.rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_Maintain_rlt_state_3_outports_mode3`
  pub svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_Maintain_rlt_state_3_outports_mode3: Int,
  /// Local, local: `cruise_controller.impl.usr.rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_Maintain_rlt_state_3_states___root3`
  pub svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_Maintain_rlt_state_3_states___root3: Int,
  /// Local, local: `cruise_controller.impl.usr.rlt_exit_CruiseController_ModeLogic_mode_logic_On_Active_Maintain_rlt_state_3_outports_setDesiredSpeed1`
  pub svar_rlt_exit_CruiseController_ModeLogic_mode_logic_On_Active_Maintain_rlt_state_3_outports_setDesiredSpeed1: Bool,
  /// Local, local: `cruise_controller.impl.usr.rlt_exit_CruiseController_ModeLogic_mode_logic_On_Active_Maintain_rlt_state_3_states___root1`
  pub svar_rlt_exit_CruiseController_ModeLogic_mode_logic_On_Active_Maintain_rlt_state_3_states___root1: Int,
  /// Local, local: `cruise_controller.impl.usr.rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_Increase_rlt_state_3_outports_mode`
  pub svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_Increase_rlt_state_3_outports_mode: Int,
  /// Local, local: `cruise_controller.impl.usr.rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_Increase_rlt_state_3_states___root`
  pub svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_Increase_rlt_state_3_states___root: Int,
  /// Local, local: `cruise_controller.impl.usr.rlt_exit_CruiseController_ModeLogic_mode_logic_On_Active_Maintain_rlt_state_3_outports_setDesiredSpeed2`
  pub svar_rlt_exit_CruiseController_ModeLogic_mode_logic_On_Active_Maintain_rlt_state_3_outports_setDesiredSpeed2: Bool,
  /// Local, local: `cruise_controller.impl.usr.rlt_exit_CruiseController_ModeLogic_mode_logic_On_Active_Maintain_rlt_state_3_states___root2`
  pub svar_rlt_exit_CruiseController_ModeLogic_mode_logic_On_Active_Maintain_rlt_state_3_states___root2: Int,
  /// Local, local: `cruise_controller.impl.usr.rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_Decrease_rlt_state_3_outports_mode`
  pub svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_Decrease_rlt_state_3_outports_mode: Int,
  /// Local, local: `cruise_controller.impl.usr.rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_Decrease_rlt_state_3_states___root`
  pub svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_Decrease_rlt_state_3_states___root: Int,
  /// Local, local: `cruise_controller.impl.usr.rlt_exit_CruiseController_ModeLogic_mode_logic_On_Active_Decrease_rlt_state_2_states___root1`
  pub svar_rlt_exit_CruiseController_ModeLogic_mode_logic_On_Active_Decrease_rlt_state_2_states___root1: Int,
  /// Local, local: `cruise_controller.impl.usr.rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_Maintain_rlt_state_3_outports_mode11`
  pub svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_Maintain_rlt_state_3_outports_mode11: Int,
  /// Local, local: `cruise_controller.impl.usr.rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_Maintain_rlt_state_3_states___root11`
  pub svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_Maintain_rlt_state_3_states___root11: Int,
  /// Local, local: `cruise_controller.impl.usr.rlt_exit_CruiseController_ModeLogic_mode_logic_On_Active_Increase_rlt_state_2_states___root1`
  pub svar_rlt_exit_CruiseController_ModeLogic_mode_logic_On_Active_Increase_rlt_state_2_states___root1: Int,
  /// Local, local: `cruise_controller.impl.usr.rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_Maintain_rlt_state_3_outports_mode21`
  pub svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_Maintain_rlt_state_3_outports_mode21: Int,
  /// Local, local: `cruise_controller.impl.usr.rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_Maintain_rlt_state_3_states___root21`
  pub svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_Maintain_rlt_state_3_states___root21: Int,
  /// Local, local: `cruise_controller.impl.usr.newDesiredSpeed`
  pub svar_newDesiredSpeed: Real,
  /// Local, local: `cruise_controller.impl.usr.rlt_condact_cruise_controller_CruiseController_SetDesiredSpeed_computeDecreaseInDesiredSpeed_rlt_init_step`
  pub svar_rlt_condact_cruise_controller_CruiseController_SetDesiredSpeed_computeDecreaseInDesiredSpeed_rlt_init_step: Bool,
  /// Local, local: `cruise_controller.impl.usr.rlt_condact_cruise_controller_CruiseController_SetDesiredSpeed_computeDecreaseInDesiredSpeed_rlt_clock`
  pub svar_rlt_condact_cruise_controller_CruiseController_SetDesiredSpeed_computeDecreaseInDesiredSpeed_rlt_clock: Bool,
  /// Local, local: `cruise_controller.impl.usr.newDesiredSpeed1`
  pub svar_newDesiredSpeed1: Real,
  /// Local, local: `cruise_controller.impl.usr.rlt_condact_cruise_controller_CruiseController_SetDesiredSpeed_computeIncreaseInDesiredSpeed_rlt_init_step`
  pub svar_rlt_condact_cruise_controller_CruiseController_SetDesiredSpeed_computeIncreaseInDesiredSpeed_rlt_init_step: Bool,
  /// Local, local: `cruise_controller.impl.usr.rlt_condact_cruise_controller_CruiseController_SetDesiredSpeed_computeIncreaseInDesiredSpeed_rlt_clock`
  pub svar_rlt_condact_cruise_controller_CruiseController_SetDesiredSpeed_computeIncreaseInDesiredSpeed_rlt_clock: Bool,

}

impl System for Cruise_controller {
  type Input = (
    Bool, // svar_onOff (cruise_controller.usr.onOff)
    Bool, // svar_decelSet (cruise_controller.usr.decelSet)
    Bool, // svar_accelResume (cruise_controller.usr.accelResume)
    Bool, // svar_cancel (cruise_controller.usr.cancel)
    Bool, // svar_brakePedal (cruise_controller.usr.brakePedal)
    Int, // svar_carGear (cruise_controller.usr.carGear)
    Real, // svar_carSpeed (cruise_controller.usr.carSpeed)
    Bool, // svar_validInputs (cruise_controller.usr.validInputs)
  ) ;
  type Output = (
    Int, // svar_mode (cruise_controller.usr.mode)
    Real, // svar_cruiseThrottle (cruise_controller.usr.cruiseThrottle)
    Real, // svar_desiredSpeed (cruise_controller.usr.desiredSpeed)
    Bool, // svar_VRP1 (cruise_controller.usr.VRP1)
    Bool, // svar_VRP2 (cruise_controller.usr.VRP2)
    Bool, // svar_CP8a (cruise_controller.usr.CP8a)
    Bool, // svar_VRP3 (cruise_controller.usr.VRP3)
    Bool, // svar_VRP4 (cruise_controller.usr.VRP4)
    Bool, // svar_SP4 (cruise_controller.usr.SP4)
    Bool, // svar_SP5 (cruise_controller.usr.SP5)
    Bool, // svar_SP6 (cruise_controller.usr.SP6)
    Bool, // svar_SP7 (cruise_controller.usr.SP7)
    Bool, // svar_SP3b (cruise_controller.usr.SP3b)
    Bool, // svar_SP3c (cruise_controller.usr.SP3c)
    Bool, // svar_SP3 (cruise_controller.usr.SP3)
    Bool, // svar_SP3a (cruise_controller.usr.SP3a)
    Bool, // svar_SP2 (cruise_controller.usr.SP2)
    Bool, // svar_SP1 (cruise_controller.usr.SP1)
    Bool, // svar_SP8 (cruise_controller.usr.SP8)
    Bool, // svar_SP9 (cruise_controller.usr.SP9)
    Bool, // svar_SP10 (cruise_controller.usr.SP10)
    Bool, // svar_SP11 (cruise_controller.usr.SP11)
  ) ;
  fn arity() -> usize { 8 }
  fn init(input: Self::Input) -> Result<Self, ()> {
    // |===| Retrieving inputs.
    let svar_onOff = input.0 ;
    let svar_decelSet = input.1 ;
    let svar_accelResume = input.2 ;
    let svar_cancel = input.3 ;
    let svar_brakePedal = input.4 ;
    let svar_carGear = input.5 ;
    let svar_carSpeed = input.6 ;
    let svar_validInputs = input.7 ;
    
    // |===| Computing initial state.
    let svar_cruise_controller_CruiseController_SP8_pre_MAINTAIN_pre_MNT = false ;
    let svar_cruise_controller_CruiseController_ModeLogic_safetyCondition_Relational_Operator1 = (svar_carSpeed >= 15f32) ;
    let svar_cruise_controller_CruiseController_SP8_pre_realval_pre_x_ = 0f32 ;
    let svar_cruise_controller_CruiseController_SetThrottle_cruiseThrottlePrev = 0f32 ;
    let svar_cruise_controller_CruiseController_SP10_pre_INCREASE_pre_INC = false ;
    let svar_cruise_controller_CruiseController_SP9_pre_DECREASE_pre_DEC = false ;
    let svar_cruise_controller_CruiseController_SetDesiredSpeed_prev_desiredSpeed = 0f32 ;
    let svar_cruise_controller_CruiseController_SP5_pre_realval_pre_x_ = 0f32 ;
    let svar_rlt_condact_cruise_controller_CruiseController_SetDesiredSpeed_computeDecreaseInDesiredSpeed_rlt_init_step = true ;
    let svar_rlt_condact_cruise_controller_CruiseController_SetDesiredSpeed_computeIncreaseInDesiredSpeed_rlt_init_step = true ;
    let svar_chart_CruiseController_ModeLogic_mode_logic_rlt_evtInitStep = true ;
    let svar_cruise_controller_CruiseController_ModeLogic_setEvent_InBool = svar_decelSet ;
    let svar_cruise_controller_CruiseController_ModeLogic_resumeEvent_Unit_Delay = true ;
    let svar_cruise_controller_CruiseController_ModeLogic_setEvent_Unit_Delay = true ;
    let svar_cruise_controller_CruiseController_ModeLogic_resumeEvent_InBool = svar_accelResume ;
    let svar_chart_CruiseController_ModeLogic_mode_logic_begin_state_outports_setDesiredSpeed = false ;
    let svar_cruise_controller_CruiseController_ModeLogic_safetyCondition_Relational_Operator = (svar_carGear == 3) ;
    let svar_SP3c = true ;
    let svar_chart_CruiseController_ModeLogic_mode_logic_rlt_state_1_current_event = ( if svar_SP3c { 1 } else {0 } ) ;
    let svar_chart_CruiseController_ModeLogic_mode_logic_begin_state_outports_mode = 0 ;
    let svar_chart_CruiseController_ModeLogic_mode_logic_begin_state_states___root = 0 ;
    let svar_cruise_controller_CruiseController_ModeLogic_DelayOnsetDecel_Bounded_Count_Unit_Delay = 0 ;
    let svar_cruise_controller_CruiseController_ModeLogic_DelayOnsetAccel_Bounded_Count_Unit_Delay = 0 ;
    let svar_rlt_exit_CruiseController_ModeLogic_mode_logic_On_Active_Maintain_rlt_state_3_states___root = ( if (svar_chart_CruiseController_ModeLogic_mode_logic_begin_state_states___root == 4) { 3 } else {svar_chart_CruiseController_ModeLogic_mode_logic_begin_state_states___root } ) ;
    let svar_cruise_controller_CruiseController_ModeLogic_DelayOnsetDecel_Bounded_Count_Add = (svar_cruise_controller_CruiseController_ModeLogic_DelayOnsetDecel_Bounded_Count_Unit_Delay + 1) ;
    let svar_rlt_eval_CruiseController_ModeLogic_mode_logic_rlt_fired_0 = (((svar_chart_CruiseController_ModeLogic_mode_logic_begin_state_states___root >= 2) & (svar_chart_CruiseController_ModeLogic_mode_logic_begin_state_states___root <= 8)) & (! svar_onOff)) ;
    let svar_rlt_enter_CruiseController_ModeLogic_mode_logic_rlt_state_2_outports_mode = ( if (! (svar_chart_CruiseController_ModeLogic_mode_logic_begin_state_states___root == 1)) { 1 } else {svar_chart_CruiseController_ModeLogic_mode_logic_begin_state_outports_mode } ) ;
    let svar_cruise_controller_CruiseController_ModeLogic_setEvent_Out = ((! svar_cruise_controller_CruiseController_ModeLogic_setEvent_Unit_Delay) & svar_cruise_controller_CruiseController_ModeLogic_setEvent_InBool) ;
    let svar_cruise_controller_CruiseController_ModeLogic_resumeEvent_Out = ((! svar_cruise_controller_CruiseController_ModeLogic_resumeEvent_Unit_Delay) & svar_cruise_controller_CruiseController_ModeLogic_resumeEvent_InBool) ;
    let svar_cruise_controller_CruiseController_ModeLogic_safetyCondition1 = (((((! svar_cancel) & (! svar_brakePedal)) & svar_cruise_controller_CruiseController_ModeLogic_safetyCondition_Relational_Operator) & svar_cruise_controller_CruiseController_ModeLogic_safetyCondition_Relational_Operator1) & svar_validInputs) ;
    let svar_rlt_enter_CruiseController_ModeLogic_mode_logic_rlt_state_2_states___root = ( if (! (svar_chart_CruiseController_ModeLogic_mode_logic_begin_state_states___root == 1)) { 1 } else {svar_chart_CruiseController_ModeLogic_mode_logic_begin_state_states___root } ) ;
    let svar_cruise_controller_CruiseController_ModeLogic_DelayOnsetAccel_Bounded_Count_Add = (svar_cruise_controller_CruiseController_ModeLogic_DelayOnsetAccel_Bounded_Count_Unit_Delay + 1) ;
    let svar_rlt_exit_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_1_states___root = ( if ((svar_chart_CruiseController_ModeLogic_mode_logic_begin_state_states___root >= 3) & (svar_chart_CruiseController_ModeLogic_mode_logic_begin_state_states___root <= 6)) { svar_rlt_exit_CruiseController_ModeLogic_mode_logic_On_Active_Maintain_rlt_state_3_states___root } else {svar_chart_CruiseController_ModeLogic_mode_logic_begin_state_states___root } ) ;
    let svar_rlt_enter_CruiseController_ModeLogic_mode_logic_rltCheckEntryStateConsistency_0 = ((svar_rlt_enter_CruiseController_ModeLogic_mode_logic_rlt_state_2_states___root == 1) | ((svar_rlt_enter_CruiseController_ModeLogic_mode_logic_rlt_state_2_states___root >= 2) & (svar_rlt_enter_CruiseController_ModeLogic_mode_logic_rlt_state_2_states___root <= 8))) ;
    let svar_rlt_exit_CruiseController_ModeLogic_mode_logic_On_Active_Maintain_rlt_state_3_outports_setDesiredSpeed = ( if (svar_chart_CruiseController_ModeLogic_mode_logic_begin_state_states___root == 4) { false } else {svar_chart_CruiseController_ModeLogic_mode_logic_begin_state_outports_setDesiredSpeed } ) ;
    let svar_subrange_1 = ((0 <= svar_chart_CruiseController_ModeLogic_mode_logic_rlt_state_1_current_event) & (svar_chart_CruiseController_ModeLogic_mode_logic_rlt_state_1_current_event <= 1)) ;
    let svar_rlt_exit_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_5_outports_setDesiredSpeed = ( if ((svar_chart_CruiseController_ModeLogic_mode_logic_begin_state_states___root >= 3) & (svar_chart_CruiseController_ModeLogic_mode_logic_begin_state_states___root <= 6)) { svar_rlt_exit_CruiseController_ModeLogic_mode_logic_On_Active_Maintain_rlt_state_3_outports_setDesiredSpeed } else {svar_chart_CruiseController_ModeLogic_mode_logic_begin_state_outports_setDesiredSpeed } ) ;
    let svar_rlt_exit_CruiseController_ModeLogic_mode_logic_On_Active_Increase_rlt_state_2_states___root = ( if (svar_rlt_exit_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_1_states___root == 5) { 3 } else {svar_rlt_exit_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_1_states___root } ) ;
    let svar_rlt_exit_CruiseController_ModeLogic_mode_logic_On_rlt_state_5_outports_setDesiredSpeed = ( if ((svar_chart_CruiseController_ModeLogic_mode_logic_begin_state_states___root >= 2) & (svar_chart_CruiseController_ModeLogic_mode_logic_begin_state_states___root <= 8)) { svar_rlt_exit_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_5_outports_setDesiredSpeed } else {svar_chart_CruiseController_ModeLogic_mode_logic_begin_state_outports_setDesiredSpeed } ) ;
    let svar_cruise_controller_CruiseController_ModeLogic_DelayOnsetDecel_Bounded_Count_Switch = ( if svar_decelSet { svar_cruise_controller_CruiseController_ModeLogic_DelayOnsetDecel_Bounded_Count_Add } else {0 } ) ;
    let svar_cruise_controller_CruiseController_ModeLogic_DelayOnsetDecel_Bounded_Count_Limit_Enforce_lower_limit = ( if (0 >= svar_cruise_controller_CruiseController_ModeLogic_DelayOnsetDecel_Bounded_Count_Switch) { 0 } else {svar_cruise_controller_CruiseController_ModeLogic_DelayOnsetDecel_Bounded_Count_Switch } ) ;
    let svar_cruise_controller_CruiseController_ModeLogic_DelayOnsetAccel_Bounded_Count_Switch = ( if svar_accelResume { svar_cruise_controller_CruiseController_ModeLogic_DelayOnsetAccel_Bounded_Count_Add } else {0 } ) ;
    let svar_cruise_controller_CruiseController_ModeLogic_DelayOnsetAccel_Bounded_Count_Limit_Enforce_lower_limit = ( if (0 >= svar_cruise_controller_CruiseController_ModeLogic_DelayOnsetAccel_Bounded_Count_Switch) { 0 } else {svar_cruise_controller_CruiseController_ModeLogic_DelayOnsetAccel_Bounded_Count_Switch } ) ;
    let svar_rlt_eval_CruiseController_ModeLogic_mode_logic_rlt_state_1_outports_setDesiredSpeed = ( if svar_rlt_eval_CruiseController_ModeLogic_mode_logic_rlt_fired_0 { svar_rlt_exit_CruiseController_ModeLogic_mode_logic_On_rlt_state_5_outports_setDesiredSpeed } else {svar_chart_CruiseController_ModeLogic_mode_logic_begin_state_outports_setDesiredSpeed } ) ;
    let svar_cruise_controller_CruiseController_ModeLogic_DelayOnsetAccel_Bounded_Count_Out = ( if (svar_cruise_controller_CruiseController_ModeLogic_DelayOnsetAccel_Bounded_Count_Limit_Enforce_lower_limit <= 20) { svar_cruise_controller_CruiseController_ModeLogic_DelayOnsetAccel_Bounded_Count_Limit_Enforce_lower_limit } else {20 } ) ;
    let svar_cruise_controller_CruiseController_ModeLogic_DelayOnsetDecel_Bounded_Count_Out = ( if (svar_cruise_controller_CruiseController_ModeLogic_DelayOnsetDecel_Bounded_Count_Limit_Enforce_lower_limit <= 20) { svar_cruise_controller_CruiseController_ModeLogic_DelayOnsetDecel_Bounded_Count_Limit_Enforce_lower_limit } else {20 } ) ;
    let svar_rlt_exit_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_2_states___root = ( if ((svar_chart_CruiseController_ModeLogic_mode_logic_begin_state_states___root >= 3) & (svar_chart_CruiseController_ModeLogic_mode_logic_begin_state_states___root <= 6)) { svar_rlt_exit_CruiseController_ModeLogic_mode_logic_On_Active_Increase_rlt_state_2_states___root } else {svar_rlt_exit_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_1_states___root } ) ;
    let svar_rlt_exit_CruiseController_ModeLogic_mode_logic_On_Active_Decrease_rlt_state_2_states___root = ( if (svar_rlt_exit_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_2_states___root == 6) { 3 } else {svar_rlt_exit_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_2_states___root } ) ;
    let svar_cruise_controller_CruiseController_ModeLogic_DelayOnsetDecel_Out = (svar_cruise_controller_CruiseController_ModeLogic_DelayOnsetDecel_Bounded_Count_Out == 20) ;
    let svar_rlt_exit_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_3_states___root = ( if ((svar_chart_CruiseController_ModeLogic_mode_logic_begin_state_states___root >= 3) & (svar_chart_CruiseController_ModeLogic_mode_logic_begin_state_states___root <= 6)) { svar_rlt_exit_CruiseController_ModeLogic_mode_logic_On_Active_Decrease_rlt_state_2_states___root } else {svar_rlt_exit_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_2_states___root } ) ;
    let svar_cruise_controller_CruiseController_ModeLogic_DelayOnsetAccel_Out = (svar_cruise_controller_CruiseController_ModeLogic_DelayOnsetAccel_Bounded_Count_Out == 20) ;
    let svar_rlt_exit_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_5_states___root = ( if ((svar_chart_CruiseController_ModeLogic_mode_logic_begin_state_states___root >= 3) & (svar_chart_CruiseController_ModeLogic_mode_logic_begin_state_states___root <= 6)) { 2 } else {svar_rlt_exit_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_3_states___root } ) ;
    let svar_rlt_exit_CruiseController_ModeLogic_mode_logic_On_rlt_state_1_states___root = ( if ((svar_chart_CruiseController_ModeLogic_mode_logic_begin_state_states___root >= 2) & (svar_chart_CruiseController_ModeLogic_mode_logic_begin_state_states___root <= 8)) { svar_rlt_exit_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_5_states___root } else {svar_chart_CruiseController_ModeLogic_mode_logic_begin_state_states___root } ) ;
    let svar_rlt_exit_CruiseController_ModeLogic_mode_logic_On_Init_rlt_state_2_states___root = ( if (svar_rlt_exit_CruiseController_ModeLogic_mode_logic_On_rlt_state_1_states___root == 7) { 2 } else {svar_rlt_exit_CruiseController_ModeLogic_mode_logic_On_rlt_state_1_states___root } ) ;
    let svar_rlt_exit_CruiseController_ModeLogic_mode_logic_On_rlt_state_2_states___root = ( if ((svar_chart_CruiseController_ModeLogic_mode_logic_begin_state_states___root >= 2) & (svar_chart_CruiseController_ModeLogic_mode_logic_begin_state_states___root <= 8)) { svar_rlt_exit_CruiseController_ModeLogic_mode_logic_On_Init_rlt_state_2_states___root } else {svar_rlt_exit_CruiseController_ModeLogic_mode_logic_On_rlt_state_1_states___root } ) ;
    let svar_rlt_exit_CruiseController_ModeLogic_mode_logic_On_Inactive_rlt_state_2_states___root = ( if (svar_rlt_exit_CruiseController_ModeLogic_mode_logic_On_rlt_state_2_states___root == 8) { 2 } else {svar_rlt_exit_CruiseController_ModeLogic_mode_logic_On_rlt_state_2_states___root } ) ;
    let svar_rlt_exit_CruiseController_ModeLogic_mode_logic_On_rlt_state_3_states___root = ( if ((svar_chart_CruiseController_ModeLogic_mode_logic_begin_state_states___root >= 2) & (svar_chart_CruiseController_ModeLogic_mode_logic_begin_state_states___root <= 8)) { svar_rlt_exit_CruiseController_ModeLogic_mode_logic_On_Inactive_rlt_state_2_states___root } else {svar_rlt_exit_CruiseController_ModeLogic_mode_logic_On_rlt_state_2_states___root } ) ;
    let svar_rlt_exit_CruiseController_ModeLogic_mode_logic_On_rlt_state_5_states___root = ( if ((svar_chart_CruiseController_ModeLogic_mode_logic_begin_state_states___root >= 2) & (svar_chart_CruiseController_ModeLogic_mode_logic_begin_state_states___root <= 8)) { 0 } else {svar_rlt_exit_CruiseController_ModeLogic_mode_logic_On_rlt_state_3_states___root } ) ;
    let svar_rlt_eval_CruiseController_ModeLogic_mode_logic_rlt_state_1_states___root = ( if svar_rlt_eval_CruiseController_ModeLogic_mode_logic_rlt_fired_0 { svar_rlt_exit_CruiseController_ModeLogic_mode_logic_On_rlt_state_5_states___root } else {svar_chart_CruiseController_ModeLogic_mode_logic_begin_state_states___root } ) ;
    let svar_rlt_enter_CruiseController_ModeLogic_mode_logic_Off_rlt_state_3_outports_mode = ( if (! (svar_rlt_eval_CruiseController_ModeLogic_mode_logic_rlt_state_1_states___root == 1)) { 1 } else {svar_chart_CruiseController_ModeLogic_mode_logic_begin_state_outports_mode } ) ;
    let svar_rlt_eval_CruiseController_ModeLogic_mode_logic_rlt_state_2_outports_mode = ( if svar_rlt_eval_CruiseController_ModeLogic_mode_logic_rlt_fired_0 { svar_rlt_enter_CruiseController_ModeLogic_mode_logic_Off_rlt_state_3_outports_mode } else {svar_chart_CruiseController_ModeLogic_mode_logic_begin_state_outports_mode } ) ;
    let svar_rlt_enter_CruiseController_ModeLogic_mode_logic_Off_rlt_state_3_states___root = ( if (! (svar_rlt_eval_CruiseController_ModeLogic_mode_logic_rlt_state_1_states___root == 1)) { 1 } else {svar_rlt_eval_CruiseController_ModeLogic_mode_logic_rlt_state_1_states___root } ) ;
    let svar_rlt_eval_CruiseController_ModeLogic_mode_logic_rlt_state_2_states___root = ( if svar_rlt_eval_CruiseController_ModeLogic_mode_logic_rlt_fired_0 { svar_rlt_enter_CruiseController_ModeLogic_mode_logic_Off_rlt_state_3_states___root } else {svar_rlt_eval_CruiseController_ModeLogic_mode_logic_rlt_state_1_states___root } ) ;
    let svar_rlt_eval_CruiseController_ModeLogic_mode_logic_rlt_fired_1 = ((svar_rlt_eval_CruiseController_ModeLogic_mode_logic_rlt_state_2_states___root == 1) & (svar_onOff & (! svar_rlt_eval_CruiseController_ModeLogic_mode_logic_rlt_fired_0))) ;
    let svar_rlt_eval_CruiseController_ModeLogic_mode_logic_rlt_complete_1 = (svar_rlt_eval_CruiseController_ModeLogic_mode_logic_rlt_fired_1 | svar_rlt_eval_CruiseController_ModeLogic_mode_logic_rlt_fired_0) ;
    let svar_rlt_exit_CruiseController_ModeLogic_mode_logic_Off_rlt_state_2_states___root = ( if (svar_rlt_eval_CruiseController_ModeLogic_mode_logic_rlt_state_2_states___root == 1) { 0 } else {svar_rlt_eval_CruiseController_ModeLogic_mode_logic_rlt_state_2_states___root } ) ;
    let svar_rlt_eval_CruiseController_ModeLogic_mode_logic_rlt_state_3_states___root = ( if svar_rlt_eval_CruiseController_ModeLogic_mode_logic_rlt_fired_1 { svar_rlt_exit_CruiseController_ModeLogic_mode_logic_Off_rlt_state_2_states___root } else {svar_rlt_eval_CruiseController_ModeLogic_mode_logic_rlt_state_2_states___root } ) ;
    let svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_rlt_state_1_states___root = ( if (! ((svar_rlt_eval_CruiseController_ModeLogic_mode_logic_rlt_state_3_states___root >= 2) & (svar_rlt_eval_CruiseController_ModeLogic_mode_logic_rlt_state_3_states___root <= 8))) { 2 } else {svar_rlt_eval_CruiseController_ModeLogic_mode_logic_rlt_state_3_states___root } ) ;
    let svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_rlt_fired_0 = ((! ((svar_rlt_eval_CruiseController_ModeLogic_mode_logic_rlt_state_3_states___root >= 2) & (svar_rlt_eval_CruiseController_ModeLogic_mode_logic_rlt_state_3_states___root <= 8))) & ((svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_rlt_state_1_states___root >= 2) & (svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_rlt_state_1_states___root <= 8))) ;
    let svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_Init_rlt_state_3_states___root = ( if (! (svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_rlt_state_1_states___root == 7)) { 7 } else {svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_rlt_state_1_states___root } ) ;
    let svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_Init_rlt_state_3_outports_mode = ( if (! (svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_rlt_state_1_states___root == 7)) { 2 } else {svar_rlt_eval_CruiseController_ModeLogic_mode_logic_rlt_state_2_outports_mode } ) ;
    let svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_rlt_state_3_states___root = ( if svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_rlt_fired_0 { svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_Init_rlt_state_3_states___root } else {svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_rlt_state_1_states___root } ) ;
    let svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_rlt_state_3_outports_mode = ( if svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_rlt_fired_0 { svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_Init_rlt_state_3_outports_mode } else {svar_rlt_eval_CruiseController_ModeLogic_mode_logic_rlt_state_2_outports_mode } ) ;
    let svar_rlt_eval_CruiseController_ModeLogic_mode_logic_rlt_state_4_outports_mode = ( if svar_rlt_eval_CruiseController_ModeLogic_mode_logic_rlt_fired_1 { svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_rlt_state_3_outports_mode } else {svar_rlt_eval_CruiseController_ModeLogic_mode_logic_rlt_state_2_outports_mode } ) ;
    let svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_rltCheckEntryStateConsistency_0 = (((svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_rlt_state_3_states___root >= 3) & (svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_rlt_state_3_states___root <= 6)) | ((svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_rlt_state_3_states___root == 7) | (svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_rlt_state_3_states___root == 8))) ;
    let svar_rlt_eval_CruiseController_ModeLogic_mode_logic_rlt_state_4_states___root = ( if svar_rlt_eval_CruiseController_ModeLogic_mode_logic_rlt_fired_1 { svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_rlt_state_3_states___root } else {svar_rlt_eval_CruiseController_ModeLogic_mode_logic_rlt_state_3_states___root } ) ;
    let svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_fired_0 = (((svar_rlt_eval_CruiseController_ModeLogic_mode_logic_rlt_state_4_states___root >= 3) & (svar_rlt_eval_CruiseController_ModeLogic_mode_logic_rlt_state_4_states___root <= 6)) & (! svar_cruise_controller_CruiseController_ModeLogic_safetyCondition1)) ;
    let svar_rlt_exit_CruiseController_ModeLogic_mode_logic_On_Active_Maintain_rlt_state_3_outports_setDesiredSpeed4 = ( if (svar_rlt_eval_CruiseController_ModeLogic_mode_logic_rlt_state_4_states___root == 4) { false } else {svar_rlt_eval_CruiseController_ModeLogic_mode_logic_rlt_state_1_outports_setDesiredSpeed } ) ;
    let svar_rlt_exit_CruiseController_ModeLogic_mode_logic_On_Active_Maintain_rlt_state_3_states___root4 = ( if (svar_rlt_eval_CruiseController_ModeLogic_mode_logic_rlt_state_4_states___root == 4) { 3 } else {svar_rlt_eval_CruiseController_ModeLogic_mode_logic_rlt_state_4_states___root } ) ;
    let svar_rlt_exit_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_1_states___root1 = ( if ((svar_rlt_eval_CruiseController_ModeLogic_mode_logic_rlt_state_4_states___root >= 3) & (svar_rlt_eval_CruiseController_ModeLogic_mode_logic_rlt_state_4_states___root <= 6)) { svar_rlt_exit_CruiseController_ModeLogic_mode_logic_On_Active_Maintain_rlt_state_3_states___root4 } else {svar_rlt_eval_CruiseController_ModeLogic_mode_logic_rlt_state_4_states___root } ) ;
    let svar_rlt_exit_CruiseController_ModeLogic_mode_logic_On_Active_Increase_rlt_state_2_states___root2 = ( if (svar_rlt_exit_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_1_states___root1 == 5) { 3 } else {svar_rlt_exit_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_1_states___root1 } ) ;
    let svar_rlt_exit_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_5_outports_setDesiredSpeed1 = ( if ((svar_rlt_eval_CruiseController_ModeLogic_mode_logic_rlt_state_4_states___root >= 3) & (svar_rlt_eval_CruiseController_ModeLogic_mode_logic_rlt_state_4_states___root <= 6)) { svar_rlt_exit_CruiseController_ModeLogic_mode_logic_On_Active_Maintain_rlt_state_3_outports_setDesiredSpeed4 } else {svar_rlt_eval_CruiseController_ModeLogic_mode_logic_rlt_state_1_outports_setDesiredSpeed } ) ;
    let svar_rlt_exit_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_2_states___root1 = ( if ((svar_rlt_eval_CruiseController_ModeLogic_mode_logic_rlt_state_4_states___root >= 3) & (svar_rlt_eval_CruiseController_ModeLogic_mode_logic_rlt_state_4_states___root <= 6)) { svar_rlt_exit_CruiseController_ModeLogic_mode_logic_On_Active_Increase_rlt_state_2_states___root2 } else {svar_rlt_exit_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_1_states___root1 } ) ;
    let svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_state_1_outports_setDesiredSpeed = ( if svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_fired_0 { svar_rlt_exit_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_5_outports_setDesiredSpeed1 } else {svar_rlt_eval_CruiseController_ModeLogic_mode_logic_rlt_state_1_outports_setDesiredSpeed } ) ;
    let svar_rlt_exit_CruiseController_ModeLogic_mode_logic_On_Active_Decrease_rlt_state_2_states___root2 = ( if (svar_rlt_exit_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_2_states___root1 == 6) { 3 } else {svar_rlt_exit_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_2_states___root1 } ) ;
    let svar_rlt_exit_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_3_states___root1 = ( if ((svar_rlt_eval_CruiseController_ModeLogic_mode_logic_rlt_state_4_states___root >= 3) & (svar_rlt_eval_CruiseController_ModeLogic_mode_logic_rlt_state_4_states___root <= 6)) { svar_rlt_exit_CruiseController_ModeLogic_mode_logic_On_Active_Decrease_rlt_state_2_states___root2 } else {svar_rlt_exit_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_2_states___root1 } ) ;
    let svar_rlt_exit_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_5_states___root1 = ( if ((svar_rlt_eval_CruiseController_ModeLogic_mode_logic_rlt_state_4_states___root >= 3) & (svar_rlt_eval_CruiseController_ModeLogic_mode_logic_rlt_state_4_states___root <= 6)) { 2 } else {svar_rlt_exit_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_3_states___root1 } ) ;
    let svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_state_1_states___root = ( if svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_fired_0 { svar_rlt_exit_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_5_states___root1 } else {svar_rlt_eval_CruiseController_ModeLogic_mode_logic_rlt_state_4_states___root } ) ;
    let svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_Inactive_rlt_state_3_states___root = ( if (! (svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_state_1_states___root == 8)) { 8 } else {svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_state_1_states___root } ) ;
    let svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_state_2_states___root = ( if svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_fired_0 { svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_Inactive_rlt_state_3_states___root } else {svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_state_1_states___root } ) ;
    let svar_rlt_exit_CruiseController_ModeLogic_mode_logic_On_Inactive_rlt_state_2_states___root2 = ( if (svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_state_2_states___root == 8) { 2 } else {svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_state_2_states___root } ) ;
    let svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_Inactive_rlt_state_3_outports_mode = ( if (! (svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_state_1_states___root == 8)) { 3 } else {svar_rlt_eval_CruiseController_ModeLogic_mode_logic_rlt_state_4_outports_mode } ) ;
    let svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_fired_1 = ((svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_state_2_states___root == 8) & (((! (( if (! svar_cruise_controller_CruiseController_ModeLogic_setEvent_Out) { 0 } else {1 } ) == 0)) & (! (( if (! svar_cruise_controller_CruiseController_ModeLogic_safetyCondition1) { 0 } else {1 } ) == 0))) & (! svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_fired_0))) ;
    let svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_complete_1 = (svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_fired_1 | svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_fired_0) ;
    let svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_state_4_outports_setDesiredSpeed = ( if svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_fired_1 { true } else {svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_state_1_outports_setDesiredSpeed } ) ;
    let svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_state_3_states___root = ( if svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_fired_1 { svar_rlt_exit_CruiseController_ModeLogic_mode_logic_On_Inactive_rlt_state_2_states___root2 } else {svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_state_2_states___root } ) ;
    let svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_state_2_outports_mode = ( if svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_fired_0 { svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_Inactive_rlt_state_3_outports_mode } else {svar_rlt_eval_CruiseController_ModeLogic_mode_logic_rlt_state_4_outports_mode } ) ;
    let svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_1_states___root = ( if (! ((svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_state_3_states___root >= 3) & (svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_state_3_states___root <= 6))) { 3 } else {svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_state_3_states___root } ) ;
    let svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_rlt_fired_0 = ((! ((svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_state_3_states___root >= 3) & (svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_state_3_states___root <= 6))) & ((svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_1_states___root >= 3) & (svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_1_states___root <= 6))) ;
    let svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_Maintain_rlt_state_3_outports_mode = ( if (! (svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_1_states___root == 4)) { 4 } else {svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_state_2_outports_mode } ) ;
    let svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_Maintain_rlt_state_3_states___root = ( if (! (svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_1_states___root == 4)) { 4 } else {svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_1_states___root } ) ;
    let svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_3_states___root = ( if svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_rlt_fired_0 { svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_Maintain_rlt_state_3_states___root } else {svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_1_states___root } ) ;
    let svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_state_5_states___root = ( if svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_fired_1 { svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_3_states___root } else {svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_state_3_states___root } ) ;
    let svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_3_outports_mode = ( if svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_rlt_fired_0 { svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_Maintain_rlt_state_3_outports_mode } else {svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_state_2_outports_mode } ) ;
    let svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_rltCheckEntryStateConsistency_0 = ((svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_3_states___root == 4) | ((svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_3_states___root == 5) | (svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_3_states___root == 6))) ;
    let svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_fired_2 = ((svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_state_5_states___root == 8) & (((! (( if (! svar_cruise_controller_CruiseController_ModeLogic_resumeEvent_Out) { 0 } else {1 } ) == 0)) & (! (( if (! svar_cruise_controller_CruiseController_ModeLogic_safetyCondition1) { 0 } else {1 } ) == 0))) & (! svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_complete_1))) ;
    let svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_complete_2 = (svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_fired_2 | svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_complete_1) ;
    let svar_rlt_exit_CruiseController_ModeLogic_mode_logic_On_Inactive_rlt_state_2_states___root1 = ( if (svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_state_5_states___root == 8) { 2 } else {svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_state_5_states___root } ) ;
    let svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_state_5_outports_mode = ( if svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_fired_1 { svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_3_outports_mode } else {svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_state_2_outports_mode } ) ;
    let svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_state_6_states___root = ( if svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_fired_2 { svar_rlt_exit_CruiseController_ModeLogic_mode_logic_On_Inactive_rlt_state_2_states___root1 } else {svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_state_5_states___root } ) ;
    let svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_1_states___root1 = ( if (! ((svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_state_6_states___root >= 3) & (svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_state_6_states___root <= 6))) { 3 } else {svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_state_6_states___root } ) ;
    let svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_rlt_fired_01 = ((! ((svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_state_6_states___root >= 3) & (svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_state_6_states___root <= 6))) & ((svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_1_states___root1 >= 3) & (svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_1_states___root1 <= 6))) ;
    let svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_Maintain_rlt_state_3_states___root1 = ( if (! (svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_1_states___root1 == 4)) { 4 } else {svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_1_states___root1 } ) ;
    let svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_Maintain_rlt_state_3_outports_mode1 = ( if (! (svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_1_states___root1 == 4)) { 4 } else {svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_state_5_outports_mode } ) ;
    let svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_3_states___root1 = ( if svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_rlt_fired_01 { svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_Maintain_rlt_state_3_states___root1 } else {svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_1_states___root1 } ) ;
    let svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_state_7_states___root = ( if svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_fired_2 { svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_3_states___root1 } else {svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_state_6_states___root } ) ;
    let svar_rlt_exit_CruiseController_ModeLogic_mode_logic_On_Init_rlt_state_2_states___root1 = ( if (svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_state_7_states___root == 7) { 2 } else {svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_state_7_states___root } ) ;
    let svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_rltCheckEntryStateConsistency_01 = ((svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_3_states___root1 == 4) | ((svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_3_states___root1 == 5) | (svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_3_states___root1 == 6))) ;
    let svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_3_outports_mode1 = ( if svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_rlt_fired_01 { svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_Maintain_rlt_state_3_outports_mode1 } else {svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_state_5_outports_mode } ) ;
    let svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_fired_3 = ((svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_state_7_states___root == 7) & (((! (( if (! svar_cruise_controller_CruiseController_ModeLogic_setEvent_Out) { 0 } else {1 } ) == 0)) & (! (( if (! svar_cruise_controller_CruiseController_ModeLogic_safetyCondition1) { 0 } else {1 } ) == 0))) & (! svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_complete_2))) ;
    let svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_complete_3 = (svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_fired_3 | svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_complete_2) ;
    let svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_state_8_states___root = ( if svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_fired_3 { svar_rlt_exit_CruiseController_ModeLogic_mode_logic_On_Init_rlt_state_2_states___root1 } else {svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_state_7_states___root } ) ;
    let svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_state_7_outports_mode = ( if svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_fired_2 { svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_3_outports_mode1 } else {svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_state_5_outports_mode } ) ;
    let svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_1_states___root2 = ( if (! ((svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_state_8_states___root >= 3) & (svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_state_8_states___root <= 6))) { 3 } else {svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_state_8_states___root } ) ;
    let svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_rlt_fired_02 = ((! ((svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_state_8_states___root >= 3) & (svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_state_8_states___root <= 6))) & ((svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_1_states___root2 >= 3) & (svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_1_states___root2 <= 6))) ;
    let svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_state_9_outports_setDesiredSpeed = ( if svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_fired_3 { true } else {svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_state_4_outports_setDesiredSpeed } ) ;
    let svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_Maintain_rlt_state_3_states___root2 = ( if (! (svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_1_states___root2 == 4)) { 4 } else {svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_1_states___root2 } ) ;
    let svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_Maintain_rlt_state_3_outports_mode2 = ( if (! (svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_1_states___root2 == 4)) { 4 } else {svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_state_7_outports_mode } ) ;
    let svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_3_states___root2 = ( if svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_rlt_fired_02 { svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_Maintain_rlt_state_3_states___root2 } else {svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_1_states___root2 } ) ;
    let svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_3_outports_mode2 = ( if svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_rlt_fired_02 { svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_Maintain_rlt_state_3_outports_mode2 } else {svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_state_7_outports_mode } ) ;
    let svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_state_10_outports_mode = ( if svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_fired_3 { svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_3_outports_mode2 } else {svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_state_7_outports_mode } ) ;
    let svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_state_10_states___root = ( if svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_fired_3 { svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_3_states___root2 } else {svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_state_8_states___root } ) ;
    let svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_rltCheckEntryStateConsistency_02 = ((svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_3_states___root2 == 4) | ((svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_3_states___root2 == 5) | (svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_3_states___root2 == 6))) ;
    let svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_fired_0 = ((svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_state_10_states___root == 4) & (! (( if (! svar_cruise_controller_CruiseController_ModeLogic_setEvent_Out) { 0 } else {1 } ) == 0))) ;
    let svar_rlt_exit_CruiseController_ModeLogic_mode_logic_On_Active_Maintain_rlt_state_3_states___root3 = ( if (svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_state_10_states___root == 4) { 3 } else {svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_state_10_states___root } ) ;
    let svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_1_states___root = ( if svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_fired_0 { svar_rlt_exit_CruiseController_ModeLogic_mode_logic_On_Active_Maintain_rlt_state_3_states___root3 } else {svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_state_10_states___root } ) ;
    let svar_rlt_exit_CruiseController_ModeLogic_mode_logic_On_Active_Maintain_rlt_state_3_outports_setDesiredSpeed3 = ( if (svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_state_10_states___root == 4) { false } else {svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_state_9_outports_setDesiredSpeed } ) ;
    let svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_Maintain_rlt_state_3_outports_mode3 = ( if (! (svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_1_states___root == 4)) { 4 } else {svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_state_10_outports_mode } ) ;
    let svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_3_outports_mode = ( if svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_fired_0 { svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_Maintain_rlt_state_3_outports_mode3 } else {svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_state_10_outports_mode } ) ;
    let svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_Maintain_rlt_state_3_states___root3 = ( if (! (svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_1_states___root == 4)) { 4 } else {svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_1_states___root } ) ;
    let svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_3_states___root = ( if svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_fired_0 { svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_Maintain_rlt_state_3_states___root3 } else {svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_1_states___root } ) ;
    let svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_1_outports_setDesiredSpeed = ( if svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_fired_0 { svar_rlt_exit_CruiseController_ModeLogic_mode_logic_On_Active_Maintain_rlt_state_3_outports_setDesiredSpeed3 } else {svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_state_9_outports_setDesiredSpeed } ) ;
    let svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_fired_1 = ((svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_3_states___root == 4) & ((! (( if (! svar_cruise_controller_CruiseController_ModeLogic_DelayOnsetAccel_Out) { 0 } else {1 } ) == 0)) & (! svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_fired_0))) ;
    let svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_2_outports_setDesiredSpeed = ( if svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_fired_0 { true } else {svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_1_outports_setDesiredSpeed } ) ;
    let svar_rlt_exit_CruiseController_ModeLogic_mode_logic_On_Active_Maintain_rlt_state_3_states___root1 = ( if (svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_3_states___root == 4) { 3 } else {svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_3_states___root } ) ;
    let svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_complete_1 = (svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_fired_1 | svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_fired_0) ;
    let svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_4_states___root = ( if svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_fired_1 { svar_rlt_exit_CruiseController_ModeLogic_mode_logic_On_Active_Maintain_rlt_state_3_states___root1 } else {svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_3_states___root } ) ;
    let svar_rlt_exit_CruiseController_ModeLogic_mode_logic_On_Active_Maintain_rlt_state_3_outports_setDesiredSpeed1 = ( if (svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_3_states___root == 4) { false } else {svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_2_outports_setDesiredSpeed } ) ;
    let svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_Increase_rlt_state_3_states___root = ( if (! (svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_4_states___root == 5)) { 5 } else {svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_4_states___root } ) ;
    let svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_4_outports_setDesiredSpeed = ( if svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_fired_1 { svar_rlt_exit_CruiseController_ModeLogic_mode_logic_On_Active_Maintain_rlt_state_3_outports_setDesiredSpeed1 } else {svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_2_outports_setDesiredSpeed } ) ;
    let svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_5_states___root = ( if svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_fired_1 { svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_Increase_rlt_state_3_states___root } else {svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_4_states___root } ) ;
    let svar_rlt_exit_CruiseController_ModeLogic_mode_logic_On_Active_Maintain_rlt_state_3_states___root2 = ( if (svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_5_states___root == 4) { 3 } else {svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_5_states___root } ) ;
    let svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_Increase_rlt_state_3_outports_mode = ( if (! (svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_4_states___root == 5)) { 6 } else {svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_3_outports_mode } ) ;
    let svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_5_outports_mode = ( if svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_fired_1 { svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_Increase_rlt_state_3_outports_mode } else {svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_3_outports_mode } ) ;
    let svar_rlt_exit_CruiseController_ModeLogic_mode_logic_On_Active_Maintain_rlt_state_3_outports_setDesiredSpeed2 = ( if (svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_5_states___root == 4) { false } else {svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_4_outports_setDesiredSpeed } ) ;
    let svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_fired_2 = ((svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_5_states___root == 4) & ((! (( if (! svar_cruise_controller_CruiseController_ModeLogic_DelayOnsetDecel_Out) { 0 } else {1 } ) == 0)) & (! svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_complete_1))) ;
    let svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_6_states___root = ( if svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_fired_2 { svar_rlt_exit_CruiseController_ModeLogic_mode_logic_On_Active_Maintain_rlt_state_3_states___root2 } else {svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_5_states___root } ) ;
    let svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_6_outports_setDesiredSpeed = ( if svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_fired_2 { svar_rlt_exit_CruiseController_ModeLogic_mode_logic_On_Active_Maintain_rlt_state_3_outports_setDesiredSpeed2 } else {svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_4_outports_setDesiredSpeed } ) ;
    let svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_Decrease_rlt_state_3_outports_mode = ( if (! (svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_6_states___root == 6)) { 5 } else {svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_5_outports_mode } ) ;
    let svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_complete_2 = (svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_fired_2 | svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_complete_1) ;
    let svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_Decrease_rlt_state_3_states___root = ( if (! (svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_6_states___root == 6)) { 6 } else {svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_6_states___root } ) ;
    let svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_7_states___root = ( if svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_fired_2 { svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_Decrease_rlt_state_3_states___root } else {svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_6_states___root } ) ;
    let svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_7_outports_mode = ( if svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_fired_2 { svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_Decrease_rlt_state_3_outports_mode } else {svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_5_outports_mode } ) ;
    let svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_fired_3 = ((svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_7_states___root == 6) & ((! (( if (! (! svar_cruise_controller_CruiseController_ModeLogic_DelayOnsetDecel_Out)) { 0 } else {1 } ) == 0)) & (! svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_complete_2))) ;
    let svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_complete_3 = (svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_fired_3 | svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_complete_2) ;
    let svar_rlt_exit_CruiseController_ModeLogic_mode_logic_On_Active_Decrease_rlt_state_2_states___root1 = ( if (svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_7_states___root == 6) { 3 } else {svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_7_states___root } ) ;
    let svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_8_states___root = ( if svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_fired_3 { svar_rlt_exit_CruiseController_ModeLogic_mode_logic_On_Active_Decrease_rlt_state_2_states___root1 } else {svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_7_states___root } ) ;
    let svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_Maintain_rlt_state_3_states___root11 = ( if (! (svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_8_states___root == 4)) { 4 } else {svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_8_states___root } ) ;
    let svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_9_states___root = ( if svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_fired_3 { svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_Maintain_rlt_state_3_states___root11 } else {svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_8_states___root } ) ;
    let svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_fired_4 = ((svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_9_states___root == 5) & ((! (( if (! (! svar_cruise_controller_CruiseController_ModeLogic_DelayOnsetAccel_Out)) { 0 } else {1 } ) == 0)) & (! svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_complete_3))) ;
    let svar_rlt_exit_CruiseController_ModeLogic_mode_logic_On_Active_Increase_rlt_state_2_states___root1 = ( if (svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_9_states___root == 5) { 3 } else {svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_9_states___root } ) ;
    let svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_complete_4 = (svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_fired_4 | svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_complete_3) ;
    let svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_Maintain_rlt_state_3_outports_mode11 = ( if (! (svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_8_states___root == 4)) { 4 } else {svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_7_outports_mode } ) ;
    let svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_10_states___root = ( if svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_fired_4 { svar_rlt_exit_CruiseController_ModeLogic_mode_logic_On_Active_Increase_rlt_state_2_states___root1 } else {svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_9_states___root } ) ;
    let svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_9_outports_mode = ( if svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_fired_3 { svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_Maintain_rlt_state_3_outports_mode11 } else {svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_7_outports_mode } ) ;
    let svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_Maintain_rlt_state_3_states___root21 = ( if (! (svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_10_states___root == 4)) { 4 } else {svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_10_states___root } ) ;
    let svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_15_states___root = ( if svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_fired_4 { svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_Maintain_rlt_state_3_states___root21 } else {svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_10_states___root } ) ;
    let svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_state_14_states___root = ( if ((! svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_complete_3) & ((svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_state_10_states___root >= 3) & (svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_state_10_states___root <= 6))) { svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_15_states___root } else {svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_state_10_states___root } ) ;
    let svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_Maintain_rlt_state_3_outports_mode21 = ( if (! (svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_10_states___root == 4)) { 4 } else {svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_9_outports_mode } ) ;
    let svar_rlt_eval_CruiseController_ModeLogic_mode_logic_rlt_state_7_states___root = ( if ((! svar_rlt_eval_CruiseController_ModeLogic_mode_logic_rlt_complete_1) & ((svar_rlt_eval_CruiseController_ModeLogic_mode_logic_rlt_state_4_states___root >= 2) & (svar_rlt_eval_CruiseController_ModeLogic_mode_logic_rlt_state_4_states___root <= 8))) { svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_state_14_states___root } else {svar_rlt_eval_CruiseController_ModeLogic_mode_logic_rlt_state_4_states___root } ) ;
    let svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_15_outports_mode = ( if svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_fired_4 { svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_Maintain_rlt_state_3_outports_mode21 } else {svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_9_outports_mode } ) ;
    let svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_15_outports_setDesiredSpeed = ( if ((! svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_complete_4) & (svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_15_states___root == 4)) { false } else {svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_6_outports_setDesiredSpeed } ) ;
    let svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_state_14_outports_setDesiredSpeed = ( if ((! svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_complete_3) & ((svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_state_10_states___root >= 3) & (svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_state_10_states___root <= 6))) { svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_15_outports_setDesiredSpeed } else {svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_state_9_outports_setDesiredSpeed } ) ;
    let svar_chart_CruiseController_ModeLogic_mode_logic_rlt_state_1_states___root = ( if svar_SP3c { ( if svar_chart_CruiseController_ModeLogic_mode_logic_rlt_evtInitStep { svar_rlt_enter_CruiseController_ModeLogic_mode_logic_rlt_state_2_states___root } else {svar_rlt_eval_CruiseController_ModeLogic_mode_logic_rlt_state_7_states___root } ) } else {svar_chart_CruiseController_ModeLogic_mode_logic_begin_state_states___root } ) ;
    let svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_state_14_outports_mode = ( if ((! svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_complete_3) & ((svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_state_10_states___root >= 3) & (svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_state_10_states___root <= 6))) { svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_15_outports_mode } else {svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_state_10_outports_mode } ) ;
    let svar_rlt_eval_CruiseController_ModeLogic_mode_logic_rlt_state_7_outports_setDesiredSpeed = ( if ((! svar_rlt_eval_CruiseController_ModeLogic_mode_logic_rlt_complete_1) & ((svar_rlt_eval_CruiseController_ModeLogic_mode_logic_rlt_state_4_states___root >= 2) & (svar_rlt_eval_CruiseController_ModeLogic_mode_logic_rlt_state_4_states___root <= 8))) { svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_state_14_outports_setDesiredSpeed } else {svar_rlt_eval_CruiseController_ModeLogic_mode_logic_rlt_state_1_outports_setDesiredSpeed } ) ;
    let svar_rlt_eval_CruiseController_ModeLogic_mode_logic_rlt_state_7_outports_mode = ( if ((! svar_rlt_eval_CruiseController_ModeLogic_mode_logic_rlt_complete_1) & ((svar_rlt_eval_CruiseController_ModeLogic_mode_logic_rlt_state_4_states___root >= 2) & (svar_rlt_eval_CruiseController_ModeLogic_mode_logic_rlt_state_4_states___root <= 8))) { svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_state_14_outports_mode } else {svar_rlt_eval_CruiseController_ModeLogic_mode_logic_rlt_state_4_outports_mode } ) ;
    let svar_chart_CruiseController_ModeLogic_mode_logic_setDesiredSpeed = ( if svar_SP3c { ( if svar_chart_CruiseController_ModeLogic_mode_logic_rlt_evtInitStep { svar_chart_CruiseController_ModeLogic_mode_logic_begin_state_outports_setDesiredSpeed } else {svar_rlt_eval_CruiseController_ModeLogic_mode_logic_rlt_state_7_outports_setDesiredSpeed } ) } else {svar_chart_CruiseController_ModeLogic_mode_logic_begin_state_outports_setDesiredSpeed } ) ;
    let svar_chart_CruiseController_ModeLogic_mode_logic_final_state_states___root = svar_chart_CruiseController_ModeLogic_mode_logic_rlt_state_1_states___root ;
    let svar_cruise_controller_CruiseController_SP3a__Const_Eq = (( if (! svar_chart_CruiseController_ModeLogic_mode_logic_setDesiredSpeed) { 0f32 } else {1f32 } ) == 1f32) ;
    let svar_mode = ( if svar_SP3c { ( if svar_chart_CruiseController_ModeLogic_mode_logic_rlt_evtInitStep { svar_rlt_enter_CruiseController_ModeLogic_mode_logic_rlt_state_2_outports_mode } else {svar_rlt_eval_CruiseController_ModeLogic_mode_logic_rlt_state_7_outports_mode } ) } else {svar_chart_CruiseController_ModeLogic_mode_logic_begin_state_outports_mode } ) ;
    let svar_cruise_controller_CruiseController_CP8a_isCruiseActive_Relational_Operator2 = (svar_mode == 5) ;
    let svar_cruise_controller_CruiseController_CP8a_isCruiseActive_Relational_Operator1 = (svar_mode == 4) ;
    let svar_cruise_controller_CruiseController_SetDesiredSpeed_isModeDecrease___isModeDecrease = svar_cruise_controller_CruiseController_CP8a_isCruiseActive_Relational_Operator2 ;
    let svar_cruise_controller_CruiseController_SP8_pre_MAINTAIN__MAINTAIN____MAINT = svar_cruise_controller_CruiseController_CP8a_isCruiseActive_Relational_Operator1 ;
    let svar_rlt_condact_cruise_controller_CruiseController_SetDesiredSpeed_computeDecreaseInDesiredSpeed_rlt_clock = svar_cruise_controller_CruiseController_SetDesiredSpeed_isModeDecrease___isModeDecrease ;
    let svar_cruise_controller_CruiseController_SP4__ACT_INACT__INACTIVE__INACT = (svar_mode == 3) ;
    let svar_cruise_controller_CruiseController_SP3__OFF_INIT__INIT__INIT = (svar_mode == 2) ;
    let svar_cruise_controller_CruiseController_SP3__OFF_INIT__OFF__OFF = (svar_mode == 1) ;
    let svar_cruise_controller_CruiseController_SP3__OFF_INIT__OFF_INIT = (svar_cruise_controller_CruiseController_SP3__OFF_INIT__OFF__OFF | svar_cruise_controller_CruiseController_SP3__OFF_INIT__INIT__INIT) ;
    let svar_SP3a = ((! (! svar_cruise_controller_CruiseController_CP8a_isCruiseActive_Relational_Operator1)) | (! svar_cruise_controller_CruiseController_SP3a__Const_Eq)) ;
    let svar_cruise_controller_CruiseController_CP8a_isCruiseActive_Relational_Operator3 = (svar_mode == 6) ;
    let svar_cruise_controller_CruiseController_SP4__ACT_INACT__ACTIVE__ACT = ((svar_cruise_controller_CruiseController_CP8a_isCruiseActive_Relational_Operator1 | svar_cruise_controller_CruiseController_CP8a_isCruiseActive_Relational_Operator2) | svar_cruise_controller_CruiseController_CP8a_isCruiseActive_Relational_Operator3) ;
    let svar_newDesiredSpeed = ( if (svar_rlt_condact_cruise_controller_CruiseController_SetDesiredSpeed_computeDecreaseInDesiredSpeed_rlt_init_step & (! svar_rlt_condact_cruise_controller_CruiseController_SetDesiredSpeed_computeDecreaseInDesiredSpeed_rlt_clock)) { 0f32 } else {(svar_cruise_controller_CruiseController_SetDesiredSpeed_prev_desiredSpeed - 1f32 / 20f32) } ) ;
    let svar_cruise_controller_CruiseController_SetDesiredSpeed_isModeIncrease___isModeIncrease = svar_cruise_controller_CruiseController_CP8a_isCruiseActive_Relational_Operator3 ;
    let svar_cruise_controller_CruiseController_SetDesiredSpeed_InactiveMaintanDesiredSpeed = ( if svar_cruise_controller_CruiseController_SP4__ACT_INACT__INACTIVE__INACT { svar_cruise_controller_CruiseController_SetDesiredSpeed_prev_desiredSpeed } else {0f32 } ) ;
    let svar_cruise_controller_CruiseController_SetDesiredSpeed_MaintainDesiredSpeed = ( if svar_cruise_controller_CruiseController_CP8a_isCruiseActive_Relational_Operator1 { svar_cruise_controller_CruiseController_SetDesiredSpeed_prev_desiredSpeed } else {svar_cruise_controller_CruiseController_SetDesiredSpeed_InactiveMaintanDesiredSpeed } ) ;
    let svar_CP8a = ((! svar_chart_CruiseController_ModeLogic_mode_logic_setDesiredSpeed) | svar_cruise_controller_CruiseController_SP4__ACT_INACT__ACTIVE__ACT) ;
    let svar_cruise_controller_CruiseController_SetDesiredSpeed_DecreaseDesiredSpeed = ( if svar_cruise_controller_CruiseController_SetDesiredSpeed_isModeDecrease___isModeDecrease { svar_newDesiredSpeed } else {svar_cruise_controller_CruiseController_SetDesiredSpeed_MaintainDesiredSpeed } ) ;
    let svar_rlt_condact_cruise_controller_CruiseController_SetDesiredSpeed_computeIncreaseInDesiredSpeed_rlt_clock = svar_cruise_controller_CruiseController_SetDesiredSpeed_isModeIncrease___isModeIncrease ;
    let svar_cruise_controller_CruiseController_SP4__ACT_INACT__ACT_INACT = (svar_cruise_controller_CruiseController_SP4__ACT_INACT__ACTIVE__ACT | svar_cruise_controller_CruiseController_SP4__ACT_INACT__INACTIVE__INACT) ;
    let svar_newDesiredSpeed1 = ( if (svar_rlt_condact_cruise_controller_CruiseController_SetDesiredSpeed_computeIncreaseInDesiredSpeed_rlt_init_step & (! svar_rlt_condact_cruise_controller_CruiseController_SetDesiredSpeed_computeIncreaseInDesiredSpeed_rlt_clock)) { 0f32 } else {(svar_cruise_controller_CruiseController_SetDesiredSpeed_prev_desiredSpeed + 1f32 / 20f32) } ) ;
    let svar_cruise_controller_CruiseController_SetDesiredSpeed_increasedesiredSpeed = ( if svar_cruise_controller_CruiseController_SetDesiredSpeed_isModeIncrease___isModeIncrease { svar_newDesiredSpeed1 } else {svar_cruise_controller_CruiseController_SetDesiredSpeed_DecreaseDesiredSpeed } ) ;
    let svar_cruise_controller_CruiseController_SP3b__Const2_Eq = (svar_cruise_controller_CruiseController_SetDesiredSpeed_increasedesiredSpeed == 0f32) ;
    let svar_cruise_controller_CruiseController_SetDesiredSpeed_ResetDesiredSpeed = ( if svar_chart_CruiseController_ModeLogic_mode_logic_setDesiredSpeed { svar_carSpeed } else {svar_cruise_controller_CruiseController_SetDesiredSpeed_increasedesiredSpeed } ) ;
    let svar_SP3b = ((! svar_cruise_controller_CruiseController_SP3__OFF_INIT__OFF_INIT) | svar_cruise_controller_CruiseController_SP3b__Const2_Eq) ;
    let svar_desiredSpeed = ( if (svar_cruise_controller_CruiseController_SetDesiredSpeed_ResetDesiredSpeed < 0f32) { 0f32 } else {( if (svar_cruise_controller_CruiseController_SetDesiredSpeed_ResetDesiredSpeed > 100f32) { 100f32 } else {svar_cruise_controller_CruiseController_SetDesiredSpeed_ResetDesiredSpeed } ) } ) ;
    let svar_cruise_controller_CruiseController_SP6_Relational_Operator = (svar_cruise_controller_CruiseController_SP8_pre_realval_pre_x_ <= svar_desiredSpeed) ;
    let svar_cruise_controller_CruiseController_SP10_pre_realval_x = svar_desiredSpeed ;
    let svar_cruise_controller_CruiseController_VRP3__Const1_Eq = (svar_desiredSpeed > 0f32) ;
    let svar_cruise_controller_CruiseController_SP9_Relational_Operator = (svar_cruise_controller_CruiseController_SP8_pre_realval_pre_x_ < svar_desiredSpeed) ;
    let svar_cruise_controller_CruiseController_SP8_Relational_Operator = (svar_cruise_controller_CruiseController_SP8_pre_realval_pre_x_ == svar_desiredSpeed) ;
    let svar_cruise_controller_CruiseController_VRP4_Relational_Operator = (svar_desiredSpeed == svar_cruise_controller_CruiseController_SP8_pre_realval_pre_x_) ;
    let svar_cruise_controller_CruiseController_SP3__Const2_Eq = (svar_desiredSpeed == 0f32) ;
    let svar_cruise_controller_CruiseController_SetThrottle_speedDiff = (svar_desiredSpeed - svar_carSpeed) ;
    let svar_cruise_controller_CruiseController_SP10___Const_Eq = (! (svar_desiredSpeed == 100f32)) ;
    let svar_cruise_controller_CruiseController_VRP4_Relational_Operator1 = (svar_desiredSpeed == svar_carSpeed) ;
    let svar_cruise_controller_CruiseController_VRP2___Const__gte = (svar_desiredSpeed <= 100f32) ;
    let svar_VRP4 = ((svar_cruise_controller_CruiseController_VRP4_Relational_Operator | svar_cruise_controller_CruiseController_SP3__Const2_Eq) | svar_cruise_controller_CruiseController_VRP4_Relational_Operator1) ;
    let svar_cruise_controller_CruiseController_SP7_Relational_Operator = (svar_cruise_controller_CruiseController_SP8_pre_realval_pre_x_ >= svar_desiredSpeed) ;
    let svar_cruise_controller_CruiseController_SP10_Logical_Operator = (svar_cruise_controller_CruiseController_SP10_pre_INCREASE_pre_INC & svar_cruise_controller_CruiseController_SP10___Const_Eq) ;
    let svar_cruise_controller_CruiseController_VRP2___Const_gte = (svar_desiredSpeed >= 0f32) ;
    let svar_cruise_controller_CruiseController_SP11___Const1_gte = (svar_desiredSpeed >= 15f32) ;
    let svar_cruise_controller_CruiseController_VRP3__Const_Eq = (svar_desiredSpeed < 0f32) ;
    let svar_cruise_controller_CruiseController_SP11___Const_Eq = (! (svar_desiredSpeed == 0f32)) ;
    let svar_cruise_controller_CruiseController_SP10_Relational_Operator = (svar_cruise_controller_CruiseController_SP8_pre_realval_pre_x_ > svar_desiredSpeed) ;
    let svar_SP7 = ((! svar_cruise_controller_CruiseController_CP8a_isCruiseActive_Relational_Operator3) | svar_cruise_controller_CruiseController_SP7_Relational_Operator) ;
    let svar_SP10 = ((! svar_cruise_controller_CruiseController_SP10_Logical_Operator) | svar_cruise_controller_CruiseController_SP10_Relational_Operator) ;
    let svar_SP4 = ((! svar_cruise_controller_CruiseController_SP4__ACT_INACT__ACT_INACT) | svar_cruise_controller_CruiseController_SP11___Const1_gte) ;
    let svar_VRP2 = (svar_cruise_controller_CruiseController_VRP2___Const_gte & svar_cruise_controller_CruiseController_VRP2___Const__gte) ;
    let svar_cruise_controller_CruiseController_SetThrottle_thottleDeltaPerSec = (svar_cruise_controller_CruiseController_SetThrottle_speedDiff * 1f32) ;
    let svar_SP3 = ((! svar_cruise_controller_CruiseController_SP3__OFF_INIT__OFF_INIT) | svar_cruise_controller_CruiseController_SP3__Const2_Eq) ;
    let svar_SP11 = ((! svar_cruise_controller_CruiseController_SP11___Const_Eq) | svar_cruise_controller_CruiseController_SP11___Const1_gte) ;
    let svar_cruise_controller_CruiseController_VRP3_Logical_Operator = (svar_cruise_controller_CruiseController_VRP3__Const1_Eq & svar_cruise_controller_CruiseController_VRP3__Const_Eq) ;
    let svar_SP6 = ((! svar_cruise_controller_CruiseController_CP8a_isCruiseActive_Relational_Operator2) | svar_cruise_controller_CruiseController_SP6_Relational_Operator) ;
    let svar_cruise_controller_CruiseController_SP9_Logical_Operator = (svar_cruise_controller_CruiseController_SP9_pre_DECREASE_pre_DEC & svar_cruise_controller_CruiseController_SP11___Const_Eq) ;
    let svar_SP8 = ((! svar_cruise_controller_CruiseController_SP8_pre_MAINTAIN_pre_MNT) | svar_cruise_controller_CruiseController_SP8_Relational_Operator) ;
    let svar_cruise_controller_CruiseController_SetThrottle_throttleDeltaPerSecSat = ( if (svar_cruise_controller_CruiseController_SetThrottle_thottleDeltaPerSec < - 10f32) { - 10f32 } else {( if (svar_cruise_controller_CruiseController_SetThrottle_thottleDeltaPerSec > 10f32) { 10f32 } else {svar_cruise_controller_CruiseController_SetThrottle_thottleDeltaPerSec } ) } ) ;
    let svar_VRP3 = (! svar_cruise_controller_CruiseController_VRP3_Logical_Operator) ;
    let svar_SP9 = ((! svar_cruise_controller_CruiseController_SP9_Logical_Operator) | svar_cruise_controller_CruiseController_SP9_Relational_Operator) ;
    let svar_cruise_controller_CruiseController_SetThrottle_throttleDeltaPerStep = (svar_cruise_controller_CruiseController_SetThrottle_throttleDeltaPerSecSat / 20f32) ;
    let svar_cruise_controller_CruiseController_SetThrottle_cruiseThrottlePrevPlusDelta = (svar_cruise_controller_CruiseController_SetThrottle_throttleDeltaPerStep + svar_cruise_controller_CruiseController_SetThrottle_cruiseThrottlePrev) ;
    let svar_cruise_controller_CruiseController_SetThrottle_cruiseThrottleSat = ( if (svar_cruise_controller_CruiseController_SetThrottle_cruiseThrottlePrevPlusDelta < 0f32) { 0f32 } else {( if (svar_cruise_controller_CruiseController_SetThrottle_cruiseThrottlePrevPlusDelta > 100f32) { 100f32 } else {svar_cruise_controller_CruiseController_SetThrottle_cruiseThrottlePrevPlusDelta } ) } ) ;
    let svar_cruiseThrottle = ( if svar_cruise_controller_CruiseController_SP4__ACT_INACT__ACTIVE__ACT { svar_cruise_controller_CruiseController_SetThrottle_cruiseThrottleSat } else {0f32 } ) ;
    let svar_cruise_controller_CruiseController_VRP1___Const__gte = (svar_cruiseThrottle <= 100f32) ;
    let svar_cruise_controller_CruiseController_SP5_pre_realval_x = svar_cruiseThrottle ;
    let svar_cruise_controller_CruiseController_SP1__Const_Eq = (svar_cruiseThrottle == 0f32) ;
    let svar_cruise_controller_CruiseController_VRP1___Const_gte = (svar_cruiseThrottle >= 0f32) ;
    let svar_cruise_controller_CruiseController_SP5_Relational_Operator = (svar_cruise_controller_CruiseController_SP5_pre_realval_pre_x_ == svar_cruiseThrottle) ;
    let svar_SP5 = ((! svar_cruise_controller_CruiseController_CP8a_isCruiseActive_Relational_Operator1) | svar_cruise_controller_CruiseController_SP5_Relational_Operator) ;
    let svar_SP2 = ((! (! svar_cruise_controller_CruiseController_SP4__ACT_INACT__ACTIVE__ACT)) | svar_cruise_controller_CruiseController_SP1__Const_Eq) ;
    let svar_VRP1 = (svar_cruise_controller_CruiseController_VRP1___Const_gte & svar_cruise_controller_CruiseController_VRP1___Const__gte) ;
    let svar_SP1 = ((! (! svar_cruise_controller_CruiseController_ModeLogic_safetyCondition1)) | svar_cruise_controller_CruiseController_SP1__Const_Eq) ;
    
    // |===| Checking assertions.
    
    
    
    
    // |===| Returning initial state.
    Ok( Cruise_controller {
      // |===| Inputs.
      svar_onOff: svar_onOff,
      svar_decelSet: svar_decelSet,
      svar_accelResume: svar_accelResume,
      svar_cancel: svar_cancel,
      svar_brakePedal: svar_brakePedal,
      svar_carGear: svar_carGear,
      svar_carSpeed: svar_carSpeed,
      svar_validInputs: svar_validInputs,
      
      // |===| Outputs.
      svar_mode: svar_mode,
      svar_cruiseThrottle: svar_cruiseThrottle,
      svar_desiredSpeed: svar_desiredSpeed,
      svar_VRP1: svar_VRP1,
      svar_VRP2: svar_VRP2,
      svar_CP8a: svar_CP8a,
      svar_VRP3: svar_VRP3,
      svar_VRP4: svar_VRP4,
      svar_SP4: svar_SP4,
      svar_SP5: svar_SP5,
      svar_SP6: svar_SP6,
      svar_SP7: svar_SP7,
      svar_SP3b: svar_SP3b,
      svar_SP3c: svar_SP3c,
      svar_SP3: svar_SP3,
      svar_SP3a: svar_SP3a,
      svar_SP2: svar_SP2,
      svar_SP1: svar_SP1,
      svar_SP8: svar_SP8,
      svar_SP9: svar_SP9,
      svar_SP10: svar_SP10,
      svar_SP11: svar_SP11,
      
      // |===| Locals.
      svar_subrange_1: svar_subrange_1,
      svar_cruise_controller_CruiseController_VRP4_Relational_Operator1: svar_cruise_controller_CruiseController_VRP4_Relational_Operator1,
      svar_cruise_controller_CruiseController_VRP4_Relational_Operator: svar_cruise_controller_CruiseController_VRP4_Relational_Operator,
      svar_cruise_controller_CruiseController_VRP3_Logical_Operator: svar_cruise_controller_CruiseController_VRP3_Logical_Operator,
      svar_cruise_controller_CruiseController_VRP3__Const1_Eq: svar_cruise_controller_CruiseController_VRP3__Const1_Eq,
      svar_cruise_controller_CruiseController_VRP3__Const_Eq: svar_cruise_controller_CruiseController_VRP3__Const_Eq,
      svar_cruise_controller_CruiseController_VRP2___Const_gte: svar_cruise_controller_CruiseController_VRP2___Const_gte,
      svar_cruise_controller_CruiseController_VRP2___Const__gte: svar_cruise_controller_CruiseController_VRP2___Const__gte,
      svar_cruise_controller_CruiseController_VRP1___Const_gte: svar_cruise_controller_CruiseController_VRP1___Const_gte,
      svar_cruise_controller_CruiseController_VRP1___Const__gte: svar_cruise_controller_CruiseController_VRP1___Const__gte,
      svar_cruise_controller_CruiseController_SetThrottle_throttleDeltaPerStep: svar_cruise_controller_CruiseController_SetThrottle_throttleDeltaPerStep,
      svar_cruise_controller_CruiseController_SetThrottle_throttleDeltaPerSecSat: svar_cruise_controller_CruiseController_SetThrottle_throttleDeltaPerSecSat,
      svar_cruise_controller_CruiseController_SetThrottle_thottleDeltaPerSec: svar_cruise_controller_CruiseController_SetThrottle_thottleDeltaPerSec,
      svar_cruise_controller_CruiseController_SetThrottle_speedDiff: svar_cruise_controller_CruiseController_SetThrottle_speedDiff,
      svar_cruise_controller_CruiseController_SetThrottle_cruiseThrottleSat: svar_cruise_controller_CruiseController_SetThrottle_cruiseThrottleSat,
      svar_cruise_controller_CruiseController_SetThrottle_cruiseThrottlePrevPlusDelta: svar_cruise_controller_CruiseController_SetThrottle_cruiseThrottlePrevPlusDelta,
      svar_cruise_controller_CruiseController_SetThrottle_cruiseThrottlePrev: svar_cruise_controller_CruiseController_SetThrottle_cruiseThrottlePrev,
      svar_cruise_controller_CruiseController_SetDesiredSpeed_increasedesiredSpeed: svar_cruise_controller_CruiseController_SetDesiredSpeed_increasedesiredSpeed,
      svar_cruise_controller_CruiseController_SetDesiredSpeed_prev_desiredSpeed: svar_cruise_controller_CruiseController_SetDesiredSpeed_prev_desiredSpeed,
      svar_cruise_controller_CruiseController_SetDesiredSpeed_ResetDesiredSpeed: svar_cruise_controller_CruiseController_SetDesiredSpeed_ResetDesiredSpeed,
      svar_cruise_controller_CruiseController_SetDesiredSpeed_MaintainDesiredSpeed: svar_cruise_controller_CruiseController_SetDesiredSpeed_MaintainDesiredSpeed,
      svar_cruise_controller_CruiseController_SetDesiredSpeed_InactiveMaintanDesiredSpeed: svar_cruise_controller_CruiseController_SetDesiredSpeed_InactiveMaintanDesiredSpeed,
      svar_cruise_controller_CruiseController_SetDesiredSpeed_DecreaseDesiredSpeed: svar_cruise_controller_CruiseController_SetDesiredSpeed_DecreaseDesiredSpeed,
      svar_cruise_controller_CruiseController_SetDesiredSpeed_isModeIncrease___isModeIncrease: svar_cruise_controller_CruiseController_SetDesiredSpeed_isModeIncrease___isModeIncrease,
      svar_cruise_controller_CruiseController_SetDesiredSpeed_isModeDecrease___isModeDecrease: svar_cruise_controller_CruiseController_SetDesiredSpeed_isModeDecrease___isModeDecrease,
      svar_cruise_controller_CruiseController_SP9_Relational_Operator: svar_cruise_controller_CruiseController_SP9_Relational_Operator,
      svar_cruise_controller_CruiseController_SP9_Logical_Operator: svar_cruise_controller_CruiseController_SP9_Logical_Operator,
      svar_cruise_controller_CruiseController_SP9_pre_DECREASE_pre_DEC: svar_cruise_controller_CruiseController_SP9_pre_DECREASE_pre_DEC,
      svar_cruise_controller_CruiseController_SP8_Relational_Operator: svar_cruise_controller_CruiseController_SP8_Relational_Operator,
      svar_cruise_controller_CruiseController_SP8_pre_realval_pre_x_: svar_cruise_controller_CruiseController_SP8_pre_realval_pre_x_,
      svar_cruise_controller_CruiseController_SP8_pre_MAINTAIN_pre_MNT: svar_cruise_controller_CruiseController_SP8_pre_MAINTAIN_pre_MNT,
      svar_cruise_controller_CruiseController_SP8_pre_MAINTAIN__MAINTAIN____MAINT: svar_cruise_controller_CruiseController_SP8_pre_MAINTAIN__MAINTAIN____MAINT,
      svar_cruise_controller_CruiseController_SP7_Relational_Operator: svar_cruise_controller_CruiseController_SP7_Relational_Operator,
      svar_cruise_controller_CruiseController_SP6_Relational_Operator: svar_cruise_controller_CruiseController_SP6_Relational_Operator,
      svar_cruise_controller_CruiseController_SP5_Relational_Operator: svar_cruise_controller_CruiseController_SP5_Relational_Operator,
      svar_cruise_controller_CruiseController_SP5_pre_realval_pre_x_: svar_cruise_controller_CruiseController_SP5_pre_realval_pre_x_,
      svar_cruise_controller_CruiseController_SP5_pre_realval_x: svar_cruise_controller_CruiseController_SP5_pre_realval_x,
      svar_cruise_controller_CruiseController_SP4__ACT_INACT__ACT_INACT: svar_cruise_controller_CruiseController_SP4__ACT_INACT__ACT_INACT,
      svar_cruise_controller_CruiseController_SP4__ACT_INACT__INACTIVE__INACT: svar_cruise_controller_CruiseController_SP4__ACT_INACT__INACTIVE__INACT,
      svar_cruise_controller_CruiseController_SP4__ACT_INACT__ACTIVE__ACT: svar_cruise_controller_CruiseController_SP4__ACT_INACT__ACTIVE__ACT,
      svar_cruise_controller_CruiseController_SP3b__Const2_Eq: svar_cruise_controller_CruiseController_SP3b__Const2_Eq,
      svar_cruise_controller_CruiseController_SP3a__Const_Eq: svar_cruise_controller_CruiseController_SP3a__Const_Eq,
      svar_cruise_controller_CruiseController_SP3__OFF_INIT__OFF_INIT: svar_cruise_controller_CruiseController_SP3__OFF_INIT__OFF_INIT,
      svar_cruise_controller_CruiseController_SP3__OFF_INIT__OFF__OFF: svar_cruise_controller_CruiseController_SP3__OFF_INIT__OFF__OFF,
      svar_cruise_controller_CruiseController_SP3__OFF_INIT__INIT__INIT: svar_cruise_controller_CruiseController_SP3__OFF_INIT__INIT__INIT,
      svar_cruise_controller_CruiseController_SP3__Const2_Eq: svar_cruise_controller_CruiseController_SP3__Const2_Eq,
      svar_cruise_controller_CruiseController_SP11___Const1_gte: svar_cruise_controller_CruiseController_SP11___Const1_gte,
      svar_cruise_controller_CruiseController_SP11___Const_Eq: svar_cruise_controller_CruiseController_SP11___Const_Eq,
      svar_cruise_controller_CruiseController_SP10_Relational_Operator: svar_cruise_controller_CruiseController_SP10_Relational_Operator,
      svar_cruise_controller_CruiseController_SP10_Logical_Operator: svar_cruise_controller_CruiseController_SP10_Logical_Operator,
      svar_cruise_controller_CruiseController_SP10_pre_realval_x: svar_cruise_controller_CruiseController_SP10_pre_realval_x,
      svar_cruise_controller_CruiseController_SP10_pre_INCREASE_pre_INC: svar_cruise_controller_CruiseController_SP10_pre_INCREASE_pre_INC,
      svar_cruise_controller_CruiseController_SP10___Const_Eq: svar_cruise_controller_CruiseController_SP10___Const_Eq,
      svar_cruise_controller_CruiseController_SP1__Const_Eq: svar_cruise_controller_CruiseController_SP1__Const_Eq,
      svar_cruise_controller_CruiseController_ModeLogic_safetyCondition1: svar_cruise_controller_CruiseController_ModeLogic_safetyCondition1,
      svar_cruise_controller_CruiseController_ModeLogic_setEvent_Out: svar_cruise_controller_CruiseController_ModeLogic_setEvent_Out,
      svar_cruise_controller_CruiseController_ModeLogic_setEvent_Unit_Delay: svar_cruise_controller_CruiseController_ModeLogic_setEvent_Unit_Delay,
      svar_cruise_controller_CruiseController_ModeLogic_setEvent_InBool: svar_cruise_controller_CruiseController_ModeLogic_setEvent_InBool,
      svar_cruise_controller_CruiseController_ModeLogic_safetyCondition_Relational_Operator1: svar_cruise_controller_CruiseController_ModeLogic_safetyCondition_Relational_Operator1,
      svar_cruise_controller_CruiseController_ModeLogic_safetyCondition_Relational_Operator: svar_cruise_controller_CruiseController_ModeLogic_safetyCondition_Relational_Operator,
      svar_cruise_controller_CruiseController_ModeLogic_resumeEvent_Out: svar_cruise_controller_CruiseController_ModeLogic_resumeEvent_Out,
      svar_cruise_controller_CruiseController_ModeLogic_resumeEvent_Unit_Delay: svar_cruise_controller_CruiseController_ModeLogic_resumeEvent_Unit_Delay,
      svar_cruise_controller_CruiseController_ModeLogic_resumeEvent_InBool: svar_cruise_controller_CruiseController_ModeLogic_resumeEvent_InBool,
      svar_cruise_controller_CruiseController_ModeLogic_DelayOnsetDecel_Out: svar_cruise_controller_CruiseController_ModeLogic_DelayOnsetDecel_Out,
      svar_cruise_controller_CruiseController_ModeLogic_DelayOnsetDecel_Bounded_Count_Out: svar_cruise_controller_CruiseController_ModeLogic_DelayOnsetDecel_Bounded_Count_Out,
      svar_cruise_controller_CruiseController_ModeLogic_DelayOnsetDecel_Bounded_Count_Unit_Delay: svar_cruise_controller_CruiseController_ModeLogic_DelayOnsetDecel_Bounded_Count_Unit_Delay,
      svar_cruise_controller_CruiseController_ModeLogic_DelayOnsetDecel_Bounded_Count_Switch: svar_cruise_controller_CruiseController_ModeLogic_DelayOnsetDecel_Bounded_Count_Switch,
      svar_cruise_controller_CruiseController_ModeLogic_DelayOnsetDecel_Bounded_Count_Add: svar_cruise_controller_CruiseController_ModeLogic_DelayOnsetDecel_Bounded_Count_Add,
      svar_cruise_controller_CruiseController_ModeLogic_DelayOnsetDecel_Bounded_Count_Limit_Enforce_lower_limit: svar_cruise_controller_CruiseController_ModeLogic_DelayOnsetDecel_Bounded_Count_Limit_Enforce_lower_limit,
      svar_cruise_controller_CruiseController_ModeLogic_DelayOnsetAccel_Out: svar_cruise_controller_CruiseController_ModeLogic_DelayOnsetAccel_Out,
      svar_cruise_controller_CruiseController_ModeLogic_DelayOnsetAccel_Bounded_Count_Out: svar_cruise_controller_CruiseController_ModeLogic_DelayOnsetAccel_Bounded_Count_Out,
      svar_cruise_controller_CruiseController_ModeLogic_DelayOnsetAccel_Bounded_Count_Unit_Delay: svar_cruise_controller_CruiseController_ModeLogic_DelayOnsetAccel_Bounded_Count_Unit_Delay,
      svar_cruise_controller_CruiseController_ModeLogic_DelayOnsetAccel_Bounded_Count_Switch: svar_cruise_controller_CruiseController_ModeLogic_DelayOnsetAccel_Bounded_Count_Switch,
      svar_cruise_controller_CruiseController_ModeLogic_DelayOnsetAccel_Bounded_Count_Add: svar_cruise_controller_CruiseController_ModeLogic_DelayOnsetAccel_Bounded_Count_Add,
      svar_cruise_controller_CruiseController_ModeLogic_DelayOnsetAccel_Bounded_Count_Limit_Enforce_lower_limit: svar_cruise_controller_CruiseController_ModeLogic_DelayOnsetAccel_Bounded_Count_Limit_Enforce_lower_limit,
      svar_cruise_controller_CruiseController_CP8a_isCruiseActive_Relational_Operator3: svar_cruise_controller_CruiseController_CP8a_isCruiseActive_Relational_Operator3,
      svar_cruise_controller_CruiseController_CP8a_isCruiseActive_Relational_Operator2: svar_cruise_controller_CruiseController_CP8a_isCruiseActive_Relational_Operator2,
      svar_cruise_controller_CruiseController_CP8a_isCruiseActive_Relational_Operator1: svar_cruise_controller_CruiseController_CP8a_isCruiseActive_Relational_Operator1,
      svar_chart_CruiseController_ModeLogic_mode_logic_setDesiredSpeed: svar_chart_CruiseController_ModeLogic_mode_logic_setDesiredSpeed,
      svar_chart_CruiseController_ModeLogic_mode_logic_final_state_states___root: svar_chart_CruiseController_ModeLogic_mode_logic_final_state_states___root,
      svar_chart_CruiseController_ModeLogic_mode_logic_rlt_state_1_states___root: svar_chart_CruiseController_ModeLogic_mode_logic_rlt_state_1_states___root,
      svar_chart_CruiseController_ModeLogic_mode_logic_rlt_state_1_current_event: svar_chart_CruiseController_ModeLogic_mode_logic_rlt_state_1_current_event,
      svar_chart_CruiseController_ModeLogic_mode_logic_begin_state_outports_setDesiredSpeed: svar_chart_CruiseController_ModeLogic_mode_logic_begin_state_outports_setDesiredSpeed,
      svar_chart_CruiseController_ModeLogic_mode_logic_begin_state_outports_mode: svar_chart_CruiseController_ModeLogic_mode_logic_begin_state_outports_mode,
      svar_chart_CruiseController_ModeLogic_mode_logic_begin_state_states___root: svar_chart_CruiseController_ModeLogic_mode_logic_begin_state_states___root,
      svar_chart_CruiseController_ModeLogic_mode_logic_rlt_evtInitStep: svar_chart_CruiseController_ModeLogic_mode_logic_rlt_evtInitStep,
      svar_rlt_enter_CruiseController_ModeLogic_mode_logic_rlt_state_2_outports_mode: svar_rlt_enter_CruiseController_ModeLogic_mode_logic_rlt_state_2_outports_mode,
      svar_rlt_enter_CruiseController_ModeLogic_mode_logic_rlt_state_2_states___root: svar_rlt_enter_CruiseController_ModeLogic_mode_logic_rlt_state_2_states___root,
      svar_rlt_enter_CruiseController_ModeLogic_mode_logic_rltCheckEntryStateConsistency_0: svar_rlt_enter_CruiseController_ModeLogic_mode_logic_rltCheckEntryStateConsistency_0,
      svar_rlt_eval_CruiseController_ModeLogic_mode_logic_rlt_state_7_outports_setDesiredSpeed: svar_rlt_eval_CruiseController_ModeLogic_mode_logic_rlt_state_7_outports_setDesiredSpeed,
      svar_rlt_eval_CruiseController_ModeLogic_mode_logic_rlt_state_7_outports_mode: svar_rlt_eval_CruiseController_ModeLogic_mode_logic_rlt_state_7_outports_mode,
      svar_rlt_eval_CruiseController_ModeLogic_mode_logic_rlt_state_7_states___root: svar_rlt_eval_CruiseController_ModeLogic_mode_logic_rlt_state_7_states___root,
      svar_rlt_eval_CruiseController_ModeLogic_mode_logic_rlt_state_4_outports_mode: svar_rlt_eval_CruiseController_ModeLogic_mode_logic_rlt_state_4_outports_mode,
      svar_rlt_eval_CruiseController_ModeLogic_mode_logic_rlt_state_4_states___root: svar_rlt_eval_CruiseController_ModeLogic_mode_logic_rlt_state_4_states___root,
      svar_rlt_eval_CruiseController_ModeLogic_mode_logic_rlt_state_3_states___root: svar_rlt_eval_CruiseController_ModeLogic_mode_logic_rlt_state_3_states___root,
      svar_rlt_eval_CruiseController_ModeLogic_mode_logic_rlt_complete_1: svar_rlt_eval_CruiseController_ModeLogic_mode_logic_rlt_complete_1,
      svar_rlt_eval_CruiseController_ModeLogic_mode_logic_rlt_fired_1: svar_rlt_eval_CruiseController_ModeLogic_mode_logic_rlt_fired_1,
      svar_rlt_eval_CruiseController_ModeLogic_mode_logic_rlt_state_2_outports_mode: svar_rlt_eval_CruiseController_ModeLogic_mode_logic_rlt_state_2_outports_mode,
      svar_rlt_eval_CruiseController_ModeLogic_mode_logic_rlt_state_2_states___root: svar_rlt_eval_CruiseController_ModeLogic_mode_logic_rlt_state_2_states___root,
      svar_rlt_eval_CruiseController_ModeLogic_mode_logic_rlt_state_1_outports_setDesiredSpeed: svar_rlt_eval_CruiseController_ModeLogic_mode_logic_rlt_state_1_outports_setDesiredSpeed,
      svar_rlt_eval_CruiseController_ModeLogic_mode_logic_rlt_state_1_states___root: svar_rlt_eval_CruiseController_ModeLogic_mode_logic_rlt_state_1_states___root,
      svar_rlt_eval_CruiseController_ModeLogic_mode_logic_rlt_fired_0: svar_rlt_eval_CruiseController_ModeLogic_mode_logic_rlt_fired_0,
      svar_rlt_exit_CruiseController_ModeLogic_mode_logic_On_rlt_state_5_outports_setDesiredSpeed: svar_rlt_exit_CruiseController_ModeLogic_mode_logic_On_rlt_state_5_outports_setDesiredSpeed,
      svar_rlt_exit_CruiseController_ModeLogic_mode_logic_On_rlt_state_5_states___root: svar_rlt_exit_CruiseController_ModeLogic_mode_logic_On_rlt_state_5_states___root,
      svar_rlt_exit_CruiseController_ModeLogic_mode_logic_On_rlt_state_3_states___root: svar_rlt_exit_CruiseController_ModeLogic_mode_logic_On_rlt_state_3_states___root,
      svar_rlt_exit_CruiseController_ModeLogic_mode_logic_On_rlt_state_2_states___root: svar_rlt_exit_CruiseController_ModeLogic_mode_logic_On_rlt_state_2_states___root,
      svar_rlt_exit_CruiseController_ModeLogic_mode_logic_On_rlt_state_1_states___root: svar_rlt_exit_CruiseController_ModeLogic_mode_logic_On_rlt_state_1_states___root,
      svar_rlt_exit_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_5_outports_setDesiredSpeed: svar_rlt_exit_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_5_outports_setDesiredSpeed,
      svar_rlt_exit_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_5_states___root: svar_rlt_exit_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_5_states___root,
      svar_rlt_exit_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_3_states___root: svar_rlt_exit_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_3_states___root,
      svar_rlt_exit_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_2_states___root: svar_rlt_exit_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_2_states___root,
      svar_rlt_exit_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_1_states___root: svar_rlt_exit_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_1_states___root,
      svar_rlt_exit_CruiseController_ModeLogic_mode_logic_On_Active_Maintain_rlt_state_3_outports_setDesiredSpeed: svar_rlt_exit_CruiseController_ModeLogic_mode_logic_On_Active_Maintain_rlt_state_3_outports_setDesiredSpeed,
      svar_rlt_exit_CruiseController_ModeLogic_mode_logic_On_Active_Maintain_rlt_state_3_states___root: svar_rlt_exit_CruiseController_ModeLogic_mode_logic_On_Active_Maintain_rlt_state_3_states___root,
      svar_rlt_exit_CruiseController_ModeLogic_mode_logic_On_Active_Increase_rlt_state_2_states___root: svar_rlt_exit_CruiseController_ModeLogic_mode_logic_On_Active_Increase_rlt_state_2_states___root,
      svar_rlt_exit_CruiseController_ModeLogic_mode_logic_On_Active_Decrease_rlt_state_2_states___root: svar_rlt_exit_CruiseController_ModeLogic_mode_logic_On_Active_Decrease_rlt_state_2_states___root,
      svar_rlt_exit_CruiseController_ModeLogic_mode_logic_On_Init_rlt_state_2_states___root: svar_rlt_exit_CruiseController_ModeLogic_mode_logic_On_Init_rlt_state_2_states___root,
      svar_rlt_exit_CruiseController_ModeLogic_mode_logic_On_Inactive_rlt_state_2_states___root: svar_rlt_exit_CruiseController_ModeLogic_mode_logic_On_Inactive_rlt_state_2_states___root,
      svar_rlt_enter_CruiseController_ModeLogic_mode_logic_Off_rlt_state_3_outports_mode: svar_rlt_enter_CruiseController_ModeLogic_mode_logic_Off_rlt_state_3_outports_mode,
      svar_rlt_enter_CruiseController_ModeLogic_mode_logic_Off_rlt_state_3_states___root: svar_rlt_enter_CruiseController_ModeLogic_mode_logic_Off_rlt_state_3_states___root,
      svar_rlt_exit_CruiseController_ModeLogic_mode_logic_Off_rlt_state_2_states___root: svar_rlt_exit_CruiseController_ModeLogic_mode_logic_Off_rlt_state_2_states___root,
      svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_rlt_state_3_outports_mode: svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_rlt_state_3_outports_mode,
      svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_rlt_state_3_states___root: svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_rlt_state_3_states___root,
      svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_rltCheckEntryStateConsistency_0: svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_rltCheckEntryStateConsistency_0,
      svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_rlt_fired_0: svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_rlt_fired_0,
      svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_rlt_state_1_states___root: svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_rlt_state_1_states___root,
      svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_Init_rlt_state_3_outports_mode: svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_Init_rlt_state_3_outports_mode,
      svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_Init_rlt_state_3_states___root: svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_Init_rlt_state_3_states___root,
      svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_state_14_outports_setDesiredSpeed: svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_state_14_outports_setDesiredSpeed,
      svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_state_14_outports_mode: svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_state_14_outports_mode,
      svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_state_14_states___root: svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_state_14_states___root,
      svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_state_10_outports_mode: svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_state_10_outports_mode,
      svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_state_10_states___root: svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_state_10_states___root,
      svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_state_9_outports_setDesiredSpeed: svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_state_9_outports_setDesiredSpeed,
      svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_state_8_states___root: svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_state_8_states___root,
      svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_complete_3: svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_complete_3,
      svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_fired_3: svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_fired_3,
      svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_state_7_outports_mode: svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_state_7_outports_mode,
      svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_state_7_states___root: svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_state_7_states___root,
      svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_state_6_states___root: svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_state_6_states___root,
      svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_complete_2: svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_complete_2,
      svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_fired_2: svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_fired_2,
      svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_state_5_outports_mode: svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_state_5_outports_mode,
      svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_state_5_states___root: svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_state_5_states___root,
      svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_state_4_outports_setDesiredSpeed: svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_state_4_outports_setDesiredSpeed,
      svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_state_3_states___root: svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_state_3_states___root,
      svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_complete_1: svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_complete_1,
      svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_fired_1: svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_fired_1,
      svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_state_2_outports_mode: svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_state_2_outports_mode,
      svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_state_2_states___root: svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_state_2_states___root,
      svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_state_1_outports_setDesiredSpeed: svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_state_1_outports_setDesiredSpeed,
      svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_state_1_states___root: svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_state_1_states___root,
      svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_fired_0: svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_fired_0,
      svar_rlt_exit_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_5_outports_setDesiredSpeed1: svar_rlt_exit_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_5_outports_setDesiredSpeed1,
      svar_rlt_exit_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_5_states___root1: svar_rlt_exit_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_5_states___root1,
      svar_rlt_exit_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_3_states___root1: svar_rlt_exit_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_3_states___root1,
      svar_rlt_exit_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_2_states___root1: svar_rlt_exit_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_2_states___root1,
      svar_rlt_exit_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_1_states___root1: svar_rlt_exit_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_1_states___root1,
      svar_rlt_exit_CruiseController_ModeLogic_mode_logic_On_Active_Maintain_rlt_state_3_outports_setDesiredSpeed4: svar_rlt_exit_CruiseController_ModeLogic_mode_logic_On_Active_Maintain_rlt_state_3_outports_setDesiredSpeed4,
      svar_rlt_exit_CruiseController_ModeLogic_mode_logic_On_Active_Maintain_rlt_state_3_states___root4: svar_rlt_exit_CruiseController_ModeLogic_mode_logic_On_Active_Maintain_rlt_state_3_states___root4,
      svar_rlt_exit_CruiseController_ModeLogic_mode_logic_On_Active_Increase_rlt_state_2_states___root2: svar_rlt_exit_CruiseController_ModeLogic_mode_logic_On_Active_Increase_rlt_state_2_states___root2,
      svar_rlt_exit_CruiseController_ModeLogic_mode_logic_On_Active_Decrease_rlt_state_2_states___root2: svar_rlt_exit_CruiseController_ModeLogic_mode_logic_On_Active_Decrease_rlt_state_2_states___root2,
      svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_Inactive_rlt_state_3_outports_mode: svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_Inactive_rlt_state_3_outports_mode,
      svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_Inactive_rlt_state_3_states___root: svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_Inactive_rlt_state_3_states___root,
      svar_rlt_exit_CruiseController_ModeLogic_mode_logic_On_Inactive_rlt_state_2_states___root2: svar_rlt_exit_CruiseController_ModeLogic_mode_logic_On_Inactive_rlt_state_2_states___root2,
      svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_3_outports_mode: svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_3_outports_mode,
      svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_3_states___root: svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_3_states___root,
      svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_rltCheckEntryStateConsistency_0: svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_rltCheckEntryStateConsistency_0,
      svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_rlt_fired_0: svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_rlt_fired_0,
      svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_1_states___root: svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_1_states___root,
      svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_Maintain_rlt_state_3_outports_mode: svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_Maintain_rlt_state_3_outports_mode,
      svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_Maintain_rlt_state_3_states___root: svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_Maintain_rlt_state_3_states___root,
      svar_rlt_exit_CruiseController_ModeLogic_mode_logic_On_Inactive_rlt_state_2_states___root1: svar_rlt_exit_CruiseController_ModeLogic_mode_logic_On_Inactive_rlt_state_2_states___root1,
      svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_3_outports_mode1: svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_3_outports_mode1,
      svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_3_states___root1: svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_3_states___root1,
      svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_rltCheckEntryStateConsistency_01: svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_rltCheckEntryStateConsistency_01,
      svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_rlt_fired_01: svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_rlt_fired_01,
      svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_1_states___root1: svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_1_states___root1,
      svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_Maintain_rlt_state_3_outports_mode1: svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_Maintain_rlt_state_3_outports_mode1,
      svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_Maintain_rlt_state_3_states___root1: svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_Maintain_rlt_state_3_states___root1,
      svar_rlt_exit_CruiseController_ModeLogic_mode_logic_On_Init_rlt_state_2_states___root1: svar_rlt_exit_CruiseController_ModeLogic_mode_logic_On_Init_rlt_state_2_states___root1,
      svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_3_outports_mode2: svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_3_outports_mode2,
      svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_3_states___root2: svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_3_states___root2,
      svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_rltCheckEntryStateConsistency_02: svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_rltCheckEntryStateConsistency_02,
      svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_rlt_fired_02: svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_rlt_fired_02,
      svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_1_states___root2: svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_1_states___root2,
      svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_Maintain_rlt_state_3_outports_mode2: svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_Maintain_rlt_state_3_outports_mode2,
      svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_Maintain_rlt_state_3_states___root2: svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_Maintain_rlt_state_3_states___root2,
      svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_15_outports_setDesiredSpeed: svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_15_outports_setDesiredSpeed,
      svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_15_outports_mode: svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_15_outports_mode,
      svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_15_states___root: svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_15_states___root,
      svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_10_states___root: svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_10_states___root,
      svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_complete_4: svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_complete_4,
      svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_fired_4: svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_fired_4,
      svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_9_outports_mode: svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_9_outports_mode,
      svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_9_states___root: svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_9_states___root,
      svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_8_states___root: svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_8_states___root,
      svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_complete_3: svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_complete_3,
      svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_fired_3: svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_fired_3,
      svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_7_outports_mode: svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_7_outports_mode,
      svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_7_states___root: svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_7_states___root,
      svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_6_outports_setDesiredSpeed: svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_6_outports_setDesiredSpeed,
      svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_6_states___root: svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_6_states___root,
      svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_complete_2: svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_complete_2,
      svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_fired_2: svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_fired_2,
      svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_5_outports_mode: svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_5_outports_mode,
      svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_5_states___root: svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_5_states___root,
      svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_4_outports_setDesiredSpeed: svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_4_outports_setDesiredSpeed,
      svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_4_states___root: svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_4_states___root,
      svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_complete_1: svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_complete_1,
      svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_fired_1: svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_fired_1,
      svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_3_outports_mode: svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_3_outports_mode,
      svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_3_states___root: svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_3_states___root,
      svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_2_outports_setDesiredSpeed: svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_2_outports_setDesiredSpeed,
      svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_1_outports_setDesiredSpeed: svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_1_outports_setDesiredSpeed,
      svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_1_states___root: svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_1_states___root,
      svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_fired_0: svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_fired_0,
      svar_rlt_exit_CruiseController_ModeLogic_mode_logic_On_Active_Maintain_rlt_state_3_outports_setDesiredSpeed3: svar_rlt_exit_CruiseController_ModeLogic_mode_logic_On_Active_Maintain_rlt_state_3_outports_setDesiredSpeed3,
      svar_rlt_exit_CruiseController_ModeLogic_mode_logic_On_Active_Maintain_rlt_state_3_states___root3: svar_rlt_exit_CruiseController_ModeLogic_mode_logic_On_Active_Maintain_rlt_state_3_states___root3,
      svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_Maintain_rlt_state_3_outports_mode3: svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_Maintain_rlt_state_3_outports_mode3,
      svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_Maintain_rlt_state_3_states___root3: svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_Maintain_rlt_state_3_states___root3,
      svar_rlt_exit_CruiseController_ModeLogic_mode_logic_On_Active_Maintain_rlt_state_3_outports_setDesiredSpeed1: svar_rlt_exit_CruiseController_ModeLogic_mode_logic_On_Active_Maintain_rlt_state_3_outports_setDesiredSpeed1,
      svar_rlt_exit_CruiseController_ModeLogic_mode_logic_On_Active_Maintain_rlt_state_3_states___root1: svar_rlt_exit_CruiseController_ModeLogic_mode_logic_On_Active_Maintain_rlt_state_3_states___root1,
      svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_Increase_rlt_state_3_outports_mode: svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_Increase_rlt_state_3_outports_mode,
      svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_Increase_rlt_state_3_states___root: svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_Increase_rlt_state_3_states___root,
      svar_rlt_exit_CruiseController_ModeLogic_mode_logic_On_Active_Maintain_rlt_state_3_outports_setDesiredSpeed2: svar_rlt_exit_CruiseController_ModeLogic_mode_logic_On_Active_Maintain_rlt_state_3_outports_setDesiredSpeed2,
      svar_rlt_exit_CruiseController_ModeLogic_mode_logic_On_Active_Maintain_rlt_state_3_states___root2: svar_rlt_exit_CruiseController_ModeLogic_mode_logic_On_Active_Maintain_rlt_state_3_states___root2,
      svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_Decrease_rlt_state_3_outports_mode: svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_Decrease_rlt_state_3_outports_mode,
      svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_Decrease_rlt_state_3_states___root: svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_Decrease_rlt_state_3_states___root,
      svar_rlt_exit_CruiseController_ModeLogic_mode_logic_On_Active_Decrease_rlt_state_2_states___root1: svar_rlt_exit_CruiseController_ModeLogic_mode_logic_On_Active_Decrease_rlt_state_2_states___root1,
      svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_Maintain_rlt_state_3_outports_mode11: svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_Maintain_rlt_state_3_outports_mode11,
      svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_Maintain_rlt_state_3_states___root11: svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_Maintain_rlt_state_3_states___root11,
      svar_rlt_exit_CruiseController_ModeLogic_mode_logic_On_Active_Increase_rlt_state_2_states___root1: svar_rlt_exit_CruiseController_ModeLogic_mode_logic_On_Active_Increase_rlt_state_2_states___root1,
      svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_Maintain_rlt_state_3_outports_mode21: svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_Maintain_rlt_state_3_outports_mode21,
      svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_Maintain_rlt_state_3_states___root21: svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_Maintain_rlt_state_3_states___root21,
      svar_newDesiredSpeed: svar_newDesiredSpeed,
      svar_rlt_condact_cruise_controller_CruiseController_SetDesiredSpeed_computeDecreaseInDesiredSpeed_rlt_init_step: svar_rlt_condact_cruise_controller_CruiseController_SetDesiredSpeed_computeDecreaseInDesiredSpeed_rlt_init_step,
      svar_rlt_condact_cruise_controller_CruiseController_SetDesiredSpeed_computeDecreaseInDesiredSpeed_rlt_clock: svar_rlt_condact_cruise_controller_CruiseController_SetDesiredSpeed_computeDecreaseInDesiredSpeed_rlt_clock,
      svar_newDesiredSpeed1: svar_newDesiredSpeed1,
      svar_rlt_condact_cruise_controller_CruiseController_SetDesiredSpeed_computeIncreaseInDesiredSpeed_rlt_init_step: svar_rlt_condact_cruise_controller_CruiseController_SetDesiredSpeed_computeIncreaseInDesiredSpeed_rlt_init_step,
      svar_rlt_condact_cruise_controller_CruiseController_SetDesiredSpeed_computeIncreaseInDesiredSpeed_rlt_clock: svar_rlt_condact_cruise_controller_CruiseController_SetDesiredSpeed_computeIncreaseInDesiredSpeed_rlt_clock,
      
      // |===| Calls.
      
    } )
  }

  fn next(&mut self, input: Self::Input) -> Result<(), ()> {
    // |===| Retrieving inputs.
    let svar_onOff = input.0 ;
    let svar_decelSet = input.1 ;
    let svar_accelResume = input.2 ;
    let svar_cancel = input.3 ;
    let svar_brakePedal = input.4 ;
    let svar_carGear = input.5 ;
    let svar_carSpeed = input.6 ;
    let svar_validInputs = input.7 ;
    
    // |===| Computing next state.
    let svar_cruise_controller_CruiseController_SP8_pre_MAINTAIN_pre_MNT = self.svar_cruise_controller_CruiseController_SP8_pre_MAINTAIN__MAINTAIN____MAINT ;
    let svar_cruise_controller_CruiseController_ModeLogic_safetyCondition_Relational_Operator1 = (svar_carSpeed >= 15f32) ;
    let svar_cruise_controller_CruiseController_SP8_pre_realval_pre_x_ = self.svar_cruise_controller_CruiseController_SP10_pre_realval_x ;
    let svar_cruise_controller_CruiseController_SetThrottle_cruiseThrottlePrev = self.svar_cruiseThrottle ;
    let svar_cruise_controller_CruiseController_SP10_pre_INCREASE_pre_INC = self.svar_cruise_controller_CruiseController_SetDesiredSpeed_isModeIncrease___isModeIncrease ;
    let svar_cruise_controller_CruiseController_SP9_pre_DECREASE_pre_DEC = self.svar_cruise_controller_CruiseController_SetDesiredSpeed_isModeDecrease___isModeDecrease ;
    let svar_cruise_controller_CruiseController_SetDesiredSpeed_prev_desiredSpeed = self.svar_desiredSpeed ;
    let svar_cruise_controller_CruiseController_SP5_pre_realval_pre_x_ = self.svar_cruise_controller_CruiseController_SP5_pre_realval_x ;
    let svar_rlt_condact_cruise_controller_CruiseController_SetDesiredSpeed_computeDecreaseInDesiredSpeed_rlt_init_step = ( if self.svar_rlt_condact_cruise_controller_CruiseController_SetDesiredSpeed_computeDecreaseInDesiredSpeed_rlt_clock { false } else {self.svar_rlt_condact_cruise_controller_CruiseController_SetDesiredSpeed_computeDecreaseInDesiredSpeed_rlt_init_step } ) ;
    let svar_rlt_condact_cruise_controller_CruiseController_SetDesiredSpeed_computeIncreaseInDesiredSpeed_rlt_init_step = ( if self.svar_rlt_condact_cruise_controller_CruiseController_SetDesiredSpeed_computeIncreaseInDesiredSpeed_rlt_clock { false } else {self.svar_rlt_condact_cruise_controller_CruiseController_SetDesiredSpeed_computeIncreaseInDesiredSpeed_rlt_init_step } ) ;
    let svar_chart_CruiseController_ModeLogic_mode_logic_rlt_evtInitStep = ( if self.svar_SP3c { false } else {self.svar_chart_CruiseController_ModeLogic_mode_logic_rlt_evtInitStep } ) ;
    let svar_cruise_controller_CruiseController_ModeLogic_setEvent_InBool = svar_decelSet ;
    let svar_cruise_controller_CruiseController_ModeLogic_resumeEvent_Unit_Delay = self.svar_cruise_controller_CruiseController_ModeLogic_resumeEvent_InBool ;
    let svar_cruise_controller_CruiseController_ModeLogic_setEvent_Unit_Delay = self.svar_cruise_controller_CruiseController_ModeLogic_setEvent_InBool ;
    let svar_cruise_controller_CruiseController_ModeLogic_resumeEvent_InBool = svar_accelResume ;
    let svar_chart_CruiseController_ModeLogic_mode_logic_begin_state_outports_setDesiredSpeed = self.svar_chart_CruiseController_ModeLogic_mode_logic_setDesiredSpeed ;
    let svar_cruise_controller_CruiseController_ModeLogic_safetyCondition_Relational_Operator = (svar_carGear == 3) ;
    let svar_SP3c = true ;
    let svar_chart_CruiseController_ModeLogic_mode_logic_rlt_state_1_current_event = ( if svar_SP3c { 1 } else {0 } ) ;
    let svar_chart_CruiseController_ModeLogic_mode_logic_begin_state_outports_mode = self.svar_mode ;
    let svar_chart_CruiseController_ModeLogic_mode_logic_begin_state_states___root = self.svar_chart_CruiseController_ModeLogic_mode_logic_final_state_states___root ;
    let svar_cruise_controller_CruiseController_ModeLogic_DelayOnsetDecel_Bounded_Count_Unit_Delay = self.svar_cruise_controller_CruiseController_ModeLogic_DelayOnsetDecel_Bounded_Count_Out ;
    let svar_cruise_controller_CruiseController_ModeLogic_DelayOnsetAccel_Bounded_Count_Unit_Delay = self.svar_cruise_controller_CruiseController_ModeLogic_DelayOnsetAccel_Bounded_Count_Out ;
    let svar_rlt_exit_CruiseController_ModeLogic_mode_logic_On_Active_Maintain_rlt_state_3_states___root = ( if (svar_chart_CruiseController_ModeLogic_mode_logic_begin_state_states___root == 4) { 3 } else {svar_chart_CruiseController_ModeLogic_mode_logic_begin_state_states___root } ) ;
    let svar_cruise_controller_CruiseController_ModeLogic_DelayOnsetDecel_Bounded_Count_Add = (svar_cruise_controller_CruiseController_ModeLogic_DelayOnsetDecel_Bounded_Count_Unit_Delay + 1) ;
    let svar_rlt_eval_CruiseController_ModeLogic_mode_logic_rlt_fired_0 = (((svar_chart_CruiseController_ModeLogic_mode_logic_begin_state_states___root >= 2) & (svar_chart_CruiseController_ModeLogic_mode_logic_begin_state_states___root <= 8)) & (! svar_onOff)) ;
    let svar_rlt_enter_CruiseController_ModeLogic_mode_logic_rlt_state_2_outports_mode = ( if (! (svar_chart_CruiseController_ModeLogic_mode_logic_begin_state_states___root == 1)) { 1 } else {svar_chart_CruiseController_ModeLogic_mode_logic_begin_state_outports_mode } ) ;
    let svar_cruise_controller_CruiseController_ModeLogic_setEvent_Out = ((! svar_cruise_controller_CruiseController_ModeLogic_setEvent_Unit_Delay) & svar_cruise_controller_CruiseController_ModeLogic_setEvent_InBool) ;
    let svar_cruise_controller_CruiseController_ModeLogic_resumeEvent_Out = ((! svar_cruise_controller_CruiseController_ModeLogic_resumeEvent_Unit_Delay) & svar_cruise_controller_CruiseController_ModeLogic_resumeEvent_InBool) ;
    let svar_cruise_controller_CruiseController_ModeLogic_safetyCondition1 = (((((! svar_cancel) & (! svar_brakePedal)) & svar_cruise_controller_CruiseController_ModeLogic_safetyCondition_Relational_Operator) & svar_cruise_controller_CruiseController_ModeLogic_safetyCondition_Relational_Operator1) & svar_validInputs) ;
    let svar_rlt_enter_CruiseController_ModeLogic_mode_logic_rlt_state_2_states___root = ( if (! (svar_chart_CruiseController_ModeLogic_mode_logic_begin_state_states___root == 1)) { 1 } else {svar_chart_CruiseController_ModeLogic_mode_logic_begin_state_states___root } ) ;
    let svar_cruise_controller_CruiseController_ModeLogic_DelayOnsetAccel_Bounded_Count_Add = (svar_cruise_controller_CruiseController_ModeLogic_DelayOnsetAccel_Bounded_Count_Unit_Delay + 1) ;
    let svar_rlt_exit_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_1_states___root = ( if ((svar_chart_CruiseController_ModeLogic_mode_logic_begin_state_states___root >= 3) & (svar_chart_CruiseController_ModeLogic_mode_logic_begin_state_states___root <= 6)) { svar_rlt_exit_CruiseController_ModeLogic_mode_logic_On_Active_Maintain_rlt_state_3_states___root } else {svar_chart_CruiseController_ModeLogic_mode_logic_begin_state_states___root } ) ;
    let svar_rlt_enter_CruiseController_ModeLogic_mode_logic_rltCheckEntryStateConsistency_0 = ((svar_rlt_enter_CruiseController_ModeLogic_mode_logic_rlt_state_2_states___root == 1) | ((svar_rlt_enter_CruiseController_ModeLogic_mode_logic_rlt_state_2_states___root >= 2) & (svar_rlt_enter_CruiseController_ModeLogic_mode_logic_rlt_state_2_states___root <= 8))) ;
    let svar_rlt_exit_CruiseController_ModeLogic_mode_logic_On_Active_Maintain_rlt_state_3_outports_setDesiredSpeed = ( if (svar_chart_CruiseController_ModeLogic_mode_logic_begin_state_states___root == 4) { false } else {svar_chart_CruiseController_ModeLogic_mode_logic_begin_state_outports_setDesiredSpeed } ) ;
    let svar_subrange_1 = ((0 <= svar_chart_CruiseController_ModeLogic_mode_logic_rlt_state_1_current_event) & (svar_chart_CruiseController_ModeLogic_mode_logic_rlt_state_1_current_event <= 1)) ;
    let svar_rlt_exit_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_5_outports_setDesiredSpeed = ( if ((svar_chart_CruiseController_ModeLogic_mode_logic_begin_state_states___root >= 3) & (svar_chart_CruiseController_ModeLogic_mode_logic_begin_state_states___root <= 6)) { svar_rlt_exit_CruiseController_ModeLogic_mode_logic_On_Active_Maintain_rlt_state_3_outports_setDesiredSpeed } else {svar_chart_CruiseController_ModeLogic_mode_logic_begin_state_outports_setDesiredSpeed } ) ;
    let svar_rlt_exit_CruiseController_ModeLogic_mode_logic_On_Active_Increase_rlt_state_2_states___root = ( if (svar_rlt_exit_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_1_states___root == 5) { 3 } else {svar_rlt_exit_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_1_states___root } ) ;
    let svar_rlt_exit_CruiseController_ModeLogic_mode_logic_On_rlt_state_5_outports_setDesiredSpeed = ( if ((svar_chart_CruiseController_ModeLogic_mode_logic_begin_state_states___root >= 2) & (svar_chart_CruiseController_ModeLogic_mode_logic_begin_state_states___root <= 8)) { svar_rlt_exit_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_5_outports_setDesiredSpeed } else {svar_chart_CruiseController_ModeLogic_mode_logic_begin_state_outports_setDesiredSpeed } ) ;
    let svar_cruise_controller_CruiseController_ModeLogic_DelayOnsetDecel_Bounded_Count_Switch = ( if svar_decelSet { svar_cruise_controller_CruiseController_ModeLogic_DelayOnsetDecel_Bounded_Count_Add } else {0 } ) ;
    let svar_cruise_controller_CruiseController_ModeLogic_DelayOnsetDecel_Bounded_Count_Limit_Enforce_lower_limit = ( if (0 >= svar_cruise_controller_CruiseController_ModeLogic_DelayOnsetDecel_Bounded_Count_Switch) { 0 } else {svar_cruise_controller_CruiseController_ModeLogic_DelayOnsetDecel_Bounded_Count_Switch } ) ;
    let svar_cruise_controller_CruiseController_ModeLogic_DelayOnsetAccel_Bounded_Count_Switch = ( if svar_accelResume { svar_cruise_controller_CruiseController_ModeLogic_DelayOnsetAccel_Bounded_Count_Add } else {0 } ) ;
    let svar_cruise_controller_CruiseController_ModeLogic_DelayOnsetAccel_Bounded_Count_Limit_Enforce_lower_limit = ( if (0 >= svar_cruise_controller_CruiseController_ModeLogic_DelayOnsetAccel_Bounded_Count_Switch) { 0 } else {svar_cruise_controller_CruiseController_ModeLogic_DelayOnsetAccel_Bounded_Count_Switch } ) ;
    let svar_rlt_eval_CruiseController_ModeLogic_mode_logic_rlt_state_1_outports_setDesiredSpeed = ( if svar_rlt_eval_CruiseController_ModeLogic_mode_logic_rlt_fired_0 { svar_rlt_exit_CruiseController_ModeLogic_mode_logic_On_rlt_state_5_outports_setDesiredSpeed } else {svar_chart_CruiseController_ModeLogic_mode_logic_begin_state_outports_setDesiredSpeed } ) ;
    let svar_cruise_controller_CruiseController_ModeLogic_DelayOnsetAccel_Bounded_Count_Out = ( if (svar_cruise_controller_CruiseController_ModeLogic_DelayOnsetAccel_Bounded_Count_Limit_Enforce_lower_limit <= 20) { svar_cruise_controller_CruiseController_ModeLogic_DelayOnsetAccel_Bounded_Count_Limit_Enforce_lower_limit } else {20 } ) ;
    let svar_cruise_controller_CruiseController_ModeLogic_DelayOnsetDecel_Bounded_Count_Out = ( if (svar_cruise_controller_CruiseController_ModeLogic_DelayOnsetDecel_Bounded_Count_Limit_Enforce_lower_limit <= 20) { svar_cruise_controller_CruiseController_ModeLogic_DelayOnsetDecel_Bounded_Count_Limit_Enforce_lower_limit } else {20 } ) ;
    let svar_rlt_exit_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_2_states___root = ( if ((svar_chart_CruiseController_ModeLogic_mode_logic_begin_state_states___root >= 3) & (svar_chart_CruiseController_ModeLogic_mode_logic_begin_state_states___root <= 6)) { svar_rlt_exit_CruiseController_ModeLogic_mode_logic_On_Active_Increase_rlt_state_2_states___root } else {svar_rlt_exit_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_1_states___root } ) ;
    let svar_rlt_exit_CruiseController_ModeLogic_mode_logic_On_Active_Decrease_rlt_state_2_states___root = ( if (svar_rlt_exit_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_2_states___root == 6) { 3 } else {svar_rlt_exit_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_2_states___root } ) ;
    let svar_cruise_controller_CruiseController_ModeLogic_DelayOnsetDecel_Out = (svar_cruise_controller_CruiseController_ModeLogic_DelayOnsetDecel_Bounded_Count_Out == 20) ;
    let svar_rlt_exit_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_3_states___root = ( if ((svar_chart_CruiseController_ModeLogic_mode_logic_begin_state_states___root >= 3) & (svar_chart_CruiseController_ModeLogic_mode_logic_begin_state_states___root <= 6)) { svar_rlt_exit_CruiseController_ModeLogic_mode_logic_On_Active_Decrease_rlt_state_2_states___root } else {svar_rlt_exit_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_2_states___root } ) ;
    let svar_cruise_controller_CruiseController_ModeLogic_DelayOnsetAccel_Out = (svar_cruise_controller_CruiseController_ModeLogic_DelayOnsetAccel_Bounded_Count_Out == 20) ;
    let svar_rlt_exit_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_5_states___root = ( if ((svar_chart_CruiseController_ModeLogic_mode_logic_begin_state_states___root >= 3) & (svar_chart_CruiseController_ModeLogic_mode_logic_begin_state_states___root <= 6)) { 2 } else {svar_rlt_exit_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_3_states___root } ) ;
    let svar_rlt_exit_CruiseController_ModeLogic_mode_logic_On_rlt_state_1_states___root = ( if ((svar_chart_CruiseController_ModeLogic_mode_logic_begin_state_states___root >= 2) & (svar_chart_CruiseController_ModeLogic_mode_logic_begin_state_states___root <= 8)) { svar_rlt_exit_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_5_states___root } else {svar_chart_CruiseController_ModeLogic_mode_logic_begin_state_states___root } ) ;
    let svar_rlt_exit_CruiseController_ModeLogic_mode_logic_On_Init_rlt_state_2_states___root = ( if (svar_rlt_exit_CruiseController_ModeLogic_mode_logic_On_rlt_state_1_states___root == 7) { 2 } else {svar_rlt_exit_CruiseController_ModeLogic_mode_logic_On_rlt_state_1_states___root } ) ;
    let svar_rlt_exit_CruiseController_ModeLogic_mode_logic_On_rlt_state_2_states___root = ( if ((svar_chart_CruiseController_ModeLogic_mode_logic_begin_state_states___root >= 2) & (svar_chart_CruiseController_ModeLogic_mode_logic_begin_state_states___root <= 8)) { svar_rlt_exit_CruiseController_ModeLogic_mode_logic_On_Init_rlt_state_2_states___root } else {svar_rlt_exit_CruiseController_ModeLogic_mode_logic_On_rlt_state_1_states___root } ) ;
    let svar_rlt_exit_CruiseController_ModeLogic_mode_logic_On_Inactive_rlt_state_2_states___root = ( if (svar_rlt_exit_CruiseController_ModeLogic_mode_logic_On_rlt_state_2_states___root == 8) { 2 } else {svar_rlt_exit_CruiseController_ModeLogic_mode_logic_On_rlt_state_2_states___root } ) ;
    let svar_rlt_exit_CruiseController_ModeLogic_mode_logic_On_rlt_state_3_states___root = ( if ((svar_chart_CruiseController_ModeLogic_mode_logic_begin_state_states___root >= 2) & (svar_chart_CruiseController_ModeLogic_mode_logic_begin_state_states___root <= 8)) { svar_rlt_exit_CruiseController_ModeLogic_mode_logic_On_Inactive_rlt_state_2_states___root } else {svar_rlt_exit_CruiseController_ModeLogic_mode_logic_On_rlt_state_2_states___root } ) ;
    let svar_rlt_exit_CruiseController_ModeLogic_mode_logic_On_rlt_state_5_states___root = ( if ((svar_chart_CruiseController_ModeLogic_mode_logic_begin_state_states___root >= 2) & (svar_chart_CruiseController_ModeLogic_mode_logic_begin_state_states___root <= 8)) { 0 } else {svar_rlt_exit_CruiseController_ModeLogic_mode_logic_On_rlt_state_3_states___root } ) ;
    let svar_rlt_eval_CruiseController_ModeLogic_mode_logic_rlt_state_1_states___root = ( if svar_rlt_eval_CruiseController_ModeLogic_mode_logic_rlt_fired_0 { svar_rlt_exit_CruiseController_ModeLogic_mode_logic_On_rlt_state_5_states___root } else {svar_chart_CruiseController_ModeLogic_mode_logic_begin_state_states___root } ) ;
    let svar_rlt_enter_CruiseController_ModeLogic_mode_logic_Off_rlt_state_3_outports_mode = ( if (! (svar_rlt_eval_CruiseController_ModeLogic_mode_logic_rlt_state_1_states___root == 1)) { 1 } else {svar_chart_CruiseController_ModeLogic_mode_logic_begin_state_outports_mode } ) ;
    let svar_rlt_eval_CruiseController_ModeLogic_mode_logic_rlt_state_2_outports_mode = ( if svar_rlt_eval_CruiseController_ModeLogic_mode_logic_rlt_fired_0 { svar_rlt_enter_CruiseController_ModeLogic_mode_logic_Off_rlt_state_3_outports_mode } else {svar_chart_CruiseController_ModeLogic_mode_logic_begin_state_outports_mode } ) ;
    let svar_rlt_enter_CruiseController_ModeLogic_mode_logic_Off_rlt_state_3_states___root = ( if (! (svar_rlt_eval_CruiseController_ModeLogic_mode_logic_rlt_state_1_states___root == 1)) { 1 } else {svar_rlt_eval_CruiseController_ModeLogic_mode_logic_rlt_state_1_states___root } ) ;
    let svar_rlt_eval_CruiseController_ModeLogic_mode_logic_rlt_state_2_states___root = ( if svar_rlt_eval_CruiseController_ModeLogic_mode_logic_rlt_fired_0 { svar_rlt_enter_CruiseController_ModeLogic_mode_logic_Off_rlt_state_3_states___root } else {svar_rlt_eval_CruiseController_ModeLogic_mode_logic_rlt_state_1_states___root } ) ;
    let svar_rlt_eval_CruiseController_ModeLogic_mode_logic_rlt_fired_1 = ((svar_rlt_eval_CruiseController_ModeLogic_mode_logic_rlt_state_2_states___root == 1) & (svar_onOff & (! svar_rlt_eval_CruiseController_ModeLogic_mode_logic_rlt_fired_0))) ;
    let svar_rlt_eval_CruiseController_ModeLogic_mode_logic_rlt_complete_1 = (svar_rlt_eval_CruiseController_ModeLogic_mode_logic_rlt_fired_1 | svar_rlt_eval_CruiseController_ModeLogic_mode_logic_rlt_fired_0) ;
    let svar_rlt_exit_CruiseController_ModeLogic_mode_logic_Off_rlt_state_2_states___root = ( if (svar_rlt_eval_CruiseController_ModeLogic_mode_logic_rlt_state_2_states___root == 1) { 0 } else {svar_rlt_eval_CruiseController_ModeLogic_mode_logic_rlt_state_2_states___root } ) ;
    let svar_rlt_eval_CruiseController_ModeLogic_mode_logic_rlt_state_3_states___root = ( if svar_rlt_eval_CruiseController_ModeLogic_mode_logic_rlt_fired_1 { svar_rlt_exit_CruiseController_ModeLogic_mode_logic_Off_rlt_state_2_states___root } else {svar_rlt_eval_CruiseController_ModeLogic_mode_logic_rlt_state_2_states___root } ) ;
    let svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_rlt_state_1_states___root = ( if (! ((svar_rlt_eval_CruiseController_ModeLogic_mode_logic_rlt_state_3_states___root >= 2) & (svar_rlt_eval_CruiseController_ModeLogic_mode_logic_rlt_state_3_states___root <= 8))) { 2 } else {svar_rlt_eval_CruiseController_ModeLogic_mode_logic_rlt_state_3_states___root } ) ;
    let svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_rlt_fired_0 = ((! ((svar_rlt_eval_CruiseController_ModeLogic_mode_logic_rlt_state_3_states___root >= 2) & (svar_rlt_eval_CruiseController_ModeLogic_mode_logic_rlt_state_3_states___root <= 8))) & ((svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_rlt_state_1_states___root >= 2) & (svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_rlt_state_1_states___root <= 8))) ;
    let svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_Init_rlt_state_3_states___root = ( if (! (svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_rlt_state_1_states___root == 7)) { 7 } else {svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_rlt_state_1_states___root } ) ;
    let svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_Init_rlt_state_3_outports_mode = ( if (! (svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_rlt_state_1_states___root == 7)) { 2 } else {svar_rlt_eval_CruiseController_ModeLogic_mode_logic_rlt_state_2_outports_mode } ) ;
    let svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_rlt_state_3_states___root = ( if svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_rlt_fired_0 { svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_Init_rlt_state_3_states___root } else {svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_rlt_state_1_states___root } ) ;
    let svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_rlt_state_3_outports_mode = ( if svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_rlt_fired_0 { svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_Init_rlt_state_3_outports_mode } else {svar_rlt_eval_CruiseController_ModeLogic_mode_logic_rlt_state_2_outports_mode } ) ;
    let svar_rlt_eval_CruiseController_ModeLogic_mode_logic_rlt_state_4_outports_mode = ( if svar_rlt_eval_CruiseController_ModeLogic_mode_logic_rlt_fired_1 { svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_rlt_state_3_outports_mode } else {svar_rlt_eval_CruiseController_ModeLogic_mode_logic_rlt_state_2_outports_mode } ) ;
    let svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_rltCheckEntryStateConsistency_0 = (((svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_rlt_state_3_states___root >= 3) & (svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_rlt_state_3_states___root <= 6)) | ((svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_rlt_state_3_states___root == 7) | (svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_rlt_state_3_states___root == 8))) ;
    let svar_rlt_eval_CruiseController_ModeLogic_mode_logic_rlt_state_4_states___root = ( if svar_rlt_eval_CruiseController_ModeLogic_mode_logic_rlt_fired_1 { svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_rlt_state_3_states___root } else {svar_rlt_eval_CruiseController_ModeLogic_mode_logic_rlt_state_3_states___root } ) ;
    let svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_fired_0 = (((svar_rlt_eval_CruiseController_ModeLogic_mode_logic_rlt_state_4_states___root >= 3) & (svar_rlt_eval_CruiseController_ModeLogic_mode_logic_rlt_state_4_states___root <= 6)) & (! svar_cruise_controller_CruiseController_ModeLogic_safetyCondition1)) ;
    let svar_rlt_exit_CruiseController_ModeLogic_mode_logic_On_Active_Maintain_rlt_state_3_outports_setDesiredSpeed4 = ( if (svar_rlt_eval_CruiseController_ModeLogic_mode_logic_rlt_state_4_states___root == 4) { false } else {svar_rlt_eval_CruiseController_ModeLogic_mode_logic_rlt_state_1_outports_setDesiredSpeed } ) ;
    let svar_rlt_exit_CruiseController_ModeLogic_mode_logic_On_Active_Maintain_rlt_state_3_states___root4 = ( if (svar_rlt_eval_CruiseController_ModeLogic_mode_logic_rlt_state_4_states___root == 4) { 3 } else {svar_rlt_eval_CruiseController_ModeLogic_mode_logic_rlt_state_4_states___root } ) ;
    let svar_rlt_exit_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_1_states___root1 = ( if ((svar_rlt_eval_CruiseController_ModeLogic_mode_logic_rlt_state_4_states___root >= 3) & (svar_rlt_eval_CruiseController_ModeLogic_mode_logic_rlt_state_4_states___root <= 6)) { svar_rlt_exit_CruiseController_ModeLogic_mode_logic_On_Active_Maintain_rlt_state_3_states___root4 } else {svar_rlt_eval_CruiseController_ModeLogic_mode_logic_rlt_state_4_states___root } ) ;
    let svar_rlt_exit_CruiseController_ModeLogic_mode_logic_On_Active_Increase_rlt_state_2_states___root2 = ( if (svar_rlt_exit_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_1_states___root1 == 5) { 3 } else {svar_rlt_exit_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_1_states___root1 } ) ;
    let svar_rlt_exit_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_5_outports_setDesiredSpeed1 = ( if ((svar_rlt_eval_CruiseController_ModeLogic_mode_logic_rlt_state_4_states___root >= 3) & (svar_rlt_eval_CruiseController_ModeLogic_mode_logic_rlt_state_4_states___root <= 6)) { svar_rlt_exit_CruiseController_ModeLogic_mode_logic_On_Active_Maintain_rlt_state_3_outports_setDesiredSpeed4 } else {svar_rlt_eval_CruiseController_ModeLogic_mode_logic_rlt_state_1_outports_setDesiredSpeed } ) ;
    let svar_rlt_exit_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_2_states___root1 = ( if ((svar_rlt_eval_CruiseController_ModeLogic_mode_logic_rlt_state_4_states___root >= 3) & (svar_rlt_eval_CruiseController_ModeLogic_mode_logic_rlt_state_4_states___root <= 6)) { svar_rlt_exit_CruiseController_ModeLogic_mode_logic_On_Active_Increase_rlt_state_2_states___root2 } else {svar_rlt_exit_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_1_states___root1 } ) ;
    let svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_state_1_outports_setDesiredSpeed = ( if svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_fired_0 { svar_rlt_exit_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_5_outports_setDesiredSpeed1 } else {svar_rlt_eval_CruiseController_ModeLogic_mode_logic_rlt_state_1_outports_setDesiredSpeed } ) ;
    let svar_rlt_exit_CruiseController_ModeLogic_mode_logic_On_Active_Decrease_rlt_state_2_states___root2 = ( if (svar_rlt_exit_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_2_states___root1 == 6) { 3 } else {svar_rlt_exit_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_2_states___root1 } ) ;
    let svar_rlt_exit_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_3_states___root1 = ( if ((svar_rlt_eval_CruiseController_ModeLogic_mode_logic_rlt_state_4_states___root >= 3) & (svar_rlt_eval_CruiseController_ModeLogic_mode_logic_rlt_state_4_states___root <= 6)) { svar_rlt_exit_CruiseController_ModeLogic_mode_logic_On_Active_Decrease_rlt_state_2_states___root2 } else {svar_rlt_exit_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_2_states___root1 } ) ;
    let svar_rlt_exit_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_5_states___root1 = ( if ((svar_rlt_eval_CruiseController_ModeLogic_mode_logic_rlt_state_4_states___root >= 3) & (svar_rlt_eval_CruiseController_ModeLogic_mode_logic_rlt_state_4_states___root <= 6)) { 2 } else {svar_rlt_exit_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_3_states___root1 } ) ;
    let svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_state_1_states___root = ( if svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_fired_0 { svar_rlt_exit_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_5_states___root1 } else {svar_rlt_eval_CruiseController_ModeLogic_mode_logic_rlt_state_4_states___root } ) ;
    let svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_Inactive_rlt_state_3_states___root = ( if (! (svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_state_1_states___root == 8)) { 8 } else {svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_state_1_states___root } ) ;
    let svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_state_2_states___root = ( if svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_fired_0 { svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_Inactive_rlt_state_3_states___root } else {svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_state_1_states___root } ) ;
    let svar_rlt_exit_CruiseController_ModeLogic_mode_logic_On_Inactive_rlt_state_2_states___root2 = ( if (svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_state_2_states___root == 8) { 2 } else {svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_state_2_states___root } ) ;
    let svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_Inactive_rlt_state_3_outports_mode = ( if (! (svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_state_1_states___root == 8)) { 3 } else {svar_rlt_eval_CruiseController_ModeLogic_mode_logic_rlt_state_4_outports_mode } ) ;
    let svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_fired_1 = ((svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_state_2_states___root == 8) & (((! (( if (! svar_cruise_controller_CruiseController_ModeLogic_setEvent_Out) { 0 } else {1 } ) == 0)) & (! (( if (! svar_cruise_controller_CruiseController_ModeLogic_safetyCondition1) { 0 } else {1 } ) == 0))) & (! svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_fired_0))) ;
    let svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_complete_1 = (svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_fired_1 | svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_fired_0) ;
    let svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_state_4_outports_setDesiredSpeed = ( if svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_fired_1 { true } else {svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_state_1_outports_setDesiredSpeed } ) ;
    let svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_state_3_states___root = ( if svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_fired_1 { svar_rlt_exit_CruiseController_ModeLogic_mode_logic_On_Inactive_rlt_state_2_states___root2 } else {svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_state_2_states___root } ) ;
    let svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_state_2_outports_mode = ( if svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_fired_0 { svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_Inactive_rlt_state_3_outports_mode } else {svar_rlt_eval_CruiseController_ModeLogic_mode_logic_rlt_state_4_outports_mode } ) ;
    let svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_1_states___root = ( if (! ((svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_state_3_states___root >= 3) & (svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_state_3_states___root <= 6))) { 3 } else {svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_state_3_states___root } ) ;
    let svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_rlt_fired_0 = ((! ((svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_state_3_states___root >= 3) & (svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_state_3_states___root <= 6))) & ((svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_1_states___root >= 3) & (svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_1_states___root <= 6))) ;
    let svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_Maintain_rlt_state_3_outports_mode = ( if (! (svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_1_states___root == 4)) { 4 } else {svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_state_2_outports_mode } ) ;
    let svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_Maintain_rlt_state_3_states___root = ( if (! (svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_1_states___root == 4)) { 4 } else {svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_1_states___root } ) ;
    let svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_3_states___root = ( if svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_rlt_fired_0 { svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_Maintain_rlt_state_3_states___root } else {svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_1_states___root } ) ;
    let svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_state_5_states___root = ( if svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_fired_1 { svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_3_states___root } else {svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_state_3_states___root } ) ;
    let svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_3_outports_mode = ( if svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_rlt_fired_0 { svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_Maintain_rlt_state_3_outports_mode } else {svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_state_2_outports_mode } ) ;
    let svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_rltCheckEntryStateConsistency_0 = ((svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_3_states___root == 4) | ((svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_3_states___root == 5) | (svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_3_states___root == 6))) ;
    let svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_fired_2 = ((svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_state_5_states___root == 8) & (((! (( if (! svar_cruise_controller_CruiseController_ModeLogic_resumeEvent_Out) { 0 } else {1 } ) == 0)) & (! (( if (! svar_cruise_controller_CruiseController_ModeLogic_safetyCondition1) { 0 } else {1 } ) == 0))) & (! svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_complete_1))) ;
    let svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_complete_2 = (svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_fired_2 | svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_complete_1) ;
    let svar_rlt_exit_CruiseController_ModeLogic_mode_logic_On_Inactive_rlt_state_2_states___root1 = ( if (svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_state_5_states___root == 8) { 2 } else {svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_state_5_states___root } ) ;
    let svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_state_5_outports_mode = ( if svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_fired_1 { svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_3_outports_mode } else {svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_state_2_outports_mode } ) ;
    let svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_state_6_states___root = ( if svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_fired_2 { svar_rlt_exit_CruiseController_ModeLogic_mode_logic_On_Inactive_rlt_state_2_states___root1 } else {svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_state_5_states___root } ) ;
    let svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_1_states___root1 = ( if (! ((svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_state_6_states___root >= 3) & (svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_state_6_states___root <= 6))) { 3 } else {svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_state_6_states___root } ) ;
    let svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_rlt_fired_01 = ((! ((svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_state_6_states___root >= 3) & (svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_state_6_states___root <= 6))) & ((svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_1_states___root1 >= 3) & (svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_1_states___root1 <= 6))) ;
    let svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_Maintain_rlt_state_3_states___root1 = ( if (! (svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_1_states___root1 == 4)) { 4 } else {svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_1_states___root1 } ) ;
    let svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_Maintain_rlt_state_3_outports_mode1 = ( if (! (svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_1_states___root1 == 4)) { 4 } else {svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_state_5_outports_mode } ) ;
    let svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_3_states___root1 = ( if svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_rlt_fired_01 { svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_Maintain_rlt_state_3_states___root1 } else {svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_1_states___root1 } ) ;
    let svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_state_7_states___root = ( if svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_fired_2 { svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_3_states___root1 } else {svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_state_6_states___root } ) ;
    let svar_rlt_exit_CruiseController_ModeLogic_mode_logic_On_Init_rlt_state_2_states___root1 = ( if (svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_state_7_states___root == 7) { 2 } else {svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_state_7_states___root } ) ;
    let svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_rltCheckEntryStateConsistency_01 = ((svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_3_states___root1 == 4) | ((svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_3_states___root1 == 5) | (svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_3_states___root1 == 6))) ;
    let svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_3_outports_mode1 = ( if svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_rlt_fired_01 { svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_Maintain_rlt_state_3_outports_mode1 } else {svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_state_5_outports_mode } ) ;
    let svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_fired_3 = ((svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_state_7_states___root == 7) & (((! (( if (! svar_cruise_controller_CruiseController_ModeLogic_setEvent_Out) { 0 } else {1 } ) == 0)) & (! (( if (! svar_cruise_controller_CruiseController_ModeLogic_safetyCondition1) { 0 } else {1 } ) == 0))) & (! svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_complete_2))) ;
    let svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_complete_3 = (svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_fired_3 | svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_complete_2) ;
    let svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_state_8_states___root = ( if svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_fired_3 { svar_rlt_exit_CruiseController_ModeLogic_mode_logic_On_Init_rlt_state_2_states___root1 } else {svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_state_7_states___root } ) ;
    let svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_state_7_outports_mode = ( if svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_fired_2 { svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_3_outports_mode1 } else {svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_state_5_outports_mode } ) ;
    let svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_1_states___root2 = ( if (! ((svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_state_8_states___root >= 3) & (svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_state_8_states___root <= 6))) { 3 } else {svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_state_8_states___root } ) ;
    let svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_rlt_fired_02 = ((! ((svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_state_8_states___root >= 3) & (svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_state_8_states___root <= 6))) & ((svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_1_states___root2 >= 3) & (svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_1_states___root2 <= 6))) ;
    let svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_state_9_outports_setDesiredSpeed = ( if svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_fired_3 { true } else {svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_state_4_outports_setDesiredSpeed } ) ;
    let svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_Maintain_rlt_state_3_states___root2 = ( if (! (svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_1_states___root2 == 4)) { 4 } else {svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_1_states___root2 } ) ;
    let svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_Maintain_rlt_state_3_outports_mode2 = ( if (! (svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_1_states___root2 == 4)) { 4 } else {svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_state_7_outports_mode } ) ;
    let svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_3_states___root2 = ( if svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_rlt_fired_02 { svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_Maintain_rlt_state_3_states___root2 } else {svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_1_states___root2 } ) ;
    let svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_3_outports_mode2 = ( if svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_rlt_fired_02 { svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_Maintain_rlt_state_3_outports_mode2 } else {svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_state_7_outports_mode } ) ;
    let svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_state_10_outports_mode = ( if svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_fired_3 { svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_3_outports_mode2 } else {svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_state_7_outports_mode } ) ;
    let svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_state_10_states___root = ( if svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_fired_3 { svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_3_states___root2 } else {svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_state_8_states___root } ) ;
    let svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_rltCheckEntryStateConsistency_02 = ((svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_3_states___root2 == 4) | ((svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_3_states___root2 == 5) | (svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_3_states___root2 == 6))) ;
    let svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_fired_0 = ((svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_state_10_states___root == 4) & (! (( if (! svar_cruise_controller_CruiseController_ModeLogic_setEvent_Out) { 0 } else {1 } ) == 0))) ;
    let svar_rlt_exit_CruiseController_ModeLogic_mode_logic_On_Active_Maintain_rlt_state_3_states___root3 = ( if (svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_state_10_states___root == 4) { 3 } else {svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_state_10_states___root } ) ;
    let svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_1_states___root = ( if svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_fired_0 { svar_rlt_exit_CruiseController_ModeLogic_mode_logic_On_Active_Maintain_rlt_state_3_states___root3 } else {svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_state_10_states___root } ) ;
    let svar_rlt_exit_CruiseController_ModeLogic_mode_logic_On_Active_Maintain_rlt_state_3_outports_setDesiredSpeed3 = ( if (svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_state_10_states___root == 4) { false } else {svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_state_9_outports_setDesiredSpeed } ) ;
    let svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_Maintain_rlt_state_3_outports_mode3 = ( if (! (svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_1_states___root == 4)) { 4 } else {svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_state_10_outports_mode } ) ;
    let svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_3_outports_mode = ( if svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_fired_0 { svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_Maintain_rlt_state_3_outports_mode3 } else {svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_state_10_outports_mode } ) ;
    let svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_Maintain_rlt_state_3_states___root3 = ( if (! (svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_1_states___root == 4)) { 4 } else {svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_1_states___root } ) ;
    let svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_3_states___root = ( if svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_fired_0 { svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_Maintain_rlt_state_3_states___root3 } else {svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_1_states___root } ) ;
    let svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_1_outports_setDesiredSpeed = ( if svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_fired_0 { svar_rlt_exit_CruiseController_ModeLogic_mode_logic_On_Active_Maintain_rlt_state_3_outports_setDesiredSpeed3 } else {svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_state_9_outports_setDesiredSpeed } ) ;
    let svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_fired_1 = ((svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_3_states___root == 4) & ((! (( if (! svar_cruise_controller_CruiseController_ModeLogic_DelayOnsetAccel_Out) { 0 } else {1 } ) == 0)) & (! svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_fired_0))) ;
    let svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_2_outports_setDesiredSpeed = ( if svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_fired_0 { true } else {svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_1_outports_setDesiredSpeed } ) ;
    let svar_rlt_exit_CruiseController_ModeLogic_mode_logic_On_Active_Maintain_rlt_state_3_states___root1 = ( if (svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_3_states___root == 4) { 3 } else {svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_3_states___root } ) ;
    let svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_complete_1 = (svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_fired_1 | svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_fired_0) ;
    let svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_4_states___root = ( if svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_fired_1 { svar_rlt_exit_CruiseController_ModeLogic_mode_logic_On_Active_Maintain_rlt_state_3_states___root1 } else {svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_3_states___root } ) ;
    let svar_rlt_exit_CruiseController_ModeLogic_mode_logic_On_Active_Maintain_rlt_state_3_outports_setDesiredSpeed1 = ( if (svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_3_states___root == 4) { false } else {svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_2_outports_setDesiredSpeed } ) ;
    let svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_Increase_rlt_state_3_states___root = ( if (! (svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_4_states___root == 5)) { 5 } else {svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_4_states___root } ) ;
    let svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_4_outports_setDesiredSpeed = ( if svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_fired_1 { svar_rlt_exit_CruiseController_ModeLogic_mode_logic_On_Active_Maintain_rlt_state_3_outports_setDesiredSpeed1 } else {svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_2_outports_setDesiredSpeed } ) ;
    let svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_5_states___root = ( if svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_fired_1 { svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_Increase_rlt_state_3_states___root } else {svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_4_states___root } ) ;
    let svar_rlt_exit_CruiseController_ModeLogic_mode_logic_On_Active_Maintain_rlt_state_3_states___root2 = ( if (svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_5_states___root == 4) { 3 } else {svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_5_states___root } ) ;
    let svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_Increase_rlt_state_3_outports_mode = ( if (! (svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_4_states___root == 5)) { 6 } else {svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_3_outports_mode } ) ;
    let svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_5_outports_mode = ( if svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_fired_1 { svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_Increase_rlt_state_3_outports_mode } else {svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_3_outports_mode } ) ;
    let svar_rlt_exit_CruiseController_ModeLogic_mode_logic_On_Active_Maintain_rlt_state_3_outports_setDesiredSpeed2 = ( if (svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_5_states___root == 4) { false } else {svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_4_outports_setDesiredSpeed } ) ;
    let svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_fired_2 = ((svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_5_states___root == 4) & ((! (( if (! svar_cruise_controller_CruiseController_ModeLogic_DelayOnsetDecel_Out) { 0 } else {1 } ) == 0)) & (! svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_complete_1))) ;
    let svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_6_states___root = ( if svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_fired_2 { svar_rlt_exit_CruiseController_ModeLogic_mode_logic_On_Active_Maintain_rlt_state_3_states___root2 } else {svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_5_states___root } ) ;
    let svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_6_outports_setDesiredSpeed = ( if svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_fired_2 { svar_rlt_exit_CruiseController_ModeLogic_mode_logic_On_Active_Maintain_rlt_state_3_outports_setDesiredSpeed2 } else {svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_4_outports_setDesiredSpeed } ) ;
    let svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_Decrease_rlt_state_3_outports_mode = ( if (! (svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_6_states___root == 6)) { 5 } else {svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_5_outports_mode } ) ;
    let svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_complete_2 = (svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_fired_2 | svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_complete_1) ;
    let svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_Decrease_rlt_state_3_states___root = ( if (! (svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_6_states___root == 6)) { 6 } else {svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_6_states___root } ) ;
    let svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_7_states___root = ( if svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_fired_2 { svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_Decrease_rlt_state_3_states___root } else {svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_6_states___root } ) ;
    let svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_7_outports_mode = ( if svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_fired_2 { svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_Decrease_rlt_state_3_outports_mode } else {svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_5_outports_mode } ) ;
    let svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_fired_3 = ((svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_7_states___root == 6) & ((! (( if (! (! svar_cruise_controller_CruiseController_ModeLogic_DelayOnsetDecel_Out)) { 0 } else {1 } ) == 0)) & (! svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_complete_2))) ;
    let svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_complete_3 = (svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_fired_3 | svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_complete_2) ;
    let svar_rlt_exit_CruiseController_ModeLogic_mode_logic_On_Active_Decrease_rlt_state_2_states___root1 = ( if (svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_7_states___root == 6) { 3 } else {svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_7_states___root } ) ;
    let svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_8_states___root = ( if svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_fired_3 { svar_rlt_exit_CruiseController_ModeLogic_mode_logic_On_Active_Decrease_rlt_state_2_states___root1 } else {svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_7_states___root } ) ;
    let svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_Maintain_rlt_state_3_states___root11 = ( if (! (svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_8_states___root == 4)) { 4 } else {svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_8_states___root } ) ;
    let svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_9_states___root = ( if svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_fired_3 { svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_Maintain_rlt_state_3_states___root11 } else {svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_8_states___root } ) ;
    let svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_fired_4 = ((svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_9_states___root == 5) & ((! (( if (! (! svar_cruise_controller_CruiseController_ModeLogic_DelayOnsetAccel_Out)) { 0 } else {1 } ) == 0)) & (! svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_complete_3))) ;
    let svar_rlt_exit_CruiseController_ModeLogic_mode_logic_On_Active_Increase_rlt_state_2_states___root1 = ( if (svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_9_states___root == 5) { 3 } else {svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_9_states___root } ) ;
    let svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_complete_4 = (svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_fired_4 | svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_complete_3) ;
    let svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_Maintain_rlt_state_3_outports_mode11 = ( if (! (svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_8_states___root == 4)) { 4 } else {svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_7_outports_mode } ) ;
    let svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_10_states___root = ( if svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_fired_4 { svar_rlt_exit_CruiseController_ModeLogic_mode_logic_On_Active_Increase_rlt_state_2_states___root1 } else {svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_9_states___root } ) ;
    let svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_9_outports_mode = ( if svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_fired_3 { svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_Maintain_rlt_state_3_outports_mode11 } else {svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_7_outports_mode } ) ;
    let svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_Maintain_rlt_state_3_states___root21 = ( if (! (svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_10_states___root == 4)) { 4 } else {svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_10_states___root } ) ;
    let svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_15_states___root = ( if svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_fired_4 { svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_Maintain_rlt_state_3_states___root21 } else {svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_10_states___root } ) ;
    let svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_state_14_states___root = ( if ((! svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_complete_3) & ((svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_state_10_states___root >= 3) & (svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_state_10_states___root <= 6))) { svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_15_states___root } else {svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_state_10_states___root } ) ;
    let svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_Maintain_rlt_state_3_outports_mode21 = ( if (! (svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_10_states___root == 4)) { 4 } else {svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_9_outports_mode } ) ;
    let svar_rlt_eval_CruiseController_ModeLogic_mode_logic_rlt_state_7_states___root = ( if ((! svar_rlt_eval_CruiseController_ModeLogic_mode_logic_rlt_complete_1) & ((svar_rlt_eval_CruiseController_ModeLogic_mode_logic_rlt_state_4_states___root >= 2) & (svar_rlt_eval_CruiseController_ModeLogic_mode_logic_rlt_state_4_states___root <= 8))) { svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_state_14_states___root } else {svar_rlt_eval_CruiseController_ModeLogic_mode_logic_rlt_state_4_states___root } ) ;
    let svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_15_outports_mode = ( if svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_fired_4 { svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_Maintain_rlt_state_3_outports_mode21 } else {svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_9_outports_mode } ) ;
    let svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_15_outports_setDesiredSpeed = ( if ((! svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_complete_4) & (svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_15_states___root == 4)) { false } else {svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_6_outports_setDesiredSpeed } ) ;
    let svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_state_14_outports_setDesiredSpeed = ( if ((! svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_complete_3) & ((svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_state_10_states___root >= 3) & (svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_state_10_states___root <= 6))) { svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_15_outports_setDesiredSpeed } else {svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_state_9_outports_setDesiredSpeed } ) ;
    let svar_chart_CruiseController_ModeLogic_mode_logic_rlt_state_1_states___root = ( if svar_SP3c { ( if svar_chart_CruiseController_ModeLogic_mode_logic_rlt_evtInitStep { svar_rlt_enter_CruiseController_ModeLogic_mode_logic_rlt_state_2_states___root } else {svar_rlt_eval_CruiseController_ModeLogic_mode_logic_rlt_state_7_states___root } ) } else {svar_chart_CruiseController_ModeLogic_mode_logic_begin_state_states___root } ) ;
    let svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_state_14_outports_mode = ( if ((! svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_complete_3) & ((svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_state_10_states___root >= 3) & (svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_state_10_states___root <= 6))) { svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_15_outports_mode } else {svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_state_10_outports_mode } ) ;
    let svar_rlt_eval_CruiseController_ModeLogic_mode_logic_rlt_state_7_outports_setDesiredSpeed = ( if ((! svar_rlt_eval_CruiseController_ModeLogic_mode_logic_rlt_complete_1) & ((svar_rlt_eval_CruiseController_ModeLogic_mode_logic_rlt_state_4_states___root >= 2) & (svar_rlt_eval_CruiseController_ModeLogic_mode_logic_rlt_state_4_states___root <= 8))) { svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_state_14_outports_setDesiredSpeed } else {svar_rlt_eval_CruiseController_ModeLogic_mode_logic_rlt_state_1_outports_setDesiredSpeed } ) ;
    let svar_rlt_eval_CruiseController_ModeLogic_mode_logic_rlt_state_7_outports_mode = ( if ((! svar_rlt_eval_CruiseController_ModeLogic_mode_logic_rlt_complete_1) & ((svar_rlt_eval_CruiseController_ModeLogic_mode_logic_rlt_state_4_states___root >= 2) & (svar_rlt_eval_CruiseController_ModeLogic_mode_logic_rlt_state_4_states___root <= 8))) { svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_state_14_outports_mode } else {svar_rlt_eval_CruiseController_ModeLogic_mode_logic_rlt_state_4_outports_mode } ) ;
    let svar_chart_CruiseController_ModeLogic_mode_logic_setDesiredSpeed = ( if svar_SP3c { ( if svar_chart_CruiseController_ModeLogic_mode_logic_rlt_evtInitStep { svar_chart_CruiseController_ModeLogic_mode_logic_begin_state_outports_setDesiredSpeed } else {svar_rlt_eval_CruiseController_ModeLogic_mode_logic_rlt_state_7_outports_setDesiredSpeed } ) } else {svar_chart_CruiseController_ModeLogic_mode_logic_begin_state_outports_setDesiredSpeed } ) ;
    let svar_chart_CruiseController_ModeLogic_mode_logic_final_state_states___root = svar_chart_CruiseController_ModeLogic_mode_logic_rlt_state_1_states___root ;
    let svar_cruise_controller_CruiseController_SP3a__Const_Eq = (( if (! svar_chart_CruiseController_ModeLogic_mode_logic_setDesiredSpeed) { 0f32 } else {1f32 } ) == 1f32) ;
    let svar_mode = ( if svar_SP3c { ( if svar_chart_CruiseController_ModeLogic_mode_logic_rlt_evtInitStep { svar_rlt_enter_CruiseController_ModeLogic_mode_logic_rlt_state_2_outports_mode } else {svar_rlt_eval_CruiseController_ModeLogic_mode_logic_rlt_state_7_outports_mode } ) } else {svar_chart_CruiseController_ModeLogic_mode_logic_begin_state_outports_mode } ) ;
    let svar_cruise_controller_CruiseController_CP8a_isCruiseActive_Relational_Operator2 = (svar_mode == 5) ;
    let svar_cruise_controller_CruiseController_CP8a_isCruiseActive_Relational_Operator1 = (svar_mode == 4) ;
    let svar_cruise_controller_CruiseController_SetDesiredSpeed_isModeDecrease___isModeDecrease = svar_cruise_controller_CruiseController_CP8a_isCruiseActive_Relational_Operator2 ;
    let svar_cruise_controller_CruiseController_SP8_pre_MAINTAIN__MAINTAIN____MAINT = svar_cruise_controller_CruiseController_CP8a_isCruiseActive_Relational_Operator1 ;
    let svar_rlt_condact_cruise_controller_CruiseController_SetDesiredSpeed_computeDecreaseInDesiredSpeed_rlt_clock = svar_cruise_controller_CruiseController_SetDesiredSpeed_isModeDecrease___isModeDecrease ;
    let svar_cruise_controller_CruiseController_SP4__ACT_INACT__INACTIVE__INACT = (svar_mode == 3) ;
    let svar_cruise_controller_CruiseController_SP3__OFF_INIT__INIT__INIT = (svar_mode == 2) ;
    let svar_cruise_controller_CruiseController_SP3__OFF_INIT__OFF__OFF = (svar_mode == 1) ;
    let svar_cruise_controller_CruiseController_SP3__OFF_INIT__OFF_INIT = (svar_cruise_controller_CruiseController_SP3__OFF_INIT__OFF__OFF | svar_cruise_controller_CruiseController_SP3__OFF_INIT__INIT__INIT) ;
    let svar_SP3a = ((! (! svar_cruise_controller_CruiseController_CP8a_isCruiseActive_Relational_Operator1)) | (! svar_cruise_controller_CruiseController_SP3a__Const_Eq)) ;
    let svar_cruise_controller_CruiseController_CP8a_isCruiseActive_Relational_Operator3 = (svar_mode == 6) ;
    let svar_cruise_controller_CruiseController_SP4__ACT_INACT__ACTIVE__ACT = ((svar_cruise_controller_CruiseController_CP8a_isCruiseActive_Relational_Operator1 | svar_cruise_controller_CruiseController_CP8a_isCruiseActive_Relational_Operator2) | svar_cruise_controller_CruiseController_CP8a_isCruiseActive_Relational_Operator3) ;
    let svar_newDesiredSpeed = ( if (svar_rlt_condact_cruise_controller_CruiseController_SetDesiredSpeed_computeDecreaseInDesiredSpeed_rlt_init_step & (! svar_rlt_condact_cruise_controller_CruiseController_SetDesiredSpeed_computeDecreaseInDesiredSpeed_rlt_clock)) { 0f32 } else {( if svar_rlt_condact_cruise_controller_CruiseController_SetDesiredSpeed_computeDecreaseInDesiredSpeed_rlt_clock { (svar_cruise_controller_CruiseController_SetDesiredSpeed_prev_desiredSpeed - 1f32 / 20f32) } else {self.svar_newDesiredSpeed } ) } ) ;
    let svar_cruise_controller_CruiseController_SetDesiredSpeed_isModeIncrease___isModeIncrease = svar_cruise_controller_CruiseController_CP8a_isCruiseActive_Relational_Operator3 ;
    let svar_cruise_controller_CruiseController_SetDesiredSpeed_InactiveMaintanDesiredSpeed = ( if svar_cruise_controller_CruiseController_SP4__ACT_INACT__INACTIVE__INACT { svar_cruise_controller_CruiseController_SetDesiredSpeed_prev_desiredSpeed } else {0f32 } ) ;
    let svar_cruise_controller_CruiseController_SetDesiredSpeed_MaintainDesiredSpeed = ( if svar_cruise_controller_CruiseController_CP8a_isCruiseActive_Relational_Operator1 { svar_cruise_controller_CruiseController_SetDesiredSpeed_prev_desiredSpeed } else {svar_cruise_controller_CruiseController_SetDesiredSpeed_InactiveMaintanDesiredSpeed } ) ;
    let svar_CP8a = ((! svar_chart_CruiseController_ModeLogic_mode_logic_setDesiredSpeed) | svar_cruise_controller_CruiseController_SP4__ACT_INACT__ACTIVE__ACT) ;
    let svar_cruise_controller_CruiseController_SetDesiredSpeed_DecreaseDesiredSpeed = ( if svar_cruise_controller_CruiseController_SetDesiredSpeed_isModeDecrease___isModeDecrease { svar_newDesiredSpeed } else {svar_cruise_controller_CruiseController_SetDesiredSpeed_MaintainDesiredSpeed } ) ;
    let svar_rlt_condact_cruise_controller_CruiseController_SetDesiredSpeed_computeIncreaseInDesiredSpeed_rlt_clock = svar_cruise_controller_CruiseController_SetDesiredSpeed_isModeIncrease___isModeIncrease ;
    let svar_cruise_controller_CruiseController_SP4__ACT_INACT__ACT_INACT = (svar_cruise_controller_CruiseController_SP4__ACT_INACT__ACTIVE__ACT | svar_cruise_controller_CruiseController_SP4__ACT_INACT__INACTIVE__INACT) ;
    let svar_newDesiredSpeed1 = ( if (svar_rlt_condact_cruise_controller_CruiseController_SetDesiredSpeed_computeIncreaseInDesiredSpeed_rlt_init_step & (! svar_rlt_condact_cruise_controller_CruiseController_SetDesiredSpeed_computeIncreaseInDesiredSpeed_rlt_clock)) { 0f32 } else {( if svar_rlt_condact_cruise_controller_CruiseController_SetDesiredSpeed_computeIncreaseInDesiredSpeed_rlt_clock { (svar_cruise_controller_CruiseController_SetDesiredSpeed_prev_desiredSpeed + 1f32 / 20f32) } else {self.svar_newDesiredSpeed1 } ) } ) ;
    let svar_cruise_controller_CruiseController_SetDesiredSpeed_increasedesiredSpeed = ( if svar_cruise_controller_CruiseController_SetDesiredSpeed_isModeIncrease___isModeIncrease { svar_newDesiredSpeed1 } else {svar_cruise_controller_CruiseController_SetDesiredSpeed_DecreaseDesiredSpeed } ) ;
    let svar_cruise_controller_CruiseController_SP3b__Const2_Eq = (svar_cruise_controller_CruiseController_SetDesiredSpeed_increasedesiredSpeed == 0f32) ;
    let svar_cruise_controller_CruiseController_SetDesiredSpeed_ResetDesiredSpeed = ( if svar_chart_CruiseController_ModeLogic_mode_logic_setDesiredSpeed { svar_carSpeed } else {svar_cruise_controller_CruiseController_SetDesiredSpeed_increasedesiredSpeed } ) ;
    let svar_SP3b = ((! svar_cruise_controller_CruiseController_SP3__OFF_INIT__OFF_INIT) | svar_cruise_controller_CruiseController_SP3b__Const2_Eq) ;
    let svar_desiredSpeed = ( if (svar_cruise_controller_CruiseController_SetDesiredSpeed_ResetDesiredSpeed < 0f32) { 0f32 } else {( if (svar_cruise_controller_CruiseController_SetDesiredSpeed_ResetDesiredSpeed > 100f32) { 100f32 } else {svar_cruise_controller_CruiseController_SetDesiredSpeed_ResetDesiredSpeed } ) } ) ;
    let svar_cruise_controller_CruiseController_SP6_Relational_Operator = (svar_cruise_controller_CruiseController_SP8_pre_realval_pre_x_ <= svar_desiredSpeed) ;
    let svar_cruise_controller_CruiseController_SP10_pre_realval_x = svar_desiredSpeed ;
    let svar_cruise_controller_CruiseController_VRP3__Const1_Eq = (svar_desiredSpeed > 0f32) ;
    let svar_cruise_controller_CruiseController_SP9_Relational_Operator = (svar_cruise_controller_CruiseController_SP8_pre_realval_pre_x_ < svar_desiredSpeed) ;
    let svar_cruise_controller_CruiseController_SP8_Relational_Operator = (svar_cruise_controller_CruiseController_SP8_pre_realval_pre_x_ == svar_desiredSpeed) ;
    let svar_cruise_controller_CruiseController_VRP4_Relational_Operator = (svar_desiredSpeed == svar_cruise_controller_CruiseController_SP8_pre_realval_pre_x_) ;
    let svar_cruise_controller_CruiseController_SP3__Const2_Eq = (svar_desiredSpeed == 0f32) ;
    let svar_cruise_controller_CruiseController_SetThrottle_speedDiff = (svar_desiredSpeed - svar_carSpeed) ;
    let svar_cruise_controller_CruiseController_SP10___Const_Eq = (! (svar_desiredSpeed == 100f32)) ;
    let svar_cruise_controller_CruiseController_VRP4_Relational_Operator1 = (svar_desiredSpeed == svar_carSpeed) ;
    let svar_cruise_controller_CruiseController_VRP2___Const__gte = (svar_desiredSpeed <= 100f32) ;
    let svar_VRP4 = ((svar_cruise_controller_CruiseController_VRP4_Relational_Operator | svar_cruise_controller_CruiseController_SP3__Const2_Eq) | svar_cruise_controller_CruiseController_VRP4_Relational_Operator1) ;
    let svar_cruise_controller_CruiseController_SP7_Relational_Operator = (svar_cruise_controller_CruiseController_SP8_pre_realval_pre_x_ >= svar_desiredSpeed) ;
    let svar_cruise_controller_CruiseController_SP10_Logical_Operator = (svar_cruise_controller_CruiseController_SP10_pre_INCREASE_pre_INC & svar_cruise_controller_CruiseController_SP10___Const_Eq) ;
    let svar_cruise_controller_CruiseController_VRP2___Const_gte = (svar_desiredSpeed >= 0f32) ;
    let svar_cruise_controller_CruiseController_SP11___Const1_gte = (svar_desiredSpeed >= 15f32) ;
    let svar_cruise_controller_CruiseController_VRP3__Const_Eq = (svar_desiredSpeed < 0f32) ;
    let svar_cruise_controller_CruiseController_SP11___Const_Eq = (! (svar_desiredSpeed == 0f32)) ;
    let svar_cruise_controller_CruiseController_SP10_Relational_Operator = (svar_cruise_controller_CruiseController_SP8_pre_realval_pre_x_ > svar_desiredSpeed) ;
    let svar_SP7 = ((! svar_cruise_controller_CruiseController_CP8a_isCruiseActive_Relational_Operator3) | svar_cruise_controller_CruiseController_SP7_Relational_Operator) ;
    let svar_SP10 = ((! svar_cruise_controller_CruiseController_SP10_Logical_Operator) | svar_cruise_controller_CruiseController_SP10_Relational_Operator) ;
    let svar_SP4 = ((! svar_cruise_controller_CruiseController_SP4__ACT_INACT__ACT_INACT) | svar_cruise_controller_CruiseController_SP11___Const1_gte) ;
    let svar_VRP2 = (svar_cruise_controller_CruiseController_VRP2___Const_gte & svar_cruise_controller_CruiseController_VRP2___Const__gte) ;
    let svar_cruise_controller_CruiseController_SetThrottle_thottleDeltaPerSec = (svar_cruise_controller_CruiseController_SetThrottle_speedDiff * 1f32) ;
    let svar_SP3 = ((! svar_cruise_controller_CruiseController_SP3__OFF_INIT__OFF_INIT) | svar_cruise_controller_CruiseController_SP3__Const2_Eq) ;
    let svar_SP11 = ((! svar_cruise_controller_CruiseController_SP11___Const_Eq) | svar_cruise_controller_CruiseController_SP11___Const1_gte) ;
    let svar_cruise_controller_CruiseController_VRP3_Logical_Operator = (svar_cruise_controller_CruiseController_VRP3__Const1_Eq & svar_cruise_controller_CruiseController_VRP3__Const_Eq) ;
    let svar_SP6 = ((! svar_cruise_controller_CruiseController_CP8a_isCruiseActive_Relational_Operator2) | svar_cruise_controller_CruiseController_SP6_Relational_Operator) ;
    let svar_cruise_controller_CruiseController_SP9_Logical_Operator = (svar_cruise_controller_CruiseController_SP9_pre_DECREASE_pre_DEC & svar_cruise_controller_CruiseController_SP11___Const_Eq) ;
    let svar_SP8 = ((! svar_cruise_controller_CruiseController_SP8_pre_MAINTAIN_pre_MNT) | svar_cruise_controller_CruiseController_SP8_Relational_Operator) ;
    let svar_cruise_controller_CruiseController_SetThrottle_throttleDeltaPerSecSat = ( if (svar_cruise_controller_CruiseController_SetThrottle_thottleDeltaPerSec < - 10f32) { - 10f32 } else {( if (svar_cruise_controller_CruiseController_SetThrottle_thottleDeltaPerSec > 10f32) { 10f32 } else {svar_cruise_controller_CruiseController_SetThrottle_thottleDeltaPerSec } ) } ) ;
    let svar_VRP3 = (! svar_cruise_controller_CruiseController_VRP3_Logical_Operator) ;
    let svar_SP9 = ((! svar_cruise_controller_CruiseController_SP9_Logical_Operator) | svar_cruise_controller_CruiseController_SP9_Relational_Operator) ;
    let svar_cruise_controller_CruiseController_SetThrottle_throttleDeltaPerStep = (svar_cruise_controller_CruiseController_SetThrottle_throttleDeltaPerSecSat / 20f32) ;
    let svar_cruise_controller_CruiseController_SetThrottle_cruiseThrottlePrevPlusDelta = (svar_cruise_controller_CruiseController_SetThrottle_throttleDeltaPerStep + svar_cruise_controller_CruiseController_SetThrottle_cruiseThrottlePrev) ;
    let svar_cruise_controller_CruiseController_SetThrottle_cruiseThrottleSat = ( if (svar_cruise_controller_CruiseController_SetThrottle_cruiseThrottlePrevPlusDelta < 0f32) { 0f32 } else {( if (svar_cruise_controller_CruiseController_SetThrottle_cruiseThrottlePrevPlusDelta > 100f32) { 100f32 } else {svar_cruise_controller_CruiseController_SetThrottle_cruiseThrottlePrevPlusDelta } ) } ) ;
    let svar_cruiseThrottle = ( if svar_cruise_controller_CruiseController_SP4__ACT_INACT__ACTIVE__ACT { svar_cruise_controller_CruiseController_SetThrottle_cruiseThrottleSat } else {0f32 } ) ;
    let svar_cruise_controller_CruiseController_VRP1___Const__gte = (svar_cruiseThrottle <= 100f32) ;
    let svar_cruise_controller_CruiseController_SP5_pre_realval_x = svar_cruiseThrottle ;
    let svar_cruise_controller_CruiseController_SP1__Const_Eq = (svar_cruiseThrottle == 0f32) ;
    let svar_cruise_controller_CruiseController_VRP1___Const_gte = (svar_cruiseThrottle >= 0f32) ;
    let svar_cruise_controller_CruiseController_SP5_Relational_Operator = (svar_cruise_controller_CruiseController_SP5_pre_realval_pre_x_ == svar_cruiseThrottle) ;
    let svar_SP5 = ((! svar_cruise_controller_CruiseController_CP8a_isCruiseActive_Relational_Operator1) | svar_cruise_controller_CruiseController_SP5_Relational_Operator) ;
    let svar_SP2 = ((! (! svar_cruise_controller_CruiseController_SP4__ACT_INACT__ACTIVE__ACT)) | svar_cruise_controller_CruiseController_SP1__Const_Eq) ;
    let svar_VRP1 = (svar_cruise_controller_CruiseController_VRP1___Const_gte & svar_cruise_controller_CruiseController_VRP1___Const__gte) ;
    let svar_SP1 = ((! (! svar_cruise_controller_CruiseController_ModeLogic_safetyCondition1)) | svar_cruise_controller_CruiseController_SP1__Const_Eq) ;
    
    // |===| Checking assertions.
    
    
    // |===| Checking assumptions.
    
    
    // |===| Updating next state.
    // |===| Inputs.
    self.svar_onOff = svar_onOff ;
    self.svar_decelSet = svar_decelSet ;
    self.svar_accelResume = svar_accelResume ;
    self.svar_cancel = svar_cancel ;
    self.svar_brakePedal = svar_brakePedal ;
    self.svar_carGear = svar_carGear ;
    self.svar_carSpeed = svar_carSpeed ;
    self.svar_validInputs = svar_validInputs ;
    
    // |===| Outputs.
    self.svar_mode = svar_mode ;
    self.svar_cruiseThrottle = svar_cruiseThrottle ;
    self.svar_desiredSpeed = svar_desiredSpeed ;
    self.svar_VRP1 = svar_VRP1 ;
    self.svar_VRP2 = svar_VRP2 ;
    self.svar_CP8a = svar_CP8a ;
    self.svar_VRP3 = svar_VRP3 ;
    self.svar_VRP4 = svar_VRP4 ;
    self.svar_SP4 = svar_SP4 ;
    self.svar_SP5 = svar_SP5 ;
    self.svar_SP6 = svar_SP6 ;
    self.svar_SP7 = svar_SP7 ;
    self.svar_SP3b = svar_SP3b ;
    self.svar_SP3c = svar_SP3c ;
    self.svar_SP3 = svar_SP3 ;
    self.svar_SP3a = svar_SP3a ;
    self.svar_SP2 = svar_SP2 ;
    self.svar_SP1 = svar_SP1 ;
    self.svar_SP8 = svar_SP8 ;
    self.svar_SP9 = svar_SP9 ;
    self.svar_SP10 = svar_SP10 ;
    self.svar_SP11 = svar_SP11 ;
    
    // |===| Locals.
    self.svar_subrange_1 = svar_subrange_1 ;
    self.svar_cruise_controller_CruiseController_VRP4_Relational_Operator1 = svar_cruise_controller_CruiseController_VRP4_Relational_Operator1 ;
    self.svar_cruise_controller_CruiseController_VRP4_Relational_Operator = svar_cruise_controller_CruiseController_VRP4_Relational_Operator ;
    self.svar_cruise_controller_CruiseController_VRP3_Logical_Operator = svar_cruise_controller_CruiseController_VRP3_Logical_Operator ;
    self.svar_cruise_controller_CruiseController_VRP3__Const1_Eq = svar_cruise_controller_CruiseController_VRP3__Const1_Eq ;
    self.svar_cruise_controller_CruiseController_VRP3__Const_Eq = svar_cruise_controller_CruiseController_VRP3__Const_Eq ;
    self.svar_cruise_controller_CruiseController_VRP2___Const_gte = svar_cruise_controller_CruiseController_VRP2___Const_gte ;
    self.svar_cruise_controller_CruiseController_VRP2___Const__gte = svar_cruise_controller_CruiseController_VRP2___Const__gte ;
    self.svar_cruise_controller_CruiseController_VRP1___Const_gte = svar_cruise_controller_CruiseController_VRP1___Const_gte ;
    self.svar_cruise_controller_CruiseController_VRP1___Const__gte = svar_cruise_controller_CruiseController_VRP1___Const__gte ;
    self.svar_cruise_controller_CruiseController_SetThrottle_throttleDeltaPerStep = svar_cruise_controller_CruiseController_SetThrottle_throttleDeltaPerStep ;
    self.svar_cruise_controller_CruiseController_SetThrottle_throttleDeltaPerSecSat = svar_cruise_controller_CruiseController_SetThrottle_throttleDeltaPerSecSat ;
    self.svar_cruise_controller_CruiseController_SetThrottle_thottleDeltaPerSec = svar_cruise_controller_CruiseController_SetThrottle_thottleDeltaPerSec ;
    self.svar_cruise_controller_CruiseController_SetThrottle_speedDiff = svar_cruise_controller_CruiseController_SetThrottle_speedDiff ;
    self.svar_cruise_controller_CruiseController_SetThrottle_cruiseThrottleSat = svar_cruise_controller_CruiseController_SetThrottle_cruiseThrottleSat ;
    self.svar_cruise_controller_CruiseController_SetThrottle_cruiseThrottlePrevPlusDelta = svar_cruise_controller_CruiseController_SetThrottle_cruiseThrottlePrevPlusDelta ;
    self.svar_cruise_controller_CruiseController_SetThrottle_cruiseThrottlePrev = svar_cruise_controller_CruiseController_SetThrottle_cruiseThrottlePrev ;
    self.svar_cruise_controller_CruiseController_SetDesiredSpeed_increasedesiredSpeed = svar_cruise_controller_CruiseController_SetDesiredSpeed_increasedesiredSpeed ;
    self.svar_cruise_controller_CruiseController_SetDesiredSpeed_prev_desiredSpeed = svar_cruise_controller_CruiseController_SetDesiredSpeed_prev_desiredSpeed ;
    self.svar_cruise_controller_CruiseController_SetDesiredSpeed_ResetDesiredSpeed = svar_cruise_controller_CruiseController_SetDesiredSpeed_ResetDesiredSpeed ;
    self.svar_cruise_controller_CruiseController_SetDesiredSpeed_MaintainDesiredSpeed = svar_cruise_controller_CruiseController_SetDesiredSpeed_MaintainDesiredSpeed ;
    self.svar_cruise_controller_CruiseController_SetDesiredSpeed_InactiveMaintanDesiredSpeed = svar_cruise_controller_CruiseController_SetDesiredSpeed_InactiveMaintanDesiredSpeed ;
    self.svar_cruise_controller_CruiseController_SetDesiredSpeed_DecreaseDesiredSpeed = svar_cruise_controller_CruiseController_SetDesiredSpeed_DecreaseDesiredSpeed ;
    self.svar_cruise_controller_CruiseController_SetDesiredSpeed_isModeIncrease___isModeIncrease = svar_cruise_controller_CruiseController_SetDesiredSpeed_isModeIncrease___isModeIncrease ;
    self.svar_cruise_controller_CruiseController_SetDesiredSpeed_isModeDecrease___isModeDecrease = svar_cruise_controller_CruiseController_SetDesiredSpeed_isModeDecrease___isModeDecrease ;
    self.svar_cruise_controller_CruiseController_SP9_Relational_Operator = svar_cruise_controller_CruiseController_SP9_Relational_Operator ;
    self.svar_cruise_controller_CruiseController_SP9_Logical_Operator = svar_cruise_controller_CruiseController_SP9_Logical_Operator ;
    self.svar_cruise_controller_CruiseController_SP9_pre_DECREASE_pre_DEC = svar_cruise_controller_CruiseController_SP9_pre_DECREASE_pre_DEC ;
    self.svar_cruise_controller_CruiseController_SP8_Relational_Operator = svar_cruise_controller_CruiseController_SP8_Relational_Operator ;
    self.svar_cruise_controller_CruiseController_SP8_pre_realval_pre_x_ = svar_cruise_controller_CruiseController_SP8_pre_realval_pre_x_ ;
    self.svar_cruise_controller_CruiseController_SP8_pre_MAINTAIN_pre_MNT = svar_cruise_controller_CruiseController_SP8_pre_MAINTAIN_pre_MNT ;
    self.svar_cruise_controller_CruiseController_SP8_pre_MAINTAIN__MAINTAIN____MAINT = svar_cruise_controller_CruiseController_SP8_pre_MAINTAIN__MAINTAIN____MAINT ;
    self.svar_cruise_controller_CruiseController_SP7_Relational_Operator = svar_cruise_controller_CruiseController_SP7_Relational_Operator ;
    self.svar_cruise_controller_CruiseController_SP6_Relational_Operator = svar_cruise_controller_CruiseController_SP6_Relational_Operator ;
    self.svar_cruise_controller_CruiseController_SP5_Relational_Operator = svar_cruise_controller_CruiseController_SP5_Relational_Operator ;
    self.svar_cruise_controller_CruiseController_SP5_pre_realval_pre_x_ = svar_cruise_controller_CruiseController_SP5_pre_realval_pre_x_ ;
    self.svar_cruise_controller_CruiseController_SP5_pre_realval_x = svar_cruise_controller_CruiseController_SP5_pre_realval_x ;
    self.svar_cruise_controller_CruiseController_SP4__ACT_INACT__ACT_INACT = svar_cruise_controller_CruiseController_SP4__ACT_INACT__ACT_INACT ;
    self.svar_cruise_controller_CruiseController_SP4__ACT_INACT__INACTIVE__INACT = svar_cruise_controller_CruiseController_SP4__ACT_INACT__INACTIVE__INACT ;
    self.svar_cruise_controller_CruiseController_SP4__ACT_INACT__ACTIVE__ACT = svar_cruise_controller_CruiseController_SP4__ACT_INACT__ACTIVE__ACT ;
    self.svar_cruise_controller_CruiseController_SP3b__Const2_Eq = svar_cruise_controller_CruiseController_SP3b__Const2_Eq ;
    self.svar_cruise_controller_CruiseController_SP3a__Const_Eq = svar_cruise_controller_CruiseController_SP3a__Const_Eq ;
    self.svar_cruise_controller_CruiseController_SP3__OFF_INIT__OFF_INIT = svar_cruise_controller_CruiseController_SP3__OFF_INIT__OFF_INIT ;
    self.svar_cruise_controller_CruiseController_SP3__OFF_INIT__OFF__OFF = svar_cruise_controller_CruiseController_SP3__OFF_INIT__OFF__OFF ;
    self.svar_cruise_controller_CruiseController_SP3__OFF_INIT__INIT__INIT = svar_cruise_controller_CruiseController_SP3__OFF_INIT__INIT__INIT ;
    self.svar_cruise_controller_CruiseController_SP3__Const2_Eq = svar_cruise_controller_CruiseController_SP3__Const2_Eq ;
    self.svar_cruise_controller_CruiseController_SP11___Const1_gte = svar_cruise_controller_CruiseController_SP11___Const1_gte ;
    self.svar_cruise_controller_CruiseController_SP11___Const_Eq = svar_cruise_controller_CruiseController_SP11___Const_Eq ;
    self.svar_cruise_controller_CruiseController_SP10_Relational_Operator = svar_cruise_controller_CruiseController_SP10_Relational_Operator ;
    self.svar_cruise_controller_CruiseController_SP10_Logical_Operator = svar_cruise_controller_CruiseController_SP10_Logical_Operator ;
    self.svar_cruise_controller_CruiseController_SP10_pre_realval_x = svar_cruise_controller_CruiseController_SP10_pre_realval_x ;
    self.svar_cruise_controller_CruiseController_SP10_pre_INCREASE_pre_INC = svar_cruise_controller_CruiseController_SP10_pre_INCREASE_pre_INC ;
    self.svar_cruise_controller_CruiseController_SP10___Const_Eq = svar_cruise_controller_CruiseController_SP10___Const_Eq ;
    self.svar_cruise_controller_CruiseController_SP1__Const_Eq = svar_cruise_controller_CruiseController_SP1__Const_Eq ;
    self.svar_cruise_controller_CruiseController_ModeLogic_safetyCondition1 = svar_cruise_controller_CruiseController_ModeLogic_safetyCondition1 ;
    self.svar_cruise_controller_CruiseController_ModeLogic_setEvent_Out = svar_cruise_controller_CruiseController_ModeLogic_setEvent_Out ;
    self.svar_cruise_controller_CruiseController_ModeLogic_setEvent_Unit_Delay = svar_cruise_controller_CruiseController_ModeLogic_setEvent_Unit_Delay ;
    self.svar_cruise_controller_CruiseController_ModeLogic_setEvent_InBool = svar_cruise_controller_CruiseController_ModeLogic_setEvent_InBool ;
    self.svar_cruise_controller_CruiseController_ModeLogic_safetyCondition_Relational_Operator1 = svar_cruise_controller_CruiseController_ModeLogic_safetyCondition_Relational_Operator1 ;
    self.svar_cruise_controller_CruiseController_ModeLogic_safetyCondition_Relational_Operator = svar_cruise_controller_CruiseController_ModeLogic_safetyCondition_Relational_Operator ;
    self.svar_cruise_controller_CruiseController_ModeLogic_resumeEvent_Out = svar_cruise_controller_CruiseController_ModeLogic_resumeEvent_Out ;
    self.svar_cruise_controller_CruiseController_ModeLogic_resumeEvent_Unit_Delay = svar_cruise_controller_CruiseController_ModeLogic_resumeEvent_Unit_Delay ;
    self.svar_cruise_controller_CruiseController_ModeLogic_resumeEvent_InBool = svar_cruise_controller_CruiseController_ModeLogic_resumeEvent_InBool ;
    self.svar_cruise_controller_CruiseController_ModeLogic_DelayOnsetDecel_Out = svar_cruise_controller_CruiseController_ModeLogic_DelayOnsetDecel_Out ;
    self.svar_cruise_controller_CruiseController_ModeLogic_DelayOnsetDecel_Bounded_Count_Out = svar_cruise_controller_CruiseController_ModeLogic_DelayOnsetDecel_Bounded_Count_Out ;
    self.svar_cruise_controller_CruiseController_ModeLogic_DelayOnsetDecel_Bounded_Count_Unit_Delay = svar_cruise_controller_CruiseController_ModeLogic_DelayOnsetDecel_Bounded_Count_Unit_Delay ;
    self.svar_cruise_controller_CruiseController_ModeLogic_DelayOnsetDecel_Bounded_Count_Switch = svar_cruise_controller_CruiseController_ModeLogic_DelayOnsetDecel_Bounded_Count_Switch ;
    self.svar_cruise_controller_CruiseController_ModeLogic_DelayOnsetDecel_Bounded_Count_Add = svar_cruise_controller_CruiseController_ModeLogic_DelayOnsetDecel_Bounded_Count_Add ;
    self.svar_cruise_controller_CruiseController_ModeLogic_DelayOnsetDecel_Bounded_Count_Limit_Enforce_lower_limit = svar_cruise_controller_CruiseController_ModeLogic_DelayOnsetDecel_Bounded_Count_Limit_Enforce_lower_limit ;
    self.svar_cruise_controller_CruiseController_ModeLogic_DelayOnsetAccel_Out = svar_cruise_controller_CruiseController_ModeLogic_DelayOnsetAccel_Out ;
    self.svar_cruise_controller_CruiseController_ModeLogic_DelayOnsetAccel_Bounded_Count_Out = svar_cruise_controller_CruiseController_ModeLogic_DelayOnsetAccel_Bounded_Count_Out ;
    self.svar_cruise_controller_CruiseController_ModeLogic_DelayOnsetAccel_Bounded_Count_Unit_Delay = svar_cruise_controller_CruiseController_ModeLogic_DelayOnsetAccel_Bounded_Count_Unit_Delay ;
    self.svar_cruise_controller_CruiseController_ModeLogic_DelayOnsetAccel_Bounded_Count_Switch = svar_cruise_controller_CruiseController_ModeLogic_DelayOnsetAccel_Bounded_Count_Switch ;
    self.svar_cruise_controller_CruiseController_ModeLogic_DelayOnsetAccel_Bounded_Count_Add = svar_cruise_controller_CruiseController_ModeLogic_DelayOnsetAccel_Bounded_Count_Add ;
    self.svar_cruise_controller_CruiseController_ModeLogic_DelayOnsetAccel_Bounded_Count_Limit_Enforce_lower_limit = svar_cruise_controller_CruiseController_ModeLogic_DelayOnsetAccel_Bounded_Count_Limit_Enforce_lower_limit ;
    self.svar_cruise_controller_CruiseController_CP8a_isCruiseActive_Relational_Operator3 = svar_cruise_controller_CruiseController_CP8a_isCruiseActive_Relational_Operator3 ;
    self.svar_cruise_controller_CruiseController_CP8a_isCruiseActive_Relational_Operator2 = svar_cruise_controller_CruiseController_CP8a_isCruiseActive_Relational_Operator2 ;
    self.svar_cruise_controller_CruiseController_CP8a_isCruiseActive_Relational_Operator1 = svar_cruise_controller_CruiseController_CP8a_isCruiseActive_Relational_Operator1 ;
    self.svar_chart_CruiseController_ModeLogic_mode_logic_setDesiredSpeed = svar_chart_CruiseController_ModeLogic_mode_logic_setDesiredSpeed ;
    self.svar_chart_CruiseController_ModeLogic_mode_logic_final_state_states___root = svar_chart_CruiseController_ModeLogic_mode_logic_final_state_states___root ;
    self.svar_chart_CruiseController_ModeLogic_mode_logic_rlt_state_1_states___root = svar_chart_CruiseController_ModeLogic_mode_logic_rlt_state_1_states___root ;
    self.svar_chart_CruiseController_ModeLogic_mode_logic_rlt_state_1_current_event = svar_chart_CruiseController_ModeLogic_mode_logic_rlt_state_1_current_event ;
    self.svar_chart_CruiseController_ModeLogic_mode_logic_begin_state_outports_setDesiredSpeed = svar_chart_CruiseController_ModeLogic_mode_logic_begin_state_outports_setDesiredSpeed ;
    self.svar_chart_CruiseController_ModeLogic_mode_logic_begin_state_outports_mode = svar_chart_CruiseController_ModeLogic_mode_logic_begin_state_outports_mode ;
    self.svar_chart_CruiseController_ModeLogic_mode_logic_begin_state_states___root = svar_chart_CruiseController_ModeLogic_mode_logic_begin_state_states___root ;
    self.svar_chart_CruiseController_ModeLogic_mode_logic_rlt_evtInitStep = svar_chart_CruiseController_ModeLogic_mode_logic_rlt_evtInitStep ;
    self.svar_rlt_enter_CruiseController_ModeLogic_mode_logic_rlt_state_2_outports_mode = svar_rlt_enter_CruiseController_ModeLogic_mode_logic_rlt_state_2_outports_mode ;
    self.svar_rlt_enter_CruiseController_ModeLogic_mode_logic_rlt_state_2_states___root = svar_rlt_enter_CruiseController_ModeLogic_mode_logic_rlt_state_2_states___root ;
    self.svar_rlt_enter_CruiseController_ModeLogic_mode_logic_rltCheckEntryStateConsistency_0 = svar_rlt_enter_CruiseController_ModeLogic_mode_logic_rltCheckEntryStateConsistency_0 ;
    self.svar_rlt_eval_CruiseController_ModeLogic_mode_logic_rlt_state_7_outports_setDesiredSpeed = svar_rlt_eval_CruiseController_ModeLogic_mode_logic_rlt_state_7_outports_setDesiredSpeed ;
    self.svar_rlt_eval_CruiseController_ModeLogic_mode_logic_rlt_state_7_outports_mode = svar_rlt_eval_CruiseController_ModeLogic_mode_logic_rlt_state_7_outports_mode ;
    self.svar_rlt_eval_CruiseController_ModeLogic_mode_logic_rlt_state_7_states___root = svar_rlt_eval_CruiseController_ModeLogic_mode_logic_rlt_state_7_states___root ;
    self.svar_rlt_eval_CruiseController_ModeLogic_mode_logic_rlt_state_4_outports_mode = svar_rlt_eval_CruiseController_ModeLogic_mode_logic_rlt_state_4_outports_mode ;
    self.svar_rlt_eval_CruiseController_ModeLogic_mode_logic_rlt_state_4_states___root = svar_rlt_eval_CruiseController_ModeLogic_mode_logic_rlt_state_4_states___root ;
    self.svar_rlt_eval_CruiseController_ModeLogic_mode_logic_rlt_state_3_states___root = svar_rlt_eval_CruiseController_ModeLogic_mode_logic_rlt_state_3_states___root ;
    self.svar_rlt_eval_CruiseController_ModeLogic_mode_logic_rlt_complete_1 = svar_rlt_eval_CruiseController_ModeLogic_mode_logic_rlt_complete_1 ;
    self.svar_rlt_eval_CruiseController_ModeLogic_mode_logic_rlt_fired_1 = svar_rlt_eval_CruiseController_ModeLogic_mode_logic_rlt_fired_1 ;
    self.svar_rlt_eval_CruiseController_ModeLogic_mode_logic_rlt_state_2_outports_mode = svar_rlt_eval_CruiseController_ModeLogic_mode_logic_rlt_state_2_outports_mode ;
    self.svar_rlt_eval_CruiseController_ModeLogic_mode_logic_rlt_state_2_states___root = svar_rlt_eval_CruiseController_ModeLogic_mode_logic_rlt_state_2_states___root ;
    self.svar_rlt_eval_CruiseController_ModeLogic_mode_logic_rlt_state_1_outports_setDesiredSpeed = svar_rlt_eval_CruiseController_ModeLogic_mode_logic_rlt_state_1_outports_setDesiredSpeed ;
    self.svar_rlt_eval_CruiseController_ModeLogic_mode_logic_rlt_state_1_states___root = svar_rlt_eval_CruiseController_ModeLogic_mode_logic_rlt_state_1_states___root ;
    self.svar_rlt_eval_CruiseController_ModeLogic_mode_logic_rlt_fired_0 = svar_rlt_eval_CruiseController_ModeLogic_mode_logic_rlt_fired_0 ;
    self.svar_rlt_exit_CruiseController_ModeLogic_mode_logic_On_rlt_state_5_outports_setDesiredSpeed = svar_rlt_exit_CruiseController_ModeLogic_mode_logic_On_rlt_state_5_outports_setDesiredSpeed ;
    self.svar_rlt_exit_CruiseController_ModeLogic_mode_logic_On_rlt_state_5_states___root = svar_rlt_exit_CruiseController_ModeLogic_mode_logic_On_rlt_state_5_states___root ;
    self.svar_rlt_exit_CruiseController_ModeLogic_mode_logic_On_rlt_state_3_states___root = svar_rlt_exit_CruiseController_ModeLogic_mode_logic_On_rlt_state_3_states___root ;
    self.svar_rlt_exit_CruiseController_ModeLogic_mode_logic_On_rlt_state_2_states___root = svar_rlt_exit_CruiseController_ModeLogic_mode_logic_On_rlt_state_2_states___root ;
    self.svar_rlt_exit_CruiseController_ModeLogic_mode_logic_On_rlt_state_1_states___root = svar_rlt_exit_CruiseController_ModeLogic_mode_logic_On_rlt_state_1_states___root ;
    self.svar_rlt_exit_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_5_outports_setDesiredSpeed = svar_rlt_exit_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_5_outports_setDesiredSpeed ;
    self.svar_rlt_exit_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_5_states___root = svar_rlt_exit_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_5_states___root ;
    self.svar_rlt_exit_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_3_states___root = svar_rlt_exit_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_3_states___root ;
    self.svar_rlt_exit_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_2_states___root = svar_rlt_exit_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_2_states___root ;
    self.svar_rlt_exit_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_1_states___root = svar_rlt_exit_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_1_states___root ;
    self.svar_rlt_exit_CruiseController_ModeLogic_mode_logic_On_Active_Maintain_rlt_state_3_outports_setDesiredSpeed = svar_rlt_exit_CruiseController_ModeLogic_mode_logic_On_Active_Maintain_rlt_state_3_outports_setDesiredSpeed ;
    self.svar_rlt_exit_CruiseController_ModeLogic_mode_logic_On_Active_Maintain_rlt_state_3_states___root = svar_rlt_exit_CruiseController_ModeLogic_mode_logic_On_Active_Maintain_rlt_state_3_states___root ;
    self.svar_rlt_exit_CruiseController_ModeLogic_mode_logic_On_Active_Increase_rlt_state_2_states___root = svar_rlt_exit_CruiseController_ModeLogic_mode_logic_On_Active_Increase_rlt_state_2_states___root ;
    self.svar_rlt_exit_CruiseController_ModeLogic_mode_logic_On_Active_Decrease_rlt_state_2_states___root = svar_rlt_exit_CruiseController_ModeLogic_mode_logic_On_Active_Decrease_rlt_state_2_states___root ;
    self.svar_rlt_exit_CruiseController_ModeLogic_mode_logic_On_Init_rlt_state_2_states___root = svar_rlt_exit_CruiseController_ModeLogic_mode_logic_On_Init_rlt_state_2_states___root ;
    self.svar_rlt_exit_CruiseController_ModeLogic_mode_logic_On_Inactive_rlt_state_2_states___root = svar_rlt_exit_CruiseController_ModeLogic_mode_logic_On_Inactive_rlt_state_2_states___root ;
    self.svar_rlt_enter_CruiseController_ModeLogic_mode_logic_Off_rlt_state_3_outports_mode = svar_rlt_enter_CruiseController_ModeLogic_mode_logic_Off_rlt_state_3_outports_mode ;
    self.svar_rlt_enter_CruiseController_ModeLogic_mode_logic_Off_rlt_state_3_states___root = svar_rlt_enter_CruiseController_ModeLogic_mode_logic_Off_rlt_state_3_states___root ;
    self.svar_rlt_exit_CruiseController_ModeLogic_mode_logic_Off_rlt_state_2_states___root = svar_rlt_exit_CruiseController_ModeLogic_mode_logic_Off_rlt_state_2_states___root ;
    self.svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_rlt_state_3_outports_mode = svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_rlt_state_3_outports_mode ;
    self.svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_rlt_state_3_states___root = svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_rlt_state_3_states___root ;
    self.svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_rltCheckEntryStateConsistency_0 = svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_rltCheckEntryStateConsistency_0 ;
    self.svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_rlt_fired_0 = svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_rlt_fired_0 ;
    self.svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_rlt_state_1_states___root = svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_rlt_state_1_states___root ;
    self.svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_Init_rlt_state_3_outports_mode = svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_Init_rlt_state_3_outports_mode ;
    self.svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_Init_rlt_state_3_states___root = svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_Init_rlt_state_3_states___root ;
    self.svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_state_14_outports_setDesiredSpeed = svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_state_14_outports_setDesiredSpeed ;
    self.svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_state_14_outports_mode = svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_state_14_outports_mode ;
    self.svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_state_14_states___root = svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_state_14_states___root ;
    self.svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_state_10_outports_mode = svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_state_10_outports_mode ;
    self.svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_state_10_states___root = svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_state_10_states___root ;
    self.svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_state_9_outports_setDesiredSpeed = svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_state_9_outports_setDesiredSpeed ;
    self.svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_state_8_states___root = svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_state_8_states___root ;
    self.svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_complete_3 = svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_complete_3 ;
    self.svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_fired_3 = svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_fired_3 ;
    self.svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_state_7_outports_mode = svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_state_7_outports_mode ;
    self.svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_state_7_states___root = svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_state_7_states___root ;
    self.svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_state_6_states___root = svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_state_6_states___root ;
    self.svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_complete_2 = svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_complete_2 ;
    self.svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_fired_2 = svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_fired_2 ;
    self.svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_state_5_outports_mode = svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_state_5_outports_mode ;
    self.svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_state_5_states___root = svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_state_5_states___root ;
    self.svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_state_4_outports_setDesiredSpeed = svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_state_4_outports_setDesiredSpeed ;
    self.svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_state_3_states___root = svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_state_3_states___root ;
    self.svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_complete_1 = svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_complete_1 ;
    self.svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_fired_1 = svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_fired_1 ;
    self.svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_state_2_outports_mode = svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_state_2_outports_mode ;
    self.svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_state_2_states___root = svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_state_2_states___root ;
    self.svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_state_1_outports_setDesiredSpeed = svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_state_1_outports_setDesiredSpeed ;
    self.svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_state_1_states___root = svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_state_1_states___root ;
    self.svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_fired_0 = svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_fired_0 ;
    self.svar_rlt_exit_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_5_outports_setDesiredSpeed1 = svar_rlt_exit_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_5_outports_setDesiredSpeed1 ;
    self.svar_rlt_exit_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_5_states___root1 = svar_rlt_exit_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_5_states___root1 ;
    self.svar_rlt_exit_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_3_states___root1 = svar_rlt_exit_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_3_states___root1 ;
    self.svar_rlt_exit_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_2_states___root1 = svar_rlt_exit_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_2_states___root1 ;
    self.svar_rlt_exit_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_1_states___root1 = svar_rlt_exit_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_1_states___root1 ;
    self.svar_rlt_exit_CruiseController_ModeLogic_mode_logic_On_Active_Maintain_rlt_state_3_outports_setDesiredSpeed4 = svar_rlt_exit_CruiseController_ModeLogic_mode_logic_On_Active_Maintain_rlt_state_3_outports_setDesiredSpeed4 ;
    self.svar_rlt_exit_CruiseController_ModeLogic_mode_logic_On_Active_Maintain_rlt_state_3_states___root4 = svar_rlt_exit_CruiseController_ModeLogic_mode_logic_On_Active_Maintain_rlt_state_3_states___root4 ;
    self.svar_rlt_exit_CruiseController_ModeLogic_mode_logic_On_Active_Increase_rlt_state_2_states___root2 = svar_rlt_exit_CruiseController_ModeLogic_mode_logic_On_Active_Increase_rlt_state_2_states___root2 ;
    self.svar_rlt_exit_CruiseController_ModeLogic_mode_logic_On_Active_Decrease_rlt_state_2_states___root2 = svar_rlt_exit_CruiseController_ModeLogic_mode_logic_On_Active_Decrease_rlt_state_2_states___root2 ;
    self.svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_Inactive_rlt_state_3_outports_mode = svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_Inactive_rlt_state_3_outports_mode ;
    self.svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_Inactive_rlt_state_3_states___root = svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_Inactive_rlt_state_3_states___root ;
    self.svar_rlt_exit_CruiseController_ModeLogic_mode_logic_On_Inactive_rlt_state_2_states___root2 = svar_rlt_exit_CruiseController_ModeLogic_mode_logic_On_Inactive_rlt_state_2_states___root2 ;
    self.svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_3_outports_mode = svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_3_outports_mode ;
    self.svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_3_states___root = svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_3_states___root ;
    self.svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_rltCheckEntryStateConsistency_0 = svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_rltCheckEntryStateConsistency_0 ;
    self.svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_rlt_fired_0 = svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_rlt_fired_0 ;
    self.svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_1_states___root = svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_1_states___root ;
    self.svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_Maintain_rlt_state_3_outports_mode = svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_Maintain_rlt_state_3_outports_mode ;
    self.svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_Maintain_rlt_state_3_states___root = svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_Maintain_rlt_state_3_states___root ;
    self.svar_rlt_exit_CruiseController_ModeLogic_mode_logic_On_Inactive_rlt_state_2_states___root1 = svar_rlt_exit_CruiseController_ModeLogic_mode_logic_On_Inactive_rlt_state_2_states___root1 ;
    self.svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_3_outports_mode1 = svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_3_outports_mode1 ;
    self.svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_3_states___root1 = svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_3_states___root1 ;
    self.svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_rltCheckEntryStateConsistency_01 = svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_rltCheckEntryStateConsistency_01 ;
    self.svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_rlt_fired_01 = svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_rlt_fired_01 ;
    self.svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_1_states___root1 = svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_1_states___root1 ;
    self.svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_Maintain_rlt_state_3_outports_mode1 = svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_Maintain_rlt_state_3_outports_mode1 ;
    self.svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_Maintain_rlt_state_3_states___root1 = svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_Maintain_rlt_state_3_states___root1 ;
    self.svar_rlt_exit_CruiseController_ModeLogic_mode_logic_On_Init_rlt_state_2_states___root1 = svar_rlt_exit_CruiseController_ModeLogic_mode_logic_On_Init_rlt_state_2_states___root1 ;
    self.svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_3_outports_mode2 = svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_3_outports_mode2 ;
    self.svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_3_states___root2 = svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_3_states___root2 ;
    self.svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_rltCheckEntryStateConsistency_02 = svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_rltCheckEntryStateConsistency_02 ;
    self.svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_rlt_fired_02 = svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_rlt_fired_02 ;
    self.svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_1_states___root2 = svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_1_states___root2 ;
    self.svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_Maintain_rlt_state_3_outports_mode2 = svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_Maintain_rlt_state_3_outports_mode2 ;
    self.svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_Maintain_rlt_state_3_states___root2 = svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_Maintain_rlt_state_3_states___root2 ;
    self.svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_15_outports_setDesiredSpeed = svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_15_outports_setDesiredSpeed ;
    self.svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_15_outports_mode = svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_15_outports_mode ;
    self.svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_15_states___root = svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_15_states___root ;
    self.svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_10_states___root = svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_10_states___root ;
    self.svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_complete_4 = svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_complete_4 ;
    self.svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_fired_4 = svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_fired_4 ;
    self.svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_9_outports_mode = svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_9_outports_mode ;
    self.svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_9_states___root = svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_9_states___root ;
    self.svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_8_states___root = svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_8_states___root ;
    self.svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_complete_3 = svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_complete_3 ;
    self.svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_fired_3 = svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_fired_3 ;
    self.svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_7_outports_mode = svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_7_outports_mode ;
    self.svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_7_states___root = svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_7_states___root ;
    self.svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_6_outports_setDesiredSpeed = svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_6_outports_setDesiredSpeed ;
    self.svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_6_states___root = svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_6_states___root ;
    self.svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_complete_2 = svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_complete_2 ;
    self.svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_fired_2 = svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_fired_2 ;
    self.svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_5_outports_mode = svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_5_outports_mode ;
    self.svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_5_states___root = svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_5_states___root ;
    self.svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_4_outports_setDesiredSpeed = svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_4_outports_setDesiredSpeed ;
    self.svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_4_states___root = svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_4_states___root ;
    self.svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_complete_1 = svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_complete_1 ;
    self.svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_fired_1 = svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_fired_1 ;
    self.svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_3_outports_mode = svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_3_outports_mode ;
    self.svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_3_states___root = svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_3_states___root ;
    self.svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_2_outports_setDesiredSpeed = svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_2_outports_setDesiredSpeed ;
    self.svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_1_outports_setDesiredSpeed = svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_1_outports_setDesiredSpeed ;
    self.svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_1_states___root = svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_1_states___root ;
    self.svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_fired_0 = svar_rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_fired_0 ;
    self.svar_rlt_exit_CruiseController_ModeLogic_mode_logic_On_Active_Maintain_rlt_state_3_outports_setDesiredSpeed3 = svar_rlt_exit_CruiseController_ModeLogic_mode_logic_On_Active_Maintain_rlt_state_3_outports_setDesiredSpeed3 ;
    self.svar_rlt_exit_CruiseController_ModeLogic_mode_logic_On_Active_Maintain_rlt_state_3_states___root3 = svar_rlt_exit_CruiseController_ModeLogic_mode_logic_On_Active_Maintain_rlt_state_3_states___root3 ;
    self.svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_Maintain_rlt_state_3_outports_mode3 = svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_Maintain_rlt_state_3_outports_mode3 ;
    self.svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_Maintain_rlt_state_3_states___root3 = svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_Maintain_rlt_state_3_states___root3 ;
    self.svar_rlt_exit_CruiseController_ModeLogic_mode_logic_On_Active_Maintain_rlt_state_3_outports_setDesiredSpeed1 = svar_rlt_exit_CruiseController_ModeLogic_mode_logic_On_Active_Maintain_rlt_state_3_outports_setDesiredSpeed1 ;
    self.svar_rlt_exit_CruiseController_ModeLogic_mode_logic_On_Active_Maintain_rlt_state_3_states___root1 = svar_rlt_exit_CruiseController_ModeLogic_mode_logic_On_Active_Maintain_rlt_state_3_states___root1 ;
    self.svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_Increase_rlt_state_3_outports_mode = svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_Increase_rlt_state_3_outports_mode ;
    self.svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_Increase_rlt_state_3_states___root = svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_Increase_rlt_state_3_states___root ;
    self.svar_rlt_exit_CruiseController_ModeLogic_mode_logic_On_Active_Maintain_rlt_state_3_outports_setDesiredSpeed2 = svar_rlt_exit_CruiseController_ModeLogic_mode_logic_On_Active_Maintain_rlt_state_3_outports_setDesiredSpeed2 ;
    self.svar_rlt_exit_CruiseController_ModeLogic_mode_logic_On_Active_Maintain_rlt_state_3_states___root2 = svar_rlt_exit_CruiseController_ModeLogic_mode_logic_On_Active_Maintain_rlt_state_3_states___root2 ;
    self.svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_Decrease_rlt_state_3_outports_mode = svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_Decrease_rlt_state_3_outports_mode ;
    self.svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_Decrease_rlt_state_3_states___root = svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_Decrease_rlt_state_3_states___root ;
    self.svar_rlt_exit_CruiseController_ModeLogic_mode_logic_On_Active_Decrease_rlt_state_2_states___root1 = svar_rlt_exit_CruiseController_ModeLogic_mode_logic_On_Active_Decrease_rlt_state_2_states___root1 ;
    self.svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_Maintain_rlt_state_3_outports_mode11 = svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_Maintain_rlt_state_3_outports_mode11 ;
    self.svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_Maintain_rlt_state_3_states___root11 = svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_Maintain_rlt_state_3_states___root11 ;
    self.svar_rlt_exit_CruiseController_ModeLogic_mode_logic_On_Active_Increase_rlt_state_2_states___root1 = svar_rlt_exit_CruiseController_ModeLogic_mode_logic_On_Active_Increase_rlt_state_2_states___root1 ;
    self.svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_Maintain_rlt_state_3_outports_mode21 = svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_Maintain_rlt_state_3_outports_mode21 ;
    self.svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_Maintain_rlt_state_3_states___root21 = svar_rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_Maintain_rlt_state_3_states___root21 ;
    self.svar_newDesiredSpeed = svar_newDesiredSpeed ;
    self.svar_rlt_condact_cruise_controller_CruiseController_SetDesiredSpeed_computeDecreaseInDesiredSpeed_rlt_init_step = svar_rlt_condact_cruise_controller_CruiseController_SetDesiredSpeed_computeDecreaseInDesiredSpeed_rlt_init_step ;
    self.svar_rlt_condact_cruise_controller_CruiseController_SetDesiredSpeed_computeDecreaseInDesiredSpeed_rlt_clock = svar_rlt_condact_cruise_controller_CruiseController_SetDesiredSpeed_computeDecreaseInDesiredSpeed_rlt_clock ;
    self.svar_newDesiredSpeed1 = svar_newDesiredSpeed1 ;
    self.svar_rlt_condact_cruise_controller_CruiseController_SetDesiredSpeed_computeIncreaseInDesiredSpeed_rlt_init_step = svar_rlt_condact_cruise_controller_CruiseController_SetDesiredSpeed_computeIncreaseInDesiredSpeed_rlt_init_step ;
    self.svar_rlt_condact_cruise_controller_CruiseController_SetDesiredSpeed_computeIncreaseInDesiredSpeed_rlt_clock = svar_rlt_condact_cruise_controller_CruiseController_SetDesiredSpeed_computeIncreaseInDesiredSpeed_rlt_clock ;
    
    // |===| Calls.
    
    
    // |===| Return Nothing Result.
    Ok( () )
  }

  fn output(&self) -> Self::Output {(
    self.svar_mode,
    self.svar_cruiseThrottle,
    self.svar_desiredSpeed,
    self.svar_VRP1,
    self.svar_VRP2,
    self.svar_CP8a,
    self.svar_VRP3,
    self.svar_VRP4,
    self.svar_SP4,
    self.svar_SP5,
    self.svar_SP6,
    self.svar_SP7,
    self.svar_SP3b,
    self.svar_SP3c,
    self.svar_SP3,
    self.svar_SP3a,
    self.svar_SP2,
    self.svar_SP1,
    self.svar_SP8,
    self.svar_SP9,
    self.svar_SP10,
    self.svar_SP11,
  )}
}



/// Lustre Language Traits
pub mod Lustre {
  /// Lustre Types
  pub type Int = i32;
  pub type Real = f32;
  pub type Bool = bool;

  /// Lustre System (Component)
  pub trait System: Sized {
    // component types
    type Input;
    type Output;

    /// get size of inputs
    fn arity() -> usize;

    /// run once to get the intial state
    fn init(inp: Self::Input) -> Result<Self, ()>;

    /// update function that will run in a loop
    fn next(&mut self, inp: Self::Input) -> Result<(), ()>;

    /// get output at this time
    fn output(&self) -> Self::Output;
  }
  
}


